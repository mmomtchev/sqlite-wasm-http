"use strict";(self.webpackChunksqlite_wasm_http=self.webpackChunksqlite_wasm_http||[]).push([[842],{842:(t,e,i)=>{i.d(e,{Z:()=>y});const s="object"==typeof performance&&performance&&"function"==typeof performance.now?performance:Date,h="function"==typeof AbortController?AbortController:class{constructor(){this.signal=new a}abort(t=new Error("This operation was aborted")){this.signal.reason=this.signal.reason||t,this.signal.aborted=!0,this.signal.dispatchEvent({type:"abort",target:this.signal})}},n="function"==typeof AbortSignal,o="function"==typeof h.AbortSignal,a=n?AbortSignal:o?h.AbortController:class{constructor(){this.reason=void 0,this.aborted=!1,this._listeners=[]}dispatchEvent(t){"abort"===t.type&&(this.aborted=!0,this.onabort(t),this._listeners.forEach((e=>e(t)),this))}onabort(){}addEventListener(t,e){"abort"===t&&this._listeners.push(e)}removeEventListener(t,e){"abort"===t&&(this._listeners=this._listeners.filter((t=>t!==e)))}},l=new Set,r=(t,e)=>{const i=`LRU_CACHE_OPTION_${t}`;u(i)&&p(i,`${t} option`,`options.${e}`,w)},c=(t,e)=>{const i=`LRU_CACHE_METHOD_${t}`;if(u(i)){const{prototype:s}=w,{get:h}=Object.getOwnPropertyDescriptor(s,t);p(i,`${t} method`,`cache.${e}()`,h)}},d=(...t)=>{"object"==typeof process&&process&&"function"==typeof process.emitWarning?process.emitWarning(...t):console.error(...t)},u=t=>!l.has(t),p=(t,e,i,s)=>{l.add(t),d(`The ${e} is deprecated. Please use ${i} instead.`,"DeprecationWarning",t,s)},f=t=>t&&t===Math.floor(t)&&t>0&&isFinite(t),g=t=>f(t)?t<=Math.pow(2,8)?Uint8Array:t<=Math.pow(2,16)?Uint16Array:t<=Math.pow(2,32)?Uint32Array:t<=Number.MAX_SAFE_INTEGER?v:null:null;class v extends Array{constructor(t){super(t),this.fill(0)}}class S{constructor(t){if(0===t)return[];const e=g(t);this.heap=new e(t),this.length=0}push(t){this.heap[this.length++]=t}pop(){return this.heap[--this.length]}}class w{constructor(t={}){const{max:e=0,ttl:i,ttlResolution:s=1,ttlAutopurge:h,updateAgeOnGet:n,updateAgeOnHas:o,allowStale:a,dispose:c,disposeAfter:p,noDisposeOnSet:v,noUpdateTTL:y,maxSize:m=0,maxEntrySize:z=0,sizeCalculation:L,fetchMethod:_,fetchContext:x,noDeleteOnFetchRejection:T,noDeleteOnStaleGet:F,allowStaleOnFetchRejection:A,allowStaleOnFetchAbort:b,ignoreFetchAbort:k}=t,{length:O,maxAge:E,stale:C}=t instanceof w?{}:t;if(0!==e&&!f(e))throw new TypeError("max option must be a nonnegative integer");const D=e?g(e):Array;if(!D)throw new Error("invalid max value: "+e);if(this.max=e,this.maxSize=m,this.maxEntrySize=z||this.maxSize,this.sizeCalculation=L||O,this.sizeCalculation){if(!this.maxSize&&!this.maxEntrySize)throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");if("function"!=typeof this.sizeCalculation)throw new TypeError("sizeCalculation set to non-function")}if(this.fetchMethod=_||null,this.fetchMethod&&"function"!=typeof this.fetchMethod)throw new TypeError("fetchMethod must be a function if specified");if(this.fetchContext=x,!this.fetchMethod&&void 0!==x)throw new TypeError("cannot set fetchContext without fetchMethod");if(this.keyMap=new Map,this.keyList=new Array(e).fill(null),this.valList=new Array(e).fill(null),this.next=new D(e),this.prev=new D(e),this.head=0,this.tail=0,this.free=new S(e),this.initialFill=1,this.size=0,"function"==typeof c&&(this.dispose=c),"function"==typeof p?(this.disposeAfter=p,this.disposed=[]):(this.disposeAfter=null,this.disposed=null),this.noDisposeOnSet=!!v,this.noUpdateTTL=!!y,this.noDeleteOnFetchRejection=!!T,this.allowStaleOnFetchRejection=!!A,this.allowStaleOnFetchAbort=!!b,this.ignoreFetchAbort=!!k,0!==this.maxEntrySize){if(0!==this.maxSize&&!f(this.maxSize))throw new TypeError("maxSize must be a positive integer if specified");if(!f(this.maxEntrySize))throw new TypeError("maxEntrySize must be a positive integer if specified");this.initializeSizeTracking()}if(this.allowStale=!!a||!!C,this.noDeleteOnStaleGet=!!F,this.updateAgeOnGet=!!n,this.updateAgeOnHas=!!o,this.ttlResolution=f(s)||0===s?s:1,this.ttlAutopurge=!!h,this.ttl=i||E||0,this.ttl){if(!f(this.ttl))throw new TypeError("ttl must be a positive integer if specified");this.initializeTTLTracking()}if(0===this.max&&0===this.ttl&&0===this.maxSize)throw new TypeError("At least one of max, maxSize, or ttl is required");if(!this.ttlAutopurge&&!this.max&&!this.maxSize){const t="LRU_CACHE_UNBOUNDED";u(t)&&(l.add(t),d("TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.","UnboundedCacheWarning",t,w))}C&&r("stale","allowStale"),E&&r("maxAge","ttl"),O&&r("length","sizeCalculation")}getRemainingTTL(t){return this.has(t,{updateAgeOnHas:!1})?1/0:0}initializeTTLTracking(){this.ttls=new v(this.max),this.starts=new v(this.max),this.setItemTTL=(t,e,i=s.now())=>{if(this.starts[t]=0!==e?i:0,this.ttls[t]=e,0!==e&&this.ttlAutopurge){const i=setTimeout((()=>{this.isStale(t)&&this.delete(this.keyList[t])}),e+1);i.unref&&i.unref()}},this.updateItemAge=t=>{this.starts[t]=0!==this.ttls[t]?s.now():0},this.statusTTL=(i,s)=>{i&&(i.ttl=this.ttls[s],i.start=this.starts[s],i.now=t||e(),i.remainingTTL=i.now+i.ttl-i.start)};let t=0;const e=()=>{const e=s.now();if(this.ttlResolution>0){t=e;const i=setTimeout((()=>t=0),this.ttlResolution);i.unref&&i.unref()}return e};this.getRemainingTTL=i=>{const s=this.keyMap.get(i);return void 0===s?0:0===this.ttls[s]||0===this.starts[s]?1/0:this.starts[s]+this.ttls[s]-(t||e())},this.isStale=i=>0!==this.ttls[i]&&0!==this.starts[i]&&(t||e())-this.starts[i]>this.ttls[i]}updateItemAge(t){}statusTTL(t,e){}setItemTTL(t,e,i){}isStale(t){return!1}initializeSizeTracking(){this.calculatedSize=0,this.sizes=new v(this.max),this.removeItemSize=t=>{this.calculatedSize-=this.sizes[t],this.sizes[t]=0},this.requireSize=(t,e,i,s)=>{if(this.isBackgroundFetch(e))return 0;if(!f(i)){if(!s)throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");if("function"!=typeof s)throw new TypeError("sizeCalculation must be a function");if(i=s(e,t),!f(i))throw new TypeError("sizeCalculation return invalid (expect positive integer)")}return i},this.addItemSize=(t,e,i)=>{if(this.sizes[t]=e,this.maxSize){const e=this.maxSize-this.sizes[t];for(;this.calculatedSize>e;)this.evict(!0)}this.calculatedSize+=this.sizes[t],i&&(i.entrySize=e,i.totalCalculatedSize=this.calculatedSize)}}removeItemSize(t){}addItemSize(t,e){}requireSize(t,e,i,s){if(i||s)throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache")}*indexes({allowStale:t=this.allowStale}={}){if(this.size)for(let e=this.tail;this.isValidIndex(e)&&(!t&&this.isStale(e)||(yield e),e!==this.head);)e=this.prev[e]}*rindexes({allowStale:t=this.allowStale}={}){if(this.size)for(let e=this.head;this.isValidIndex(e)&&(!t&&this.isStale(e)||(yield e),e!==this.tail);)e=this.next[e]}isValidIndex(t){return void 0!==t&&this.keyMap.get(this.keyList[t])===t}*entries(){for(const t of this.indexes())void 0===this.valList[t]||void 0===this.keyList[t]||this.isBackgroundFetch(this.valList[t])||(yield[this.keyList[t],this.valList[t]])}*rentries(){for(const t of this.rindexes())void 0===this.valList[t]||void 0===this.keyList[t]||this.isBackgroundFetch(this.valList[t])||(yield[this.keyList[t],this.valList[t]])}*keys(){for(const t of this.indexes())void 0===this.keyList[t]||this.isBackgroundFetch(this.valList[t])||(yield this.keyList[t])}*rkeys(){for(const t of this.rindexes())void 0===this.keyList[t]||this.isBackgroundFetch(this.valList[t])||(yield this.keyList[t])}*values(){for(const t of this.indexes())void 0===this.valList[t]||this.isBackgroundFetch(this.valList[t])||(yield this.valList[t])}*rvalues(){for(const t of this.rindexes())void 0===this.valList[t]||this.isBackgroundFetch(this.valList[t])||(yield this.valList[t])}[Symbol.iterator](){return this.entries()}find(t,e){for(const i of this.indexes()){const s=this.valList[i],h=this.isBackgroundFetch(s)?s.__staleWhileFetching:s;if(void 0!==h&&t(h,this.keyList[i],this))return this.get(this.keyList[i],e)}}forEach(t,e=this){for(const i of this.indexes()){const s=this.valList[i],h=this.isBackgroundFetch(s)?s.__staleWhileFetching:s;void 0!==h&&t.call(e,h,this.keyList[i],this)}}rforEach(t,e=this){for(const i of this.rindexes()){const s=this.valList[i],h=this.isBackgroundFetch(s)?s.__staleWhileFetching:s;void 0!==h&&t.call(e,h,this.keyList[i],this)}}get prune(){return c("prune","purgeStale"),this.purgeStale}purgeStale(){let t=!1;for(const e of this.rindexes({allowStale:!0}))this.isStale(e)&&(this.delete(this.keyList[e]),t=!0);return t}dump(){const t=[];for(const e of this.indexes({allowStale:!0})){const i=this.keyList[e],h=this.valList[e],n=this.isBackgroundFetch(h)?h.__staleWhileFetching:h;if(void 0===n)continue;const o={value:n};if(this.ttls){o.ttl=this.ttls[e];const t=s.now()-this.starts[e];o.start=Math.floor(Date.now()-t)}this.sizes&&(o.size=this.sizes[e]),t.unshift([i,o])}return t}load(t){this.clear();for(const[e,i]of t){if(i.start){const t=Date.now()-i.start;i.start=s.now()-t}this.set(e,i.value,i)}}dispose(t,e,i){}set(t,e,{ttl:i=this.ttl,start:s,noDisposeOnSet:h=this.noDisposeOnSet,size:n=0,sizeCalculation:o=this.sizeCalculation,noUpdateTTL:a=this.noUpdateTTL,status:l}={}){if(n=this.requireSize(t,e,n,o),this.maxEntrySize&&n>this.maxEntrySize)return l&&(l.set="miss",l.maxEntrySizeExceeded=!0),this.delete(t),this;let r=0===this.size?void 0:this.keyMap.get(t);if(void 0===r)r=this.newIndex(),this.keyList[r]=t,this.valList[r]=e,this.keyMap.set(t,r),this.next[this.tail]=r,this.prev[r]=this.tail,this.tail=r,this.size++,this.addItemSize(r,n,l),l&&(l.set="add"),a=!1;else{this.moveToTail(r);const i=this.valList[r];if(e!==i){if(this.isBackgroundFetch(i)?i.__abortController.abort(new Error("replaced")):h||(this.dispose(i,t,"set"),this.disposeAfter&&this.disposed.push([i,t,"set"])),this.removeItemSize(r),this.valList[r]=e,this.addItemSize(r,n,l),l){l.set="replace";const t=i&&this.isBackgroundFetch(i)?i.__staleWhileFetching:i;void 0!==t&&(l.oldValue=t)}}else l&&(l.set="update")}if(0===i||0!==this.ttl||this.ttls||this.initializeTTLTracking(),a||this.setItemTTL(r,i,s),this.statusTTL(l,r),this.disposeAfter)for(;this.disposed.length;)this.disposeAfter(...this.disposed.shift());return this}newIndex(){return 0===this.size?this.tail:this.size===this.max&&0!==this.max?this.evict(!1):0!==this.free.length?this.free.pop():this.initialFill++}pop(){if(this.size){const t=this.valList[this.head];return this.evict(!0),t}}evict(t){const e=this.head,i=this.keyList[e],s=this.valList[e];return this.isBackgroundFetch(s)?s.__abortController.abort(new Error("evicted")):(this.dispose(s,i,"evict"),this.disposeAfter&&this.disposed.push([s,i,"evict"])),this.removeItemSize(e),t&&(this.keyList[e]=null,this.valList[e]=null,this.free.push(e)),this.head=this.next[e],this.keyMap.delete(i),this.size--,e}has(t,{updateAgeOnHas:e=this.updateAgeOnHas,status:i}={}){const s=this.keyMap.get(t);if(void 0!==s){if(!this.isStale(s))return e&&this.updateItemAge(s),i&&(i.has="hit"),this.statusTTL(i,s),!0;i&&(i.has="stale",this.statusTTL(i,s))}else i&&(i.has="miss");return!1}peek(t,{allowStale:e=this.allowStale}={}){const i=this.keyMap.get(t);if(void 0!==i&&(e||!this.isStale(i))){const t=this.valList[i];return this.isBackgroundFetch(t)?t.__staleWhileFetching:t}}backgroundFetch(t,e,i,s){const n=void 0===e?void 0:this.valList[e];if(this.isBackgroundFetch(n))return n;const o=new h;i.signal&&i.signal.addEventListener("abort",(()=>o.abort(i.signal.reason)));const a={signal:o.signal,options:i,context:s},l=(s,h=!1)=>{const{aborted:n}=o.signal,l=i.ignoreFetchAbort&&void 0!==s;return i.status&&(n&&!h?(i.status.fetchAborted=!0,i.status.fetchError=o.signal.reason,l&&(i.status.fetchAbortIgnored=!0)):i.status.fetchResolved=!0),!n||l||h?(this.valList[e]===c&&(void 0===s?c.__staleWhileFetching?this.valList[e]=c.__staleWhileFetching:this.delete(t):(i.status&&(i.status.fetchUpdated=!0),this.set(t,s,a.options))),s):r(o.signal.reason)},r=s=>{const{aborted:h}=o.signal,n=h&&i.allowStaleOnFetchAbort,a=n||i.allowStaleOnFetchRejection,l=a||i.noDeleteOnFetchRejection;if(this.valList[e]===c&&(l&&void 0!==c.__staleWhileFetching?n||(this.valList[e]=c.__staleWhileFetching):this.delete(t)),a)return i.status&&void 0!==c.__staleWhileFetching&&(i.status.returnedStale=!0),c.__staleWhileFetching;if(c.__returned===c)throw s};i.status&&(i.status.fetchDispatched=!0);const c=new Promise(((e,s)=>{this.fetchMethod(t,n,a).then((t=>e(t)),s),o.signal.addEventListener("abort",(()=>{i.ignoreFetchAbort&&!i.allowStaleOnFetchAbort||(e(),i.allowStaleOnFetchAbort&&(e=t=>l(t,!0)))}))})).then(l,(t=>(i.status&&(i.status.fetchRejected=!0,i.status.fetchError=t),r(t))));return c.__abortController=o,c.__staleWhileFetching=n,c.__returned=null,void 0===e?(this.set(t,c,{...a.options,status:void 0}),e=this.keyMap.get(t)):this.valList[e]=c,c}isBackgroundFetch(t){return t&&"object"==typeof t&&"function"==typeof t.then&&Object.prototype.hasOwnProperty.call(t,"__staleWhileFetching")&&Object.prototype.hasOwnProperty.call(t,"__returned")&&(t.__returned===t||null===t.__returned)}async fetch(t,{allowStale:e=this.allowStale,updateAgeOnGet:i=this.updateAgeOnGet,noDeleteOnStaleGet:s=this.noDeleteOnStaleGet,ttl:h=this.ttl,noDisposeOnSet:n=this.noDisposeOnSet,size:o=0,sizeCalculation:a=this.sizeCalculation,noUpdateTTL:l=this.noUpdateTTL,noDeleteOnFetchRejection:r=this.noDeleteOnFetchRejection,allowStaleOnFetchRejection:c=this.allowStaleOnFetchRejection,ignoreFetchAbort:d=this.ignoreFetchAbort,allowStaleOnFetchAbort:u=this.allowStaleOnFetchAbort,fetchContext:p=this.fetchContext,forceRefresh:f=!1,status:g,signal:v}={}){if(!this.fetchMethod)return g&&(g.fetch="get"),this.get(t,{allowStale:e,updateAgeOnGet:i,noDeleteOnStaleGet:s,status:g});const S={allowStale:e,updateAgeOnGet:i,noDeleteOnStaleGet:s,ttl:h,noDisposeOnSet:n,size:o,sizeCalculation:a,noUpdateTTL:l,noDeleteOnFetchRejection:r,allowStaleOnFetchRejection:c,allowStaleOnFetchAbort:u,ignoreFetchAbort:d,status:g,signal:v};let w=this.keyMap.get(t);if(void 0===w){g&&(g.fetch="miss");const e=this.backgroundFetch(t,w,S,p);return e.__returned=e}{const s=this.valList[w];if(this.isBackgroundFetch(s)){const t=e&&void 0!==s.__staleWhileFetching;return g&&(g.fetch="inflight",t&&(g.returnedStale=!0)),t?s.__staleWhileFetching:s.__returned=s}const h=this.isStale(w);if(!f&&!h)return g&&(g.fetch="hit"),this.moveToTail(w),i&&this.updateItemAge(w),this.statusTTL(g,w),s;const n=this.backgroundFetch(t,w,S,p),o=void 0!==n.__staleWhileFetching,a=o&&e;return g&&(g.fetch=o&&h?"stale":"refresh",a&&h&&(g.returnedStale=!0)),a?n.__staleWhileFetching:n.__returned=n}}get(t,{allowStale:e=this.allowStale,updateAgeOnGet:i=this.updateAgeOnGet,noDeleteOnStaleGet:s=this.noDeleteOnStaleGet,status:h}={}){const n=this.keyMap.get(t);if(void 0!==n){const o=this.valList[n],a=this.isBackgroundFetch(o);return this.statusTTL(h,n),this.isStale(n)?(h&&(h.get="stale"),a?(h&&(h.returnedStale=e&&void 0!==o.__staleWhileFetching),e?o.__staleWhileFetching:void 0):(s||this.delete(t),h&&(h.returnedStale=e),e?o:void 0)):(h&&(h.get="hit"),a?o.__staleWhileFetching:(this.moveToTail(n),i&&this.updateItemAge(n),o))}h&&(h.get="miss")}connect(t,e){this.prev[e]=t,this.next[t]=e}moveToTail(t){t!==this.tail&&(t===this.head?this.head=this.next[t]:this.connect(this.prev[t],this.next[t]),this.connect(this.tail,t),this.tail=t)}get del(){return c("del","delete"),this.delete}delete(t){let e=!1;if(0!==this.size){const i=this.keyMap.get(t);if(void 0!==i)if(e=!0,1===this.size)this.clear();else{this.removeItemSize(i);const e=this.valList[i];this.isBackgroundFetch(e)?e.__abortController.abort(new Error("deleted")):(this.dispose(e,t,"delete"),this.disposeAfter&&this.disposed.push([e,t,"delete"])),this.keyMap.delete(t),this.keyList[i]=null,this.valList[i]=null,i===this.tail?this.tail=this.prev[i]:i===this.head?this.head=this.next[i]:(this.next[this.prev[i]]=this.next[i],this.prev[this.next[i]]=this.prev[i]),this.size--,this.free.push(i)}}if(this.disposed)for(;this.disposed.length;)this.disposeAfter(...this.disposed.shift());return e}clear(){for(const t of this.rindexes({allowStale:!0})){const e=this.valList[t];if(this.isBackgroundFetch(e))e.__abortController.abort(new Error("deleted"));else{const i=this.keyList[t];this.dispose(e,i,"delete"),this.disposeAfter&&this.disposed.push([e,i,"delete"])}}if(this.keyMap.clear(),this.valList.fill(null),this.keyList.fill(null),this.ttls&&(this.ttls.fill(0),this.starts.fill(0)),this.sizes&&this.sizes.fill(0),this.head=0,this.tail=0,this.initialFill=1,this.free.length=0,this.calculatedSize=0,this.size=0,this.disposed)for(;this.disposed.length;)this.disposeAfter(...this.disposed.shift())}get reset(){return c("reset","clear"),this.clear}get length(){return((t,e)=>{const i=`LRU_CACHE_PROPERTY_${t}`;if(u(i)){const{prototype:e}=w,{get:s}=Object.getOwnPropertyDescriptor(e,t);p(i,`${t} property`,"cache.size",s)}})("length"),this.size}static get AbortController(){return h}static get AbortSignal(){return a}}const y=w}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RyxZQUFjLEVBQ25CeEcsS0FBS3VHLEtBQUtsQyxPQUFTLEVBQ25CckUsS0FBS21JLGVBQWlCLEVBQ3RCbkksS0FBSytELEtBQU8sRUFDUi9ELEtBQUt5RyxTQUNQLEtBQU96RyxLQUFLeUcsU0FBU3BDLFFBQ25CckUsS0FBSytFLGdCQUFnQi9FLEtBQUt5RyxTQUFTd0UsUUFHekMsQ0FFSXFDLFlBRUYsT0FEQXBMLEVBQWlCLFFBQVMsU0FDbkJsQyxLQUFLd0ssS0FDZCxDQUVJbkcsYUFFRixNQWxuQ3VCLEVBQUNrSixFQUFPMUwsS0FDakMsTUFBTUMsRUFBTyxzQkFBc0J5TCxJQUNuQyxHQUFJeEwsRUFBV0QsR0FBTyxDQUNwQixNQUFNLFVBQUVNLEdBQWNILEdBQ2hCLElBQUVJLEdBQVFDLE9BQU9DLHlCQUF5QkgsRUFBV21MLEdBQzNEdkwsRUFBS0YsRUFBTSxHQUFHeUwsYUFBa0IsYUFBb0JsTCxFQUN0RCxHQTJtQ0VtTCxDQUFtQixVQUNaeE4sS0FBSytELElBQ2QsQ0FFV2pFLDZCQUNULE9BQU9ELENBQ1QsQ0FDV2MseUJBQ1QsT0FBT1QsQ0FDVCxFQUdGLFMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcWxpdGUtd2FzbS1odHRwLy4vbm9kZV9tb2R1bGVzL2xydS1jYWNoZS9pbmRleC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcGVyZiA9XG4gIHR5cGVvZiBwZXJmb3JtYW5jZSA9PT0gJ29iamVjdCcgJiZcbiAgcGVyZm9ybWFuY2UgJiZcbiAgdHlwZW9mIHBlcmZvcm1hbmNlLm5vdyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gcGVyZm9ybWFuY2VcbiAgICA6IERhdGVcblxuY29uc3QgaGFzQWJvcnRDb250cm9sbGVyID0gdHlwZW9mIEFib3J0Q29udHJvbGxlciA9PT0gJ2Z1bmN0aW9uJ1xuXG4vLyBtaW5pbWFsIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5IHBvbHlmaWxsXG4vLyB0aGlzIGRvZXNuJ3QgaGF2ZSBuZWFybHkgYWxsIHRoZSBjaGVja3MgYW5kIHdoYXRub3QgdGhhdFxuLy8gYWN0dWFsIEFib3J0Q29udHJvbGxlci9TaWduYWwgaGFzLCBidXQgaXQncyBlbm91Z2ggZm9yXG4vLyBvdXIgcHVycG9zZXMsIGFuZCBpZiB1c2VkIHByb3Blcmx5LCBiZWhhdmVzIHRoZSBzYW1lLlxuY29uc3QgQUMgPSBoYXNBYm9ydENvbnRyb2xsZXJcbiAgPyBBYm9ydENvbnRyb2xsZXJcbiAgOiBjbGFzcyBBYm9ydENvbnRyb2xsZXIge1xuICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc2lnbmFsID0gbmV3IEFTKClcbiAgICAgIH1cbiAgICAgIGFib3J0KHJlYXNvbiA9IG5ldyBFcnJvcignVGhpcyBvcGVyYXRpb24gd2FzIGFib3J0ZWQnKSkge1xuICAgICAgICB0aGlzLnNpZ25hbC5yZWFzb24gPSB0aGlzLnNpZ25hbC5yZWFzb24gfHwgcmVhc29uXG4gICAgICAgIHRoaXMuc2lnbmFsLmFib3J0ZWQgPSB0cnVlXG4gICAgICAgIHRoaXMuc2lnbmFsLmRpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgIHR5cGU6ICdhYm9ydCcsXG4gICAgICAgICAgdGFyZ2V0OiB0aGlzLnNpZ25hbCxcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG5cbmNvbnN0IGhhc0Fib3J0U2lnbmFsID0gdHlwZW9mIEFib3J0U2lnbmFsID09PSAnZnVuY3Rpb24nXG4vLyBTb21lIHBvbHlmaWxscyBwdXQgdGhpcyBvbiB0aGUgQUMgY2xhc3MsIG5vdCBnbG9iYWxcbmNvbnN0IGhhc0FDQWJvcnRTaWduYWwgPSB0eXBlb2YgQUMuQWJvcnRTaWduYWwgPT09ICdmdW5jdGlvbidcbmNvbnN0IEFTID0gaGFzQWJvcnRTaWduYWxcbiAgPyBBYm9ydFNpZ25hbFxuICA6IGhhc0FDQWJvcnRTaWduYWxcbiAgPyBBQy5BYm9ydENvbnRyb2xsZXJcbiAgOiBjbGFzcyBBYm9ydFNpZ25hbCB7XG4gICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5yZWFzb24gPSB1bmRlZmluZWRcbiAgICAgICAgdGhpcy5hYm9ydGVkID0gZmFsc2VcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzID0gW11cbiAgICAgIH1cbiAgICAgIGRpc3BhdGNoRXZlbnQoZSkge1xuICAgICAgICBpZiAoZS50eXBlID09PSAnYWJvcnQnKSB7XG4gICAgICAgICAgdGhpcy5hYm9ydGVkID0gdHJ1ZVxuICAgICAgICAgIHRoaXMub25hYm9ydChlKVxuICAgICAgICAgIHRoaXMuX2xpc3RlbmVycy5mb3JFYWNoKGYgPT4gZihlKSwgdGhpcylcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgb25hYm9ydCgpIHt9XG4gICAgICBhZGRFdmVudExpc3RlbmVyKGV2LCBmbikge1xuICAgICAgICBpZiAoZXYgPT09ICdhYm9ydCcpIHtcbiAgICAgICAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChmbilcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihldiwgZm4pIHtcbiAgICAgICAgaWYgKGV2ID09PSAnYWJvcnQnKSB7XG4gICAgICAgICAgdGhpcy5fbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzLmZpbHRlcihmID0+IGYgIT09IGZuKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG5jb25zdCB3YXJuZWQgPSBuZXcgU2V0KClcbmNvbnN0IGRlcHJlY2F0ZWRPcHRpb24gPSAob3B0LCBpbnN0ZWFkKSA9PiB7XG4gIGNvbnN0IGNvZGUgPSBgTFJVX0NBQ0hFX09QVElPTl8ke29wdH1gXG4gIGlmIChzaG91bGRXYXJuKGNvZGUpKSB7XG4gICAgd2Fybihjb2RlLCBgJHtvcHR9IG9wdGlvbmAsIGBvcHRpb25zLiR7aW5zdGVhZH1gLCBMUlVDYWNoZSlcbiAgfVxufVxuY29uc3QgZGVwcmVjYXRlZE1ldGhvZCA9IChtZXRob2QsIGluc3RlYWQpID0+IHtcbiAgY29uc3QgY29kZSA9IGBMUlVfQ0FDSEVfTUVUSE9EXyR7bWV0aG9kfWBcbiAgaWYgKHNob3VsZFdhcm4oY29kZSkpIHtcbiAgICBjb25zdCB7IHByb3RvdHlwZSB9ID0gTFJVQ2FjaGVcbiAgICBjb25zdCB7IGdldCB9ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwcm90b3R5cGUsIG1ldGhvZClcbiAgICB3YXJuKGNvZGUsIGAke21ldGhvZH0gbWV0aG9kYCwgYGNhY2hlLiR7aW5zdGVhZH0oKWAsIGdldClcbiAgfVxufVxuY29uc3QgZGVwcmVjYXRlZFByb3BlcnR5ID0gKGZpZWxkLCBpbnN0ZWFkKSA9PiB7XG4gIGNvbnN0IGNvZGUgPSBgTFJVX0NBQ0hFX1BST1BFUlRZXyR7ZmllbGR9YFxuICBpZiAoc2hvdWxkV2Fybihjb2RlKSkge1xuICAgIGNvbnN0IHsgcHJvdG90eXBlIH0gPSBMUlVDYWNoZVxuICAgIGNvbnN0IHsgZ2V0IH0gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHByb3RvdHlwZSwgZmllbGQpXG4gICAgd2Fybihjb2RlLCBgJHtmaWVsZH0gcHJvcGVydHlgLCBgY2FjaGUuJHtpbnN0ZWFkfWAsIGdldClcbiAgfVxufVxuXG5jb25zdCBlbWl0V2FybmluZyA9ICguLi5hKSA9PiB7XG4gIHR5cGVvZiBwcm9jZXNzID09PSAnb2JqZWN0JyAmJlxuICBwcm9jZXNzICYmXG4gIHR5cGVvZiBwcm9jZXNzLmVtaXRXYXJuaW5nID09PSAnZnVuY3Rpb24nXG4gICAgPyBwcm9jZXNzLmVtaXRXYXJuaW5nKC4uLmEpXG4gICAgOiBjb25zb2xlLmVycm9yKC4uLmEpXG59XG5cbmNvbnN0IHNob3VsZFdhcm4gPSBjb2RlID0+ICF3YXJuZWQuaGFzKGNvZGUpXG5cbmNvbnN0IHdhcm4gPSAoY29kZSwgd2hhdCwgaW5zdGVhZCwgZm4pID0+IHtcbiAgd2FybmVkLmFkZChjb2RlKVxuICBjb25zdCBtc2cgPSBgVGhlICR7d2hhdH0gaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSAke2luc3RlYWR9IGluc3RlYWQuYFxuICBlbWl0V2FybmluZyhtc2csICdEZXByZWNhdGlvbldhcm5pbmcnLCBjb2RlLCBmbilcbn1cblxuY29uc3QgaXNQb3NJbnQgPSBuID0+IG4gJiYgbiA9PT0gTWF0aC5mbG9vcihuKSAmJiBuID4gMCAmJiBpc0Zpbml0ZShuKVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAtIFRoaXMgaXMgYSBsaXR0bGUgYml0IHJpZGljdWxvdXMsIHRiaC5cbiAqIFRoZSBtYXhpbXVtIGFycmF5IGxlbmd0aCBpcyAyXjMyLTEgb3IgdGhlcmVhYm91dHMgb24gbW9zdCBKUyBpbXBscy5cbiAqIEFuZCB3ZWxsIGJlZm9yZSB0aGF0IHBvaW50LCB5b3UncmUgY2FjaGluZyB0aGUgZW50aXJlIHdvcmxkLCBJIG1lYW4sXG4gKiB0aGF0J3MgfjMyR0Igb2YganVzdCBpbnRlZ2VycyBmb3IgdGhlIG5leHQvcHJldiBsaW5rcywgcGx1cyB3aGF0ZXZlclxuICogZWxzZSB0byBob2xkIHRoYXQgbWFueSBrZXlzIGFuZCB2YWx1ZXMuICBKdXN0IGZpbGxpbmcgdGhlIG1lbW9yeSB3aXRoXG4gKiB6ZXJvZXMgYXQgaW5pdCB0aW1lIGlzIGJydXRhbCB3aGVuIHlvdSBnZXQgdGhhdCBiaWcuXG4gKiBCdXQgd2h5IG5vdCBiZSBjb21wbGV0ZT9cbiAqIE1heWJlIGluIHRoZSBmdXR1cmUsIHRoZXNlIGxpbWl0cyB3aWxsIGhhdmUgZXhwYW5kZWQuICovXG5jb25zdCBnZXRVaW50QXJyYXkgPSBtYXggPT5cbiAgIWlzUG9zSW50KG1heClcbiAgICA/IG51bGxcbiAgICA6IG1heCA8PSBNYXRoLnBvdygyLCA4KVxuICAgID8gVWludDhBcnJheVxuICAgIDogbWF4IDw9IE1hdGgucG93KDIsIDE2KVxuICAgID8gVWludDE2QXJyYXlcbiAgICA6IG1heCA8PSBNYXRoLnBvdygyLCAzMilcbiAgICA/IFVpbnQzMkFycmF5XG4gICAgOiBtYXggPD0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJcbiAgICA/IFplcm9BcnJheVxuICAgIDogbnVsbFxuXG5jbGFzcyBaZXJvQXJyYXkgZXh0ZW5kcyBBcnJheSB7XG4gIGNvbnN0cnVjdG9yKHNpemUpIHtcbiAgICBzdXBlcihzaXplKVxuICAgIHRoaXMuZmlsbCgwKVxuICB9XG59XG5cbmNsYXNzIFN0YWNrIHtcbiAgY29uc3RydWN0b3IobWF4KSB7XG4gICAgaWYgKG1heCA9PT0gMCkge1xuICAgICAgcmV0dXJuIFtdXG4gICAgfVxuICAgIGNvbnN0IFVpbnRBcnJheSA9IGdldFVpbnRBcnJheShtYXgpXG4gICAgdGhpcy5oZWFwID0gbmV3IFVpbnRBcnJheShtYXgpXG4gICAgdGhpcy5sZW5ndGggPSAwXG4gIH1cbiAgcHVzaChuKSB7XG4gICAgdGhpcy5oZWFwW3RoaXMubGVuZ3RoKytdID0gblxuICB9XG4gIHBvcCgpIHtcbiAgICByZXR1cm4gdGhpcy5oZWFwWy0tdGhpcy5sZW5ndGhdXG4gIH1cbn1cblxuY2xhc3MgTFJVQ2FjaGUge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7XG4gICAgICBtYXggPSAwLFxuICAgICAgdHRsLFxuICAgICAgdHRsUmVzb2x1dGlvbiA9IDEsXG4gICAgICB0dGxBdXRvcHVyZ2UsXG4gICAgICB1cGRhdGVBZ2VPbkdldCxcbiAgICAgIHVwZGF0ZUFnZU9uSGFzLFxuICAgICAgYWxsb3dTdGFsZSxcbiAgICAgIGRpc3Bvc2UsXG4gICAgICBkaXNwb3NlQWZ0ZXIsXG4gICAgICBub0Rpc3Bvc2VPblNldCxcbiAgICAgIG5vVXBkYXRlVFRMLFxuICAgICAgbWF4U2l6ZSA9IDAsXG4gICAgICBtYXhFbnRyeVNpemUgPSAwLFxuICAgICAgc2l6ZUNhbGN1bGF0aW9uLFxuICAgICAgZmV0Y2hNZXRob2QsXG4gICAgICBmZXRjaENvbnRleHQsXG4gICAgICBub0RlbGV0ZU9uRmV0Y2hSZWplY3Rpb24sXG4gICAgICBub0RlbGV0ZU9uU3RhbGVHZXQsXG4gICAgICBhbGxvd1N0YWxlT25GZXRjaFJlamVjdGlvbixcbiAgICAgIGFsbG93U3RhbGVPbkZldGNoQWJvcnQsXG4gICAgICBpZ25vcmVGZXRjaEFib3J0LFxuICAgIH0gPSBvcHRpb25zXG5cbiAgICAvLyBkZXByZWNhdGVkIG9wdGlvbnMsIGRvbid0IHRyaWdnZXIgYSB3YXJuaW5nIGZvciBnZXR0aW5nIHRoZW0gaWZcbiAgICAvLyB0aGUgdGhpbmcgYmVpbmcgcGFzc2VkIGluIGlzIGFub3RoZXIgTFJVQ2FjaGUgd2UncmUgY29weWluZy5cbiAgICBjb25zdCB7IGxlbmd0aCwgbWF4QWdlLCBzdGFsZSB9ID1cbiAgICAgIG9wdGlvbnMgaW5zdGFuY2VvZiBMUlVDYWNoZSA/IHt9IDogb3B0aW9uc1xuXG4gICAgaWYgKG1heCAhPT0gMCAmJiAhaXNQb3NJbnQobWF4KSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWF4IG9wdGlvbiBtdXN0IGJlIGEgbm9ubmVnYXRpdmUgaW50ZWdlcicpXG4gICAgfVxuXG4gICAgY29uc3QgVWludEFycmF5ID0gbWF4ID8gZ2V0VWludEFycmF5KG1heCkgOiBBcnJheVxuICAgIGlmICghVWludEFycmF5KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgbWF4IHZhbHVlOiAnICsgbWF4KVxuICAgIH1cblxuICAgIHRoaXMubWF4ID0gbWF4XG4gICAgdGhpcy5tYXhTaXplID0gbWF4U2l6ZVxuICAgIHRoaXMubWF4RW50cnlTaXplID0gbWF4RW50cnlTaXplIHx8IHRoaXMubWF4U2l6ZVxuICAgIHRoaXMuc2l6ZUNhbGN1bGF0aW9uID0gc2l6ZUNhbGN1bGF0aW9uIHx8IGxlbmd0aFxuICAgIGlmICh0aGlzLnNpemVDYWxjdWxhdGlvbikge1xuICAgICAgaWYgKCF0aGlzLm1heFNpemUgJiYgIXRoaXMubWF4RW50cnlTaXplKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgJ2Nhbm5vdCBzZXQgc2l6ZUNhbGN1bGF0aW9uIHdpdGhvdXQgc2V0dGluZyBtYXhTaXplIG9yIG1heEVudHJ5U2l6ZSdcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB0aGlzLnNpemVDYWxjdWxhdGlvbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzaXplQ2FsY3VsYXRpb24gc2V0IHRvIG5vbi1mdW5jdGlvbicpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5mZXRjaE1ldGhvZCA9IGZldGNoTWV0aG9kIHx8IG51bGxcbiAgICBpZiAodGhpcy5mZXRjaE1ldGhvZCAmJiB0eXBlb2YgdGhpcy5mZXRjaE1ldGhvZCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgJ2ZldGNoTWV0aG9kIG11c3QgYmUgYSBmdW5jdGlvbiBpZiBzcGVjaWZpZWQnXG4gICAgICApXG4gICAgfVxuXG4gICAgdGhpcy5mZXRjaENvbnRleHQgPSBmZXRjaENvbnRleHRcbiAgICBpZiAoIXRoaXMuZmV0Y2hNZXRob2QgJiYgZmV0Y2hDb250ZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdjYW5ub3Qgc2V0IGZldGNoQ29udGV4dCB3aXRob3V0IGZldGNoTWV0aG9kJ1xuICAgICAgKVxuICAgIH1cblxuICAgIHRoaXMua2V5TWFwID0gbmV3IE1hcCgpXG4gICAgdGhpcy5rZXlMaXN0ID0gbmV3IEFycmF5KG1heCkuZmlsbChudWxsKVxuICAgIHRoaXMudmFsTGlzdCA9IG5ldyBBcnJheShtYXgpLmZpbGwobnVsbClcbiAgICB0aGlzLm5leHQgPSBuZXcgVWludEFycmF5KG1heClcbiAgICB0aGlzLnByZXYgPSBuZXcgVWludEFycmF5KG1heClcbiAgICB0aGlzLmhlYWQgPSAwXG4gICAgdGhpcy50YWlsID0gMFxuICAgIHRoaXMuZnJlZSA9IG5ldyBTdGFjayhtYXgpXG4gICAgdGhpcy5pbml0aWFsRmlsbCA9IDFcbiAgICB0aGlzLnNpemUgPSAwXG5cbiAgICBpZiAodHlwZW9mIGRpc3Bvc2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuZGlzcG9zZSA9IGRpc3Bvc2VcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBkaXNwb3NlQWZ0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuZGlzcG9zZUFmdGVyID0gZGlzcG9zZUFmdGVyXG4gICAgICB0aGlzLmRpc3Bvc2VkID0gW11cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kaXNwb3NlQWZ0ZXIgPSBudWxsXG4gICAgICB0aGlzLmRpc3Bvc2VkID0gbnVsbFxuICAgIH1cbiAgICB0aGlzLm5vRGlzcG9zZU9uU2V0ID0gISFub0Rpc3Bvc2VPblNldFxuICAgIHRoaXMubm9VcGRhdGVUVEwgPSAhIW5vVXBkYXRlVFRMXG4gICAgdGhpcy5ub0RlbGV0ZU9uRmV0Y2hSZWplY3Rpb24gPSAhIW5vRGVsZXRlT25GZXRjaFJlamVjdGlvblxuICAgIHRoaXMuYWxsb3dTdGFsZU9uRmV0Y2hSZWplY3Rpb24gPSAhIWFsbG93U3RhbGVPbkZldGNoUmVqZWN0aW9uXG4gICAgdGhpcy5hbGxvd1N0YWxlT25GZXRjaEFib3J0ID0gISFhbGxvd1N0YWxlT25GZXRjaEFib3J0XG4gICAgdGhpcy5pZ25vcmVGZXRjaEFib3J0ID0gISFpZ25vcmVGZXRjaEFib3J0XG5cbiAgICAvLyBOQjogbWF4RW50cnlTaXplIGlzIHNldCB0byBtYXhTaXplIGlmIGl0J3Mgc2V0XG4gICAgaWYgKHRoaXMubWF4RW50cnlTaXplICE9PSAwKSB7XG4gICAgICBpZiAodGhpcy5tYXhTaXplICE9PSAwKSB7XG4gICAgICAgIGlmICghaXNQb3NJbnQodGhpcy5tYXhTaXplKSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgICAnbWF4U2l6ZSBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlciBpZiBzcGVjaWZpZWQnXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWlzUG9zSW50KHRoaXMubWF4RW50cnlTaXplKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICdtYXhFbnRyeVNpemUgbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXIgaWYgc3BlY2lmaWVkJ1xuICAgICAgICApXG4gICAgICB9XG4gICAgICB0aGlzLmluaXRpYWxpemVTaXplVHJhY2tpbmcoKVxuICAgIH1cblxuICAgIHRoaXMuYWxsb3dTdGFsZSA9ICEhYWxsb3dTdGFsZSB8fCAhIXN0YWxlXG4gICAgdGhpcy5ub0RlbGV0ZU9uU3RhbGVHZXQgPSAhIW5vRGVsZXRlT25TdGFsZUdldFxuICAgIHRoaXMudXBkYXRlQWdlT25HZXQgPSAhIXVwZGF0ZUFnZU9uR2V0XG4gICAgdGhpcy51cGRhdGVBZ2VPbkhhcyA9ICEhdXBkYXRlQWdlT25IYXNcbiAgICB0aGlzLnR0bFJlc29sdXRpb24gPVxuICAgICAgaXNQb3NJbnQodHRsUmVzb2x1dGlvbikgfHwgdHRsUmVzb2x1dGlvbiA9PT0gMFxuICAgICAgICA/IHR0bFJlc29sdXRpb25cbiAgICAgICAgOiAxXG4gICAgdGhpcy50dGxBdXRvcHVyZ2UgPSAhIXR0bEF1dG9wdXJnZVxuICAgIHRoaXMudHRsID0gdHRsIHx8IG1heEFnZSB8fCAwXG4gICAgaWYgKHRoaXMudHRsKSB7XG4gICAgICBpZiAoIWlzUG9zSW50KHRoaXMudHRsKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICd0dGwgbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXIgaWYgc3BlY2lmaWVkJ1xuICAgICAgICApXG4gICAgICB9XG4gICAgICB0aGlzLmluaXRpYWxpemVUVExUcmFja2luZygpXG4gICAgfVxuXG4gICAgLy8gZG8gbm90IGFsbG93IGNvbXBsZXRlbHkgdW5ib3VuZGVkIGNhY2hlc1xuICAgIGlmICh0aGlzLm1heCA9PT0gMCAmJiB0aGlzLnR0bCA9PT0gMCAmJiB0aGlzLm1heFNpemUgPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdBdCBsZWFzdCBvbmUgb2YgbWF4LCBtYXhTaXplLCBvciB0dGwgaXMgcmVxdWlyZWQnXG4gICAgICApXG4gICAgfVxuICAgIGlmICghdGhpcy50dGxBdXRvcHVyZ2UgJiYgIXRoaXMubWF4ICYmICF0aGlzLm1heFNpemUpIHtcbiAgICAgIGNvbnN0IGNvZGUgPSAnTFJVX0NBQ0hFX1VOQk9VTkRFRCdcbiAgICAgIGlmIChzaG91bGRXYXJuKGNvZGUpKSB7XG4gICAgICAgIHdhcm5lZC5hZGQoY29kZSlcbiAgICAgICAgY29uc3QgbXNnID1cbiAgICAgICAgICAnVFRMIGNhY2hpbmcgd2l0aG91dCB0dGxBdXRvcHVyZ2UsIG1heCwgb3IgbWF4U2l6ZSBjYW4gJyArXG4gICAgICAgICAgJ3Jlc3VsdCBpbiB1bmJvdW5kZWQgbWVtb3J5IGNvbnN1bXB0aW9uLidcbiAgICAgICAgZW1pdFdhcm5pbmcobXNnLCAnVW5ib3VuZGVkQ2FjaGVXYXJuaW5nJywgY29kZSwgTFJVQ2FjaGUpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN0YWxlKSB7XG4gICAgICBkZXByZWNhdGVkT3B0aW9uKCdzdGFsZScsICdhbGxvd1N0YWxlJylcbiAgICB9XG4gICAgaWYgKG1heEFnZSkge1xuICAgICAgZGVwcmVjYXRlZE9wdGlvbignbWF4QWdlJywgJ3R0bCcpXG4gICAgfVxuICAgIGlmIChsZW5ndGgpIHtcbiAgICAgIGRlcHJlY2F0ZWRPcHRpb24oJ2xlbmd0aCcsICdzaXplQ2FsY3VsYXRpb24nKVxuICAgIH1cbiAgfVxuXG4gIGdldFJlbWFpbmluZ1RUTChrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5oYXMoa2V5LCB7IHVwZGF0ZUFnZU9uSGFzOiBmYWxzZSB9KSA/IEluZmluaXR5IDogMFxuICB9XG5cbiAgaW5pdGlhbGl6ZVRUTFRyYWNraW5nKCkge1xuICAgIHRoaXMudHRscyA9IG5ldyBaZXJvQXJyYXkodGhpcy5tYXgpXG4gICAgdGhpcy5zdGFydHMgPSBuZXcgWmVyb0FycmF5KHRoaXMubWF4KVxuXG4gICAgdGhpcy5zZXRJdGVtVFRMID0gKGluZGV4LCB0dGwsIHN0YXJ0ID0gcGVyZi5ub3coKSkgPT4ge1xuICAgICAgdGhpcy5zdGFydHNbaW5kZXhdID0gdHRsICE9PSAwID8gc3RhcnQgOiAwXG4gICAgICB0aGlzLnR0bHNbaW5kZXhdID0gdHRsXG4gICAgICBpZiAodHRsICE9PSAwICYmIHRoaXMudHRsQXV0b3B1cmdlKSB7XG4gICAgICAgIGNvbnN0IHQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBpZiAodGhpcy5pc1N0YWxlKGluZGV4KSkge1xuICAgICAgICAgICAgdGhpcy5kZWxldGUodGhpcy5rZXlMaXN0W2luZGV4XSlcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHR0bCArIDEpXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlIC0gdW5yZWYoKSBub3Qgc3VwcG9ydGVkIG9uIGFsbCBwbGF0Zm9ybXMgKi9cbiAgICAgICAgaWYgKHQudW5yZWYpIHtcbiAgICAgICAgICB0LnVucmVmKClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudXBkYXRlSXRlbUFnZSA9IGluZGV4ID0+IHtcbiAgICAgIHRoaXMuc3RhcnRzW2luZGV4XSA9IHRoaXMudHRsc1tpbmRleF0gIT09IDAgPyBwZXJmLm5vdygpIDogMFxuICAgIH1cblxuICAgIHRoaXMuc3RhdHVzVFRMID0gKHN0YXR1cywgaW5kZXgpID0+IHtcbiAgICAgIGlmIChzdGF0dXMpIHtcbiAgICAgICAgc3RhdHVzLnR0bCA9IHRoaXMudHRsc1tpbmRleF1cbiAgICAgICAgc3RhdHVzLnN0YXJ0ID0gdGhpcy5zdGFydHNbaW5kZXhdXG4gICAgICAgIHN0YXR1cy5ub3cgPSBjYWNoZWROb3cgfHwgZ2V0Tm93KClcbiAgICAgICAgc3RhdHVzLnJlbWFpbmluZ1RUTCA9IHN0YXR1cy5ub3cgKyBzdGF0dXMudHRsIC0gc3RhdHVzLnN0YXJ0XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZGVib3VuY2UgY2FsbHMgdG8gcGVyZi5ub3coKSB0byAxcyBzbyB3ZSdyZSBub3QgaGl0dGluZ1xuICAgIC8vIHRoYXQgY29zdGx5IGNhbGwgcmVwZWF0ZWRseS5cbiAgICBsZXQgY2FjaGVkTm93ID0gMFxuICAgIGNvbnN0IGdldE5vdyA9ICgpID0+IHtcbiAgICAgIGNvbnN0IG4gPSBwZXJmLm5vdygpXG4gICAgICBpZiAodGhpcy50dGxSZXNvbHV0aW9uID4gMCkge1xuICAgICAgICBjYWNoZWROb3cgPSBuXG4gICAgICAgIGNvbnN0IHQgPSBzZXRUaW1lb3V0KFxuICAgICAgICAgICgpID0+IChjYWNoZWROb3cgPSAwKSxcbiAgICAgICAgICB0aGlzLnR0bFJlc29sdXRpb25cbiAgICAgICAgKVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAtIG5vdCBhdmFpbGFibGUgb24gYWxsIHBsYXRmb3JtcyAqL1xuICAgICAgICBpZiAodC51bnJlZikge1xuICAgICAgICAgIHQudW5yZWYoKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gblxuICAgIH1cblxuICAgIHRoaXMuZ2V0UmVtYWluaW5nVFRMID0ga2V5ID0+IHtcbiAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5rZXlNYXAuZ2V0KGtleSlcbiAgICAgIGlmIChpbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiAwXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy50dGxzW2luZGV4XSA9PT0gMCB8fCB0aGlzLnN0YXJ0c1tpbmRleF0gPT09IDBcbiAgICAgICAgPyBJbmZpbml0eVxuICAgICAgICA6IHRoaXMuc3RhcnRzW2luZGV4XSArXG4gICAgICAgICAgICB0aGlzLnR0bHNbaW5kZXhdIC1cbiAgICAgICAgICAgIChjYWNoZWROb3cgfHwgZ2V0Tm93KCkpXG4gICAgfVxuXG4gICAgdGhpcy5pc1N0YWxlID0gaW5kZXggPT4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy50dGxzW2luZGV4XSAhPT0gMCAmJlxuICAgICAgICB0aGlzLnN0YXJ0c1tpbmRleF0gIT09IDAgJiZcbiAgICAgICAgKGNhY2hlZE5vdyB8fCBnZXROb3coKSkgLSB0aGlzLnN0YXJ0c1tpbmRleF0gPlxuICAgICAgICAgIHRoaXMudHRsc1tpbmRleF1cbiAgICAgIClcbiAgICB9XG4gIH1cbiAgdXBkYXRlSXRlbUFnZShfaW5kZXgpIHt9XG4gIHN0YXR1c1RUTChfc3RhdHVzLCBfaW5kZXgpIHt9XG4gIHNldEl0ZW1UVEwoX2luZGV4LCBfdHRsLCBfc3RhcnQpIHt9XG4gIGlzU3RhbGUoX2luZGV4KSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBpbml0aWFsaXplU2l6ZVRyYWNraW5nKCkge1xuICAgIHRoaXMuY2FsY3VsYXRlZFNpemUgPSAwXG4gICAgdGhpcy5zaXplcyA9IG5ldyBaZXJvQXJyYXkodGhpcy5tYXgpXG4gICAgdGhpcy5yZW1vdmVJdGVtU2l6ZSA9IGluZGV4ID0+IHtcbiAgICAgIHRoaXMuY2FsY3VsYXRlZFNpemUgLT0gdGhpcy5zaXplc1tpbmRleF1cbiAgICAgIHRoaXMuc2l6ZXNbaW5kZXhdID0gMFxuICAgIH1cbiAgICB0aGlzLnJlcXVpcmVTaXplID0gKGssIHYsIHNpemUsIHNpemVDYWxjdWxhdGlvbikgPT4ge1xuICAgICAgLy8gcHJvdmlzaW9uYWxseSBhY2NlcHQgYmFja2dyb3VuZCBmZXRjaGVzLlxuICAgICAgLy8gYWN0dWFsIHZhbHVlIHNpemUgd2lsbCBiZSBjaGVja2VkIHdoZW4gdGhleSByZXR1cm4uXG4gICAgICBpZiAodGhpcy5pc0JhY2tncm91bmRGZXRjaCh2KSkge1xuICAgICAgICByZXR1cm4gMFxuICAgICAgfVxuICAgICAgaWYgKCFpc1Bvc0ludChzaXplKSkge1xuICAgICAgICBpZiAoc2l6ZUNhbGN1bGF0aW9uKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBzaXplQ2FsY3VsYXRpb24gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NpemVDYWxjdWxhdGlvbiBtdXN0IGJlIGEgZnVuY3Rpb24nKVxuICAgICAgICAgIH1cbiAgICAgICAgICBzaXplID0gc2l6ZUNhbGN1bGF0aW9uKHYsIGspXG4gICAgICAgICAgaWYgKCFpc1Bvc0ludChzaXplKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAgICAgJ3NpemVDYWxjdWxhdGlvbiByZXR1cm4gaW52YWxpZCAoZXhwZWN0IHBvc2l0aXZlIGludGVnZXIpJ1xuICAgICAgICAgICAgKVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICAgJ2ludmFsaWQgc2l6ZSB2YWx1ZSAobXVzdCBiZSBwb3NpdGl2ZSBpbnRlZ2VyKS4gJyArXG4gICAgICAgICAgICAgICdXaGVuIG1heFNpemUgb3IgbWF4RW50cnlTaXplIGlzIHVzZWQsIHNpemVDYWxjdWxhdGlvbiBvciBzaXplICcgK1xuICAgICAgICAgICAgICAnbXVzdCBiZSBzZXQuJ1xuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHNpemVcbiAgICB9XG4gICAgdGhpcy5hZGRJdGVtU2l6ZSA9IChpbmRleCwgc2l6ZSwgc3RhdHVzKSA9PiB7XG4gICAgICB0aGlzLnNpemVzW2luZGV4XSA9IHNpemVcbiAgICAgIGlmICh0aGlzLm1heFNpemUpIHtcbiAgICAgICAgY29uc3QgbWF4U2l6ZSA9IHRoaXMubWF4U2l6ZSAtIHRoaXMuc2l6ZXNbaW5kZXhdXG4gICAgICAgIHdoaWxlICh0aGlzLmNhbGN1bGF0ZWRTaXplID4gbWF4U2l6ZSkge1xuICAgICAgICAgIHRoaXMuZXZpY3QodHJ1ZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5jYWxjdWxhdGVkU2l6ZSArPSB0aGlzLnNpemVzW2luZGV4XVxuICAgICAgaWYgKHN0YXR1cykge1xuICAgICAgICBzdGF0dXMuZW50cnlTaXplID0gc2l6ZVxuICAgICAgICBzdGF0dXMudG90YWxDYWxjdWxhdGVkU2l6ZSA9IHRoaXMuY2FsY3VsYXRlZFNpemVcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmVtb3ZlSXRlbVNpemUoX2luZGV4KSB7fVxuICBhZGRJdGVtU2l6ZShfaW5kZXgsIF9zaXplKSB7fVxuICByZXF1aXJlU2l6ZShfaywgX3YsIHNpemUsIHNpemVDYWxjdWxhdGlvbikge1xuICAgIGlmIChzaXplIHx8IHNpemVDYWxjdWxhdGlvbikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgJ2Nhbm5vdCBzZXQgc2l6ZSB3aXRob3V0IHNldHRpbmcgbWF4U2l6ZSBvciBtYXhFbnRyeVNpemUgb24gY2FjaGUnXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgKmluZGV4ZXMoeyBhbGxvd1N0YWxlID0gdGhpcy5hbGxvd1N0YWxlIH0gPSB7fSkge1xuICAgIGlmICh0aGlzLnNpemUpIHtcbiAgICAgIGZvciAobGV0IGkgPSB0aGlzLnRhaWw7IHRydWU7ICkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZEluZGV4KGkpKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWxsb3dTdGFsZSB8fCAhdGhpcy5pc1N0YWxlKGkpKSB7XG4gICAgICAgICAgeWllbGQgaVxuICAgICAgICB9XG4gICAgICAgIGlmIChpID09PSB0aGlzLmhlYWQpIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGkgPSB0aGlzLnByZXZbaV1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gICpyaW5kZXhlcyh7IGFsbG93U3RhbGUgPSB0aGlzLmFsbG93U3RhbGUgfSA9IHt9KSB7XG4gICAgaWYgKHRoaXMuc2l6ZSkge1xuICAgICAgZm9yIChsZXQgaSA9IHRoaXMuaGVhZDsgdHJ1ZTsgKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkSW5kZXgoaSkpIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGlmIChhbGxvd1N0YWxlIHx8ICF0aGlzLmlzU3RhbGUoaSkpIHtcbiAgICAgICAgICB5aWVsZCBpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPT09IHRoaXMudGFpbCkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaSA9IHRoaXMubmV4dFtpXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaXNWYWxpZEluZGV4KGluZGV4KSB7XG4gICAgcmV0dXJuIChcbiAgICAgIGluZGV4ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgIHRoaXMua2V5TWFwLmdldCh0aGlzLmtleUxpc3RbaW5kZXhdKSA9PT0gaW5kZXhcbiAgICApXG4gIH1cblxuICAqZW50cmllcygpIHtcbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5pbmRleGVzKCkpIHtcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy52YWxMaXN0W2ldICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgdGhpcy5rZXlMaXN0W2ldICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgIXRoaXMuaXNCYWNrZ3JvdW5kRmV0Y2godGhpcy52YWxMaXN0W2ldKVxuICAgICAgKSB7XG4gICAgICAgIHlpZWxkIFt0aGlzLmtleUxpc3RbaV0sIHRoaXMudmFsTGlzdFtpXV1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgKnJlbnRyaWVzKCkge1xuICAgIGZvciAoY29uc3QgaSBvZiB0aGlzLnJpbmRleGVzKCkpIHtcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy52YWxMaXN0W2ldICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgdGhpcy5rZXlMaXN0W2ldICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgIXRoaXMuaXNCYWNrZ3JvdW5kRmV0Y2godGhpcy52YWxMaXN0W2ldKVxuICAgICAgKSB7XG4gICAgICAgIHlpZWxkIFt0aGlzLmtleUxpc3RbaV0sIHRoaXMudmFsTGlzdFtpXV1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAqa2V5cygpIHtcbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5pbmRleGVzKCkpIHtcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5rZXlMaXN0W2ldICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgIXRoaXMuaXNCYWNrZ3JvdW5kRmV0Y2godGhpcy52YWxMaXN0W2ldKVxuICAgICAgKSB7XG4gICAgICAgIHlpZWxkIHRoaXMua2V5TGlzdFtpXVxuICAgICAgfVxuICAgIH1cbiAgfVxuICAqcmtleXMoKSB7XG4gICAgZm9yIChjb25zdCBpIG9mIHRoaXMucmluZGV4ZXMoKSkge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLmtleUxpc3RbaV0gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAhdGhpcy5pc0JhY2tncm91bmRGZXRjaCh0aGlzLnZhbExpc3RbaV0pXG4gICAgICApIHtcbiAgICAgICAgeWllbGQgdGhpcy5rZXlMaXN0W2ldXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgKnZhbHVlcygpIHtcbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5pbmRleGVzKCkpIHtcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy52YWxMaXN0W2ldICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgIXRoaXMuaXNCYWNrZ3JvdW5kRmV0Y2godGhpcy52YWxMaXN0W2ldKVxuICAgICAgKSB7XG4gICAgICAgIHlpZWxkIHRoaXMudmFsTGlzdFtpXVxuICAgICAgfVxuICAgIH1cbiAgfVxuICAqcnZhbHVlcygpIHtcbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5yaW5kZXhlcygpKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMudmFsTGlzdFtpXSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICF0aGlzLmlzQmFja2dyb3VuZEZldGNoKHRoaXMudmFsTGlzdFtpXSlcbiAgICAgICkge1xuICAgICAgICB5aWVsZCB0aGlzLnZhbExpc3RbaV1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gdGhpcy5lbnRyaWVzKClcbiAgfVxuXG4gIGZpbmQoZm4sIGdldE9wdGlvbnMpIHtcbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5pbmRleGVzKCkpIHtcbiAgICAgIGNvbnN0IHYgPSB0aGlzLnZhbExpc3RbaV1cbiAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5pc0JhY2tncm91bmRGZXRjaCh2KVxuICAgICAgICA/IHYuX19zdGFsZVdoaWxlRmV0Y2hpbmdcbiAgICAgICAgOiB2XG4gICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgY29udGludWVcbiAgICAgIGlmIChmbih2YWx1ZSwgdGhpcy5rZXlMaXN0W2ldLCB0aGlzKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQodGhpcy5rZXlMaXN0W2ldLCBnZXRPcHRpb25zKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvckVhY2goZm4sIHRoaXNwID0gdGhpcykge1xuICAgIGZvciAoY29uc3QgaSBvZiB0aGlzLmluZGV4ZXMoKSkge1xuICAgICAgY29uc3QgdiA9IHRoaXMudmFsTGlzdFtpXVxuICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmlzQmFja2dyb3VuZEZldGNoKHYpXG4gICAgICAgID8gdi5fX3N0YWxlV2hpbGVGZXRjaGluZ1xuICAgICAgICA6IHZcbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSBjb250aW51ZVxuICAgICAgZm4uY2FsbCh0aGlzcCwgdmFsdWUsIHRoaXMua2V5TGlzdFtpXSwgdGhpcylcbiAgICB9XG4gIH1cblxuICByZm9yRWFjaChmbiwgdGhpc3AgPSB0aGlzKSB7XG4gICAgZm9yIChjb25zdCBpIG9mIHRoaXMucmluZGV4ZXMoKSkge1xuICAgICAgY29uc3QgdiA9IHRoaXMudmFsTGlzdFtpXVxuICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmlzQmFja2dyb3VuZEZldGNoKHYpXG4gICAgICAgID8gdi5fX3N0YWxlV2hpbGVGZXRjaGluZ1xuICAgICAgICA6IHZcbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSBjb250aW51ZVxuICAgICAgZm4uY2FsbCh0aGlzcCwgdmFsdWUsIHRoaXMua2V5TGlzdFtpXSwgdGhpcylcbiAgICB9XG4gIH1cblxuICBnZXQgcHJ1bmUoKSB7XG4gICAgZGVwcmVjYXRlZE1ldGhvZCgncHJ1bmUnLCAncHVyZ2VTdGFsZScpXG4gICAgcmV0dXJuIHRoaXMucHVyZ2VTdGFsZVxuICB9XG5cbiAgcHVyZ2VTdGFsZSgpIHtcbiAgICBsZXQgZGVsZXRlZCA9IGZhbHNlXG4gICAgZm9yIChjb25zdCBpIG9mIHRoaXMucmluZGV4ZXMoeyBhbGxvd1N0YWxlOiB0cnVlIH0pKSB7XG4gICAgICBpZiAodGhpcy5pc1N0YWxlKGkpKSB7XG4gICAgICAgIHRoaXMuZGVsZXRlKHRoaXMua2V5TGlzdFtpXSlcbiAgICAgICAgZGVsZXRlZCA9IHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRlbGV0ZWRcbiAgfVxuXG4gIGR1bXAoKSB7XG4gICAgY29uc3QgYXJyID0gW11cbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5pbmRleGVzKHsgYWxsb3dTdGFsZTogdHJ1ZSB9KSkge1xuICAgICAgY29uc3Qga2V5ID0gdGhpcy5rZXlMaXN0W2ldXG4gICAgICBjb25zdCB2ID0gdGhpcy52YWxMaXN0W2ldXG4gICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuaXNCYWNrZ3JvdW5kRmV0Y2godilcbiAgICAgICAgPyB2Ll9fc3RhbGVXaGlsZUZldGNoaW5nXG4gICAgICAgIDogdlxuICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIGNvbnRpbnVlXG4gICAgICBjb25zdCBlbnRyeSA9IHsgdmFsdWUgfVxuICAgICAgaWYgKHRoaXMudHRscykge1xuICAgICAgICBlbnRyeS50dGwgPSB0aGlzLnR0bHNbaV1cbiAgICAgICAgLy8gYWx3YXlzIGR1bXAgdGhlIHN0YXJ0IHJlbGF0aXZlIHRvIGEgcG9ydGFibGUgdGltZXN0YW1wXG4gICAgICAgIC8vIGl0J3Mgb2sgZm9yIHRoaXMgdG8gYmUgYSBiaXQgc2xvdywgaXQncyBhIHJhcmUgb3BlcmF0aW9uLlxuICAgICAgICBjb25zdCBhZ2UgPSBwZXJmLm5vdygpIC0gdGhpcy5zdGFydHNbaV1cbiAgICAgICAgZW50cnkuc3RhcnQgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLSBhZ2UpXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zaXplcykge1xuICAgICAgICBlbnRyeS5zaXplID0gdGhpcy5zaXplc1tpXVxuICAgICAgfVxuICAgICAgYXJyLnVuc2hpZnQoW2tleSwgZW50cnldKVxuICAgIH1cbiAgICByZXR1cm4gYXJyXG4gIH1cblxuICBsb2FkKGFycikge1xuICAgIHRoaXMuY2xlYXIoKVxuICAgIGZvciAoY29uc3QgW2tleSwgZW50cnldIG9mIGFycikge1xuICAgICAgaWYgKGVudHJ5LnN0YXJ0KSB7XG4gICAgICAgIC8vIGVudHJ5LnN0YXJ0IGlzIGEgcG9ydGFibGUgdGltZXN0YW1wLCBidXQgd2UgbWF5IGJlIHVzaW5nXG4gICAgICAgIC8vIG5vZGUncyBwZXJmb3JtYW5jZS5ub3coKSwgc28gY2FsY3VsYXRlIHRoZSBvZmZzZXQuXG4gICAgICAgIC8vIGl0J3Mgb2sgZm9yIHRoaXMgdG8gYmUgYSBiaXQgc2xvdywgaXQncyBhIHJhcmUgb3BlcmF0aW9uLlxuICAgICAgICBjb25zdCBhZ2UgPSBEYXRlLm5vdygpIC0gZW50cnkuc3RhcnRcbiAgICAgICAgZW50cnkuc3RhcnQgPSBwZXJmLm5vdygpIC0gYWdlXG4gICAgICB9XG4gICAgICB0aGlzLnNldChrZXksIGVudHJ5LnZhbHVlLCBlbnRyeSlcbiAgICB9XG4gIH1cblxuICBkaXNwb3NlKF92LCBfaywgX3JlYXNvbikge31cblxuICBzZXQoXG4gICAgayxcbiAgICB2LFxuICAgIHtcbiAgICAgIHR0bCA9IHRoaXMudHRsLFxuICAgICAgc3RhcnQsXG4gICAgICBub0Rpc3Bvc2VPblNldCA9IHRoaXMubm9EaXNwb3NlT25TZXQsXG4gICAgICBzaXplID0gMCxcbiAgICAgIHNpemVDYWxjdWxhdGlvbiA9IHRoaXMuc2l6ZUNhbGN1bGF0aW9uLFxuICAgICAgbm9VcGRhdGVUVEwgPSB0aGlzLm5vVXBkYXRlVFRMLFxuICAgICAgc3RhdHVzLFxuICAgIH0gPSB7fVxuICApIHtcbiAgICBzaXplID0gdGhpcy5yZXF1aXJlU2l6ZShrLCB2LCBzaXplLCBzaXplQ2FsY3VsYXRpb24pXG4gICAgLy8gaWYgdGhlIGl0ZW0gZG9lc24ndCBmaXQsIGRvbid0IGRvIGFueXRoaW5nXG4gICAgLy8gTkI6IG1heEVudHJ5U2l6ZSBzZXQgdG8gbWF4U2l6ZSBieSBkZWZhdWx0XG4gICAgaWYgKHRoaXMubWF4RW50cnlTaXplICYmIHNpemUgPiB0aGlzLm1heEVudHJ5U2l6ZSkge1xuICAgICAgaWYgKHN0YXR1cykge1xuICAgICAgICBzdGF0dXMuc2V0ID0gJ21pc3MnXG4gICAgICAgIHN0YXR1cy5tYXhFbnRyeVNpemVFeGNlZWRlZCA9IHRydWVcbiAgICAgIH1cbiAgICAgIC8vIGhhdmUgdG8gZGVsZXRlLCBpbiBjYXNlIGEgYmFja2dyb3VuZCBmZXRjaCBpcyB0aGVyZSBhbHJlYWR5LlxuICAgICAgLy8gaW4gbm9uLWFzeW5jIGNhc2VzLCB0aGlzIGlzIGEgbm8tb3BcbiAgICAgIHRoaXMuZGVsZXRlKGspXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgICBsZXQgaW5kZXggPSB0aGlzLnNpemUgPT09IDAgPyB1bmRlZmluZWQgOiB0aGlzLmtleU1hcC5nZXQoaylcbiAgICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gYWRkaXRpb25cbiAgICAgIGluZGV4ID0gdGhpcy5uZXdJbmRleCgpXG4gICAgICB0aGlzLmtleUxpc3RbaW5kZXhdID0ga1xuICAgICAgdGhpcy52YWxMaXN0W2luZGV4XSA9IHZcbiAgICAgIHRoaXMua2V5TWFwLnNldChrLCBpbmRleClcbiAgICAgIHRoaXMubmV4dFt0aGlzLnRhaWxdID0gaW5kZXhcbiAgICAgIHRoaXMucHJldltpbmRleF0gPSB0aGlzLnRhaWxcbiAgICAgIHRoaXMudGFpbCA9IGluZGV4XG4gICAgICB0aGlzLnNpemUrK1xuICAgICAgdGhpcy5hZGRJdGVtU2l6ZShpbmRleCwgc2l6ZSwgc3RhdHVzKVxuICAgICAgaWYgKHN0YXR1cykge1xuICAgICAgICBzdGF0dXMuc2V0ID0gJ2FkZCdcbiAgICAgIH1cbiAgICAgIG5vVXBkYXRlVFRMID0gZmFsc2VcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXBkYXRlXG4gICAgICB0aGlzLm1vdmVUb1RhaWwoaW5kZXgpXG4gICAgICBjb25zdCBvbGRWYWwgPSB0aGlzLnZhbExpc3RbaW5kZXhdXG4gICAgICBpZiAodiAhPT0gb2xkVmFsKSB7XG4gICAgICAgIGlmICh0aGlzLmlzQmFja2dyb3VuZEZldGNoKG9sZFZhbCkpIHtcbiAgICAgICAgICBvbGRWYWwuX19hYm9ydENvbnRyb2xsZXIuYWJvcnQobmV3IEVycm9yKCdyZXBsYWNlZCcpKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghbm9EaXNwb3NlT25TZXQpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZShvbGRWYWwsIGssICdzZXQnKVxuICAgICAgICAgICAgaWYgKHRoaXMuZGlzcG9zZUFmdGVyKSB7XG4gICAgICAgICAgICAgIHRoaXMuZGlzcG9zZWQucHVzaChbb2xkVmFsLCBrLCAnc2V0J10pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVtb3ZlSXRlbVNpemUoaW5kZXgpXG4gICAgICAgIHRoaXMudmFsTGlzdFtpbmRleF0gPSB2XG4gICAgICAgIHRoaXMuYWRkSXRlbVNpemUoaW5kZXgsIHNpemUsIHN0YXR1cylcbiAgICAgICAgaWYgKHN0YXR1cykge1xuICAgICAgICAgIHN0YXR1cy5zZXQgPSAncmVwbGFjZSdcbiAgICAgICAgICBjb25zdCBvbGRWYWx1ZSA9XG4gICAgICAgICAgICBvbGRWYWwgJiYgdGhpcy5pc0JhY2tncm91bmRGZXRjaChvbGRWYWwpXG4gICAgICAgICAgICAgID8gb2xkVmFsLl9fc3RhbGVXaGlsZUZldGNoaW5nXG4gICAgICAgICAgICAgIDogb2xkVmFsXG4gICAgICAgICAgaWYgKG9sZFZhbHVlICE9PSB1bmRlZmluZWQpIHN0YXR1cy5vbGRWYWx1ZSA9IG9sZFZhbHVlXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3RhdHVzKSB7XG4gICAgICAgIHN0YXR1cy5zZXQgPSAndXBkYXRlJ1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodHRsICE9PSAwICYmIHRoaXMudHRsID09PSAwICYmICF0aGlzLnR0bHMpIHtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZVRUTFRyYWNraW5nKClcbiAgICB9XG4gICAgaWYgKCFub1VwZGF0ZVRUTCkge1xuICAgICAgdGhpcy5zZXRJdGVtVFRMKGluZGV4LCB0dGwsIHN0YXJ0KVxuICAgIH1cbiAgICB0aGlzLnN0YXR1c1RUTChzdGF0dXMsIGluZGV4KVxuICAgIGlmICh0aGlzLmRpc3Bvc2VBZnRlcikge1xuICAgICAgd2hpbGUgKHRoaXMuZGlzcG9zZWQubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuZGlzcG9zZUFmdGVyKC4uLnRoaXMuZGlzcG9zZWQuc2hpZnQoKSlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIG5ld0luZGV4KCkge1xuICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLnRhaWxcbiAgICB9XG4gICAgaWYgKHRoaXMuc2l6ZSA9PT0gdGhpcy5tYXggJiYgdGhpcy5tYXggIT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmV2aWN0KGZhbHNlKVxuICAgIH1cbiAgICBpZiAodGhpcy5mcmVlLmxlbmd0aCAhPT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuZnJlZS5wb3AoKVxuICAgIH1cbiAgICAvLyBpbml0aWFsIGZpbGwsIGp1c3Qga2VlcCB3cml0aW5nIGRvd24gdGhlIGxpc3RcbiAgICByZXR1cm4gdGhpcy5pbml0aWFsRmlsbCsrXG4gIH1cblxuICBwb3AoKSB7XG4gICAgaWYgKHRoaXMuc2l6ZSkge1xuICAgICAgY29uc3QgdmFsID0gdGhpcy52YWxMaXN0W3RoaXMuaGVhZF1cbiAgICAgIHRoaXMuZXZpY3QodHJ1ZSlcbiAgICAgIHJldHVybiB2YWxcbiAgICB9XG4gIH1cblxuICBldmljdChmcmVlKSB7XG4gICAgY29uc3QgaGVhZCA9IHRoaXMuaGVhZFxuICAgIGNvbnN0IGsgPSB0aGlzLmtleUxpc3RbaGVhZF1cbiAgICBjb25zdCB2ID0gdGhpcy52YWxMaXN0W2hlYWRdXG4gICAgaWYgKHRoaXMuaXNCYWNrZ3JvdW5kRmV0Y2godikpIHtcbiAgICAgIHYuX19hYm9ydENvbnRyb2xsZXIuYWJvcnQobmV3IEVycm9yKCdldmljdGVkJykpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGlzcG9zZSh2LCBrLCAnZXZpY3QnKVxuICAgICAgaWYgKHRoaXMuZGlzcG9zZUFmdGVyKSB7XG4gICAgICAgIHRoaXMuZGlzcG9zZWQucHVzaChbdiwgaywgJ2V2aWN0J10pXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMucmVtb3ZlSXRlbVNpemUoaGVhZClcbiAgICAvLyBpZiB3ZSBhcmVuJ3QgYWJvdXQgdG8gdXNlIHRoZSBpbmRleCwgdGhlbiBudWxsIHRoZXNlIG91dFxuICAgIGlmIChmcmVlKSB7XG4gICAgICB0aGlzLmtleUxpc3RbaGVhZF0gPSBudWxsXG4gICAgICB0aGlzLnZhbExpc3RbaGVhZF0gPSBudWxsXG4gICAgICB0aGlzLmZyZWUucHVzaChoZWFkKVxuICAgIH1cbiAgICB0aGlzLmhlYWQgPSB0aGlzLm5leHRbaGVhZF1cbiAgICB0aGlzLmtleU1hcC5kZWxldGUoaylcbiAgICB0aGlzLnNpemUtLVxuICAgIHJldHVybiBoZWFkXG4gIH1cblxuICBoYXMoaywgeyB1cGRhdGVBZ2VPbkhhcyA9IHRoaXMudXBkYXRlQWdlT25IYXMsIHN0YXR1cyB9ID0ge30pIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMua2V5TWFwLmdldChrKVxuICAgIGlmIChpbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoIXRoaXMuaXNTdGFsZShpbmRleCkpIHtcbiAgICAgICAgaWYgKHVwZGF0ZUFnZU9uSGFzKSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVJdGVtQWdlKGluZGV4KVxuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0dXMpIHN0YXR1cy5oYXMgPSAnaGl0J1xuICAgICAgICB0aGlzLnN0YXR1c1RUTChzdGF0dXMsIGluZGV4KVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfSBlbHNlIGlmIChzdGF0dXMpIHtcbiAgICAgICAgc3RhdHVzLmhhcyA9ICdzdGFsZSdcbiAgICAgICAgdGhpcy5zdGF0dXNUVEwoc3RhdHVzLCBpbmRleClcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHN0YXR1cykge1xuICAgICAgc3RhdHVzLmhhcyA9ICdtaXNzJ1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIGxpa2UgZ2V0KCksIGJ1dCB3aXRob3V0IGFueSBMUlUgdXBkYXRpbmcgb3IgVFRMIGV4cGlyYXRpb25cbiAgcGVlayhrLCB7IGFsbG93U3RhbGUgPSB0aGlzLmFsbG93U3RhbGUgfSA9IHt9KSB7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmtleU1hcC5nZXQoaylcbiAgICBpZiAoaW5kZXggIT09IHVuZGVmaW5lZCAmJiAoYWxsb3dTdGFsZSB8fCAhdGhpcy5pc1N0YWxlKGluZGV4KSkpIHtcbiAgICAgIGNvbnN0IHYgPSB0aGlzLnZhbExpc3RbaW5kZXhdXG4gICAgICAvLyBlaXRoZXIgc3RhbGUgYW5kIGFsbG93ZWQsIG9yIGZvcmNpbmcgYSByZWZyZXNoIG9mIG5vbi1zdGFsZSB2YWx1ZVxuICAgICAgcmV0dXJuIHRoaXMuaXNCYWNrZ3JvdW5kRmV0Y2godikgPyB2Ll9fc3RhbGVXaGlsZUZldGNoaW5nIDogdlxuICAgIH1cbiAgfVxuXG4gIGJhY2tncm91bmRGZXRjaChrLCBpbmRleCwgb3B0aW9ucywgY29udGV4dCkge1xuICAgIGNvbnN0IHYgPSBpbmRleCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogdGhpcy52YWxMaXN0W2luZGV4XVxuICAgIGlmICh0aGlzLmlzQmFja2dyb3VuZEZldGNoKHYpKSB7XG4gICAgICByZXR1cm4gdlxuICAgIH1cbiAgICBjb25zdCBhYyA9IG5ldyBBQygpXG4gICAgaWYgKG9wdGlvbnMuc2lnbmFsKSB7XG4gICAgICBvcHRpb25zLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsICgpID0+XG4gICAgICAgIGFjLmFib3J0KG9wdGlvbnMuc2lnbmFsLnJlYXNvbilcbiAgICAgIClcbiAgICB9XG4gICAgY29uc3QgZmV0Y2hPcHRzID0ge1xuICAgICAgc2lnbmFsOiBhYy5zaWduYWwsXG4gICAgICBvcHRpb25zLFxuICAgICAgY29udGV4dCxcbiAgICB9XG4gICAgY29uc3QgY2IgPSAodiwgdXBkYXRlQ2FjaGUgPSBmYWxzZSkgPT4ge1xuICAgICAgY29uc3QgeyBhYm9ydGVkIH0gPSBhYy5zaWduYWxcbiAgICAgIGNvbnN0IGlnbm9yZUFib3J0ID0gb3B0aW9ucy5pZ25vcmVGZXRjaEFib3J0ICYmIHYgIT09IHVuZGVmaW5lZFxuICAgICAgaWYgKG9wdGlvbnMuc3RhdHVzKSB7XG4gICAgICAgIGlmIChhYm9ydGVkICYmICF1cGRhdGVDYWNoZSkge1xuICAgICAgICAgIG9wdGlvbnMuc3RhdHVzLmZldGNoQWJvcnRlZCA9IHRydWVcbiAgICAgICAgICBvcHRpb25zLnN0YXR1cy5mZXRjaEVycm9yID0gYWMuc2lnbmFsLnJlYXNvblxuICAgICAgICAgIGlmIChpZ25vcmVBYm9ydCkgb3B0aW9ucy5zdGF0dXMuZmV0Y2hBYm9ydElnbm9yZWQgPSB0cnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3B0aW9ucy5zdGF0dXMuZmV0Y2hSZXNvbHZlZCA9IHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGFib3J0ZWQgJiYgIWlnbm9yZUFib3J0ICYmICF1cGRhdGVDYWNoZSkge1xuICAgICAgICByZXR1cm4gZmV0Y2hGYWlsKGFjLnNpZ25hbC5yZWFzb24pXG4gICAgICB9XG4gICAgICAvLyBlaXRoZXIgd2UgZGlkbid0IGFib3J0LCBhbmQgYXJlIHN0aWxsIGhlcmUsIG9yIHdlIGRpZCwgYW5kIGlnbm9yZWRcbiAgICAgIGlmICh0aGlzLnZhbExpc3RbaW5kZXhdID09PSBwKSB7XG4gICAgICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAocC5fX3N0YWxlV2hpbGVGZXRjaGluZykge1xuICAgICAgICAgICAgdGhpcy52YWxMaXN0W2luZGV4XSA9IHAuX19zdGFsZVdoaWxlRmV0Y2hpbmdcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kZWxldGUoaylcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKG9wdGlvbnMuc3RhdHVzKSBvcHRpb25zLnN0YXR1cy5mZXRjaFVwZGF0ZWQgPSB0cnVlXG4gICAgICAgICAgdGhpcy5zZXQoaywgdiwgZmV0Y2hPcHRzLm9wdGlvbnMpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2XG4gICAgfVxuICAgIGNvbnN0IGViID0gZXIgPT4ge1xuICAgICAgaWYgKG9wdGlvbnMuc3RhdHVzKSB7XG4gICAgICAgIG9wdGlvbnMuc3RhdHVzLmZldGNoUmVqZWN0ZWQgPSB0cnVlXG4gICAgICAgIG9wdGlvbnMuc3RhdHVzLmZldGNoRXJyb3IgPSBlclxuICAgICAgfVxuICAgICAgcmV0dXJuIGZldGNoRmFpbChlcilcbiAgICB9XG4gICAgY29uc3QgZmV0Y2hGYWlsID0gZXIgPT4ge1xuICAgICAgY29uc3QgeyBhYm9ydGVkIH0gPSBhYy5zaWduYWxcbiAgICAgIGNvbnN0IGFsbG93U3RhbGVBYm9ydGVkID1cbiAgICAgICAgYWJvcnRlZCAmJiBvcHRpb25zLmFsbG93U3RhbGVPbkZldGNoQWJvcnRcbiAgICAgIGNvbnN0IGFsbG93U3RhbGUgPVxuICAgICAgICBhbGxvd1N0YWxlQWJvcnRlZCB8fCBvcHRpb25zLmFsbG93U3RhbGVPbkZldGNoUmVqZWN0aW9uXG4gICAgICBjb25zdCBub0RlbGV0ZSA9IGFsbG93U3RhbGUgfHwgb3B0aW9ucy5ub0RlbGV0ZU9uRmV0Y2hSZWplY3Rpb25cbiAgICAgIGlmICh0aGlzLnZhbExpc3RbaW5kZXhdID09PSBwKSB7XG4gICAgICAgIC8vIGlmIHdlIGFsbG93IHN0YWxlIG9uIGZldGNoIHJlamVjdGlvbnMsIHRoZW4gd2UgbmVlZCB0byBlbnN1cmUgdGhhdFxuICAgICAgICAvLyB0aGUgc3RhbGUgdmFsdWUgaXMgbm90IHJlbW92ZWQgZnJvbSB0aGUgY2FjaGUgd2hlbiB0aGUgZmV0Y2ggZmFpbHMuXG4gICAgICAgIGNvbnN0IGRlbCA9ICFub0RlbGV0ZSB8fCBwLl9fc3RhbGVXaGlsZUZldGNoaW5nID09PSB1bmRlZmluZWRcbiAgICAgICAgaWYgKGRlbCkge1xuICAgICAgICAgIHRoaXMuZGVsZXRlKGspXG4gICAgICAgIH0gZWxzZSBpZiAoIWFsbG93U3RhbGVBYm9ydGVkKSB7XG4gICAgICAgICAgLy8gc3RpbGwgcmVwbGFjZSB0aGUgKnByb21pc2UqIHdpdGggdGhlIHN0YWxlIHZhbHVlLFxuICAgICAgICAgIC8vIHNpbmNlIHdlIGFyZSBkb25lIHdpdGggdGhlIHByb21pc2UgYXQgdGhpcyBwb2ludC5cbiAgICAgICAgICAvLyBsZWF2ZSBpdCB1bnRvdWNoZWQgaWYgd2UncmUgc3RpbGwgd2FpdGluZyBmb3IgYW5cbiAgICAgICAgICAvLyBhYm9ydGVkIGJhY2tncm91bmQgZmV0Y2ggdGhhdCBoYXNuJ3QgeWV0IHJldHVybmVkLlxuICAgICAgICAgIHRoaXMudmFsTGlzdFtpbmRleF0gPSBwLl9fc3RhbGVXaGlsZUZldGNoaW5nXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChhbGxvd1N0YWxlKSB7XG4gICAgICAgIGlmIChvcHRpb25zLnN0YXR1cyAmJiBwLl9fc3RhbGVXaGlsZUZldGNoaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBvcHRpb25zLnN0YXR1cy5yZXR1cm5lZFN0YWxlID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwLl9fc3RhbGVXaGlsZUZldGNoaW5nXG4gICAgICB9IGVsc2UgaWYgKHAuX19yZXR1cm5lZCA9PT0gcCkge1xuICAgICAgICB0aHJvdyBlclxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBwY2FsbCA9IChyZXMsIHJlaikgPT4ge1xuICAgICAgdGhpcy5mZXRjaE1ldGhvZChrLCB2LCBmZXRjaE9wdHMpLnRoZW4odiA9PiByZXModiksIHJlailcbiAgICAgIC8vIGlnbm9yZWQsIHdlIGdvIHVudGlsIHdlIGZpbmlzaCwgcmVnYXJkbGVzcy5cbiAgICAgIC8vIGRlZmVyIGNoZWNrIHVudGlsIHdlIGFyZSBhY3R1YWxseSBhYm9ydGluZyxcbiAgICAgIC8vIHNvIGZldGNoTWV0aG9kIGNhbiBvdmVycmlkZS5cbiAgICAgIGFjLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsICgpID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICFvcHRpb25zLmlnbm9yZUZldGNoQWJvcnQgfHxcbiAgICAgICAgICBvcHRpb25zLmFsbG93U3RhbGVPbkZldGNoQWJvcnRcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmVzKClcbiAgICAgICAgICAvLyB3aGVuIGl0IGV2ZW50dWFsbHkgcmVzb2x2ZXMsIHVwZGF0ZSB0aGUgY2FjaGUuXG4gICAgICAgICAgaWYgKG9wdGlvbnMuYWxsb3dTdGFsZU9uRmV0Y2hBYm9ydCkge1xuICAgICAgICAgICAgcmVzID0gdiA9PiBjYih2LCB0cnVlKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuc3RhdHVzKSBvcHRpb25zLnN0YXR1cy5mZXRjaERpc3BhdGNoZWQgPSB0cnVlXG4gICAgY29uc3QgcCA9IG5ldyBQcm9taXNlKHBjYWxsKS50aGVuKGNiLCBlYilcbiAgICBwLl9fYWJvcnRDb250cm9sbGVyID0gYWNcbiAgICBwLl9fc3RhbGVXaGlsZUZldGNoaW5nID0gdlxuICAgIHAuX19yZXR1cm5lZCA9IG51bGxcbiAgICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gaW50ZXJuYWwsIGRvbid0IGV4cG9zZSBzdGF0dXMuXG4gICAgICB0aGlzLnNldChrLCBwLCB7IC4uLmZldGNoT3B0cy5vcHRpb25zLCBzdGF0dXM6IHVuZGVmaW5lZCB9KVxuICAgICAgaW5kZXggPSB0aGlzLmtleU1hcC5nZXQoaylcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy52YWxMaXN0W2luZGV4XSA9IHBcbiAgICB9XG4gICAgcmV0dXJuIHBcbiAgfVxuXG4gIGlzQmFja2dyb3VuZEZldGNoKHApIHtcbiAgICByZXR1cm4gKFxuICAgICAgcCAmJlxuICAgICAgdHlwZW9mIHAgPT09ICdvYmplY3QnICYmXG4gICAgICB0eXBlb2YgcC50aGVuID09PSAnZnVuY3Rpb24nICYmXG4gICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoXG4gICAgICAgIHAsXG4gICAgICAgICdfX3N0YWxlV2hpbGVGZXRjaGluZydcbiAgICAgICkgJiZcbiAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwLCAnX19yZXR1cm5lZCcpICYmXG4gICAgICAocC5fX3JldHVybmVkID09PSBwIHx8IHAuX19yZXR1cm5lZCA9PT0gbnVsbClcbiAgICApXG4gIH1cblxuICAvLyB0aGlzIHRha2VzIHRoZSB1bmlvbiBvZiBnZXQoKSBhbmQgc2V0KCkgb3B0cywgYmVjYXVzZSBpdCBkb2VzIGJvdGhcbiAgYXN5bmMgZmV0Y2goXG4gICAgayxcbiAgICB7XG4gICAgICAvLyBnZXQgb3B0aW9uc1xuICAgICAgYWxsb3dTdGFsZSA9IHRoaXMuYWxsb3dTdGFsZSxcbiAgICAgIHVwZGF0ZUFnZU9uR2V0ID0gdGhpcy51cGRhdGVBZ2VPbkdldCxcbiAgICAgIG5vRGVsZXRlT25TdGFsZUdldCA9IHRoaXMubm9EZWxldGVPblN0YWxlR2V0LFxuICAgICAgLy8gc2V0IG9wdGlvbnNcbiAgICAgIHR0bCA9IHRoaXMudHRsLFxuICAgICAgbm9EaXNwb3NlT25TZXQgPSB0aGlzLm5vRGlzcG9zZU9uU2V0LFxuICAgICAgc2l6ZSA9IDAsXG4gICAgICBzaXplQ2FsY3VsYXRpb24gPSB0aGlzLnNpemVDYWxjdWxhdGlvbixcbiAgICAgIG5vVXBkYXRlVFRMID0gdGhpcy5ub1VwZGF0ZVRUTCxcbiAgICAgIC8vIGZldGNoIGV4Y2x1c2l2ZSBvcHRpb25zXG4gICAgICBub0RlbGV0ZU9uRmV0Y2hSZWplY3Rpb24gPSB0aGlzLm5vRGVsZXRlT25GZXRjaFJlamVjdGlvbixcbiAgICAgIGFsbG93U3RhbGVPbkZldGNoUmVqZWN0aW9uID0gdGhpcy5hbGxvd1N0YWxlT25GZXRjaFJlamVjdGlvbixcbiAgICAgIGlnbm9yZUZldGNoQWJvcnQgPSB0aGlzLmlnbm9yZUZldGNoQWJvcnQsXG4gICAgICBhbGxvd1N0YWxlT25GZXRjaEFib3J0ID0gdGhpcy5hbGxvd1N0YWxlT25GZXRjaEFib3J0LFxuICAgICAgZmV0Y2hDb250ZXh0ID0gdGhpcy5mZXRjaENvbnRleHQsXG4gICAgICBmb3JjZVJlZnJlc2ggPSBmYWxzZSxcbiAgICAgIHN0YXR1cyxcbiAgICAgIHNpZ25hbCxcbiAgICB9ID0ge31cbiAgKSB7XG4gICAgaWYgKCF0aGlzLmZldGNoTWV0aG9kKSB7XG4gICAgICBpZiAoc3RhdHVzKSBzdGF0dXMuZmV0Y2ggPSAnZ2V0J1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KGssIHtcbiAgICAgICAgYWxsb3dTdGFsZSxcbiAgICAgICAgdXBkYXRlQWdlT25HZXQsXG4gICAgICAgIG5vRGVsZXRlT25TdGFsZUdldCxcbiAgICAgICAgc3RhdHVzLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgYWxsb3dTdGFsZSxcbiAgICAgIHVwZGF0ZUFnZU9uR2V0LFxuICAgICAgbm9EZWxldGVPblN0YWxlR2V0LFxuICAgICAgdHRsLFxuICAgICAgbm9EaXNwb3NlT25TZXQsXG4gICAgICBzaXplLFxuICAgICAgc2l6ZUNhbGN1bGF0aW9uLFxuICAgICAgbm9VcGRhdGVUVEwsXG4gICAgICBub0RlbGV0ZU9uRmV0Y2hSZWplY3Rpb24sXG4gICAgICBhbGxvd1N0YWxlT25GZXRjaFJlamVjdGlvbixcbiAgICAgIGFsbG93U3RhbGVPbkZldGNoQWJvcnQsXG4gICAgICBpZ25vcmVGZXRjaEFib3J0LFxuICAgICAgc3RhdHVzLFxuICAgICAgc2lnbmFsLFxuICAgIH1cblxuICAgIGxldCBpbmRleCA9IHRoaXMua2V5TWFwLmdldChrKVxuICAgIGlmIChpbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoc3RhdHVzKSBzdGF0dXMuZmV0Y2ggPSAnbWlzcydcbiAgICAgIGNvbnN0IHAgPSB0aGlzLmJhY2tncm91bmRGZXRjaChrLCBpbmRleCwgb3B0aW9ucywgZmV0Y2hDb250ZXh0KVxuICAgICAgcmV0dXJuIChwLl9fcmV0dXJuZWQgPSBwKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbiBjYWNoZSwgbWF5YmUgYWxyZWFkeSBmZXRjaGluZ1xuICAgICAgY29uc3QgdiA9IHRoaXMudmFsTGlzdFtpbmRleF1cbiAgICAgIGlmICh0aGlzLmlzQmFja2dyb3VuZEZldGNoKHYpKSB7XG4gICAgICAgIGNvbnN0IHN0YWxlID1cbiAgICAgICAgICBhbGxvd1N0YWxlICYmIHYuX19zdGFsZVdoaWxlRmV0Y2hpbmcgIT09IHVuZGVmaW5lZFxuICAgICAgICBpZiAoc3RhdHVzKSB7XG4gICAgICAgICAgc3RhdHVzLmZldGNoID0gJ2luZmxpZ2h0J1xuICAgICAgICAgIGlmIChzdGFsZSkgc3RhdHVzLnJldHVybmVkU3RhbGUgPSB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YWxlID8gdi5fX3N0YWxlV2hpbGVGZXRjaGluZyA6ICh2Ll9fcmV0dXJuZWQgPSB2KVxuICAgICAgfVxuXG4gICAgICAvLyBpZiB3ZSBmb3JjZSBhIHJlZnJlc2gsIHRoYXQgbWVhbnMgZG8gTk9UIHNlcnZlIHRoZSBjYWNoZWQgdmFsdWUsXG4gICAgICAvLyB1bmxlc3Mgd2UgYXJlIGFscmVhZHkgaW4gdGhlIHByb2Nlc3Mgb2YgcmVmcmVzaGluZyB0aGUgY2FjaGUuXG4gICAgICBjb25zdCBpc1N0YWxlID0gdGhpcy5pc1N0YWxlKGluZGV4KVxuICAgICAgaWYgKCFmb3JjZVJlZnJlc2ggJiYgIWlzU3RhbGUpIHtcbiAgICAgICAgaWYgKHN0YXR1cykgc3RhdHVzLmZldGNoID0gJ2hpdCdcbiAgICAgICAgdGhpcy5tb3ZlVG9UYWlsKGluZGV4KVxuICAgICAgICBpZiAodXBkYXRlQWdlT25HZXQpIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZUl0ZW1BZ2UoaW5kZXgpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0dXNUVEwoc3RhdHVzLCBpbmRleClcbiAgICAgICAgcmV0dXJuIHZcbiAgICAgIH1cblxuICAgICAgLy8gb2ssIGl0IGlzIHN0YWxlIG9yIGEgZm9yY2VkIHJlZnJlc2gsIGFuZCBub3QgYWxyZWFkeSBmZXRjaGluZy5cbiAgICAgIC8vIHJlZnJlc2ggdGhlIGNhY2hlLlxuICAgICAgY29uc3QgcCA9IHRoaXMuYmFja2dyb3VuZEZldGNoKGssIGluZGV4LCBvcHRpb25zLCBmZXRjaENvbnRleHQpXG4gICAgICBjb25zdCBoYXNTdGFsZSA9IHAuX19zdGFsZVdoaWxlRmV0Y2hpbmcgIT09IHVuZGVmaW5lZFxuICAgICAgY29uc3Qgc3RhbGVWYWwgPSBoYXNTdGFsZSAmJiBhbGxvd1N0YWxlXG4gICAgICBpZiAoc3RhdHVzKSB7XG4gICAgICAgIHN0YXR1cy5mZXRjaCA9IGhhc1N0YWxlICYmIGlzU3RhbGUgPyAnc3RhbGUnIDogJ3JlZnJlc2gnXG4gICAgICAgIGlmIChzdGFsZVZhbCAmJiBpc1N0YWxlKSBzdGF0dXMucmV0dXJuZWRTdGFsZSA9IHRydWVcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdGFsZVZhbCA/IHAuX19zdGFsZVdoaWxlRmV0Y2hpbmcgOiAocC5fX3JldHVybmVkID0gcClcbiAgICB9XG4gIH1cblxuICBnZXQoXG4gICAgayxcbiAgICB7XG4gICAgICBhbGxvd1N0YWxlID0gdGhpcy5hbGxvd1N0YWxlLFxuICAgICAgdXBkYXRlQWdlT25HZXQgPSB0aGlzLnVwZGF0ZUFnZU9uR2V0LFxuICAgICAgbm9EZWxldGVPblN0YWxlR2V0ID0gdGhpcy5ub0RlbGV0ZU9uU3RhbGVHZXQsXG4gICAgICBzdGF0dXMsXG4gICAgfSA9IHt9XG4gICkge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5rZXlNYXAuZ2V0KGspXG4gICAgaWYgKGluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy52YWxMaXN0W2luZGV4XVxuICAgICAgY29uc3QgZmV0Y2hpbmcgPSB0aGlzLmlzQmFja2dyb3VuZEZldGNoKHZhbHVlKVxuICAgICAgdGhpcy5zdGF0dXNUVEwoc3RhdHVzLCBpbmRleClcbiAgICAgIGlmICh0aGlzLmlzU3RhbGUoaW5kZXgpKSB7XG4gICAgICAgIGlmIChzdGF0dXMpIHN0YXR1cy5nZXQgPSAnc3RhbGUnXG4gICAgICAgIC8vIGRlbGV0ZSBvbmx5IGlmIG5vdCBhbiBpbi1mbGlnaHQgYmFja2dyb3VuZCBmZXRjaFxuICAgICAgICBpZiAoIWZldGNoaW5nKSB7XG4gICAgICAgICAgaWYgKCFub0RlbGV0ZU9uU3RhbGVHZXQpIHtcbiAgICAgICAgICAgIHRoaXMuZGVsZXRlKGspXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzdGF0dXMpIHN0YXR1cy5yZXR1cm5lZFN0YWxlID0gYWxsb3dTdGFsZVxuICAgICAgICAgIHJldHVybiBhbGxvd1N0YWxlID8gdmFsdWUgOiB1bmRlZmluZWRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoc3RhdHVzKSB7XG4gICAgICAgICAgICBzdGF0dXMucmV0dXJuZWRTdGFsZSA9XG4gICAgICAgICAgICAgIGFsbG93U3RhbGUgJiYgdmFsdWUuX19zdGFsZVdoaWxlRmV0Y2hpbmcgIT09IHVuZGVmaW5lZFxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYWxsb3dTdGFsZSA/IHZhbHVlLl9fc3RhbGVXaGlsZUZldGNoaW5nIDogdW5kZWZpbmVkXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzdGF0dXMpIHN0YXR1cy5nZXQgPSAnaGl0J1xuICAgICAgICAvLyBpZiB3ZSdyZSBjdXJyZW50bHkgZmV0Y2hpbmcgaXQsIHdlIGRvbid0IGFjdHVhbGx5IGhhdmUgaXQgeWV0XG4gICAgICAgIC8vIGl0J3Mgbm90IHN0YWxlLCB3aGljaCBtZWFucyB0aGlzIGlzbid0IGEgc3RhbGVXaGlsZVJlZmV0Y2hpbmcuXG4gICAgICAgIC8vIElmIGl0J3Mgbm90IHN0YWxlLCBhbmQgZmV0Y2hpbmcsIEFORCBoYXMgYSBfX3N0YWxlV2hpbGVGZXRjaGluZ1xuICAgICAgICAvLyB2YWx1ZSwgdGhlbiB0aGF0IG1lYW5zIHRoZSB1c2VyIGZldGNoZWQgd2l0aCB7Zm9yY2VSZWZyZXNoOnRydWV9LFxuICAgICAgICAvLyBzbyBpdCdzIHNhZmUgdG8gcmV0dXJuIHRoYXQgdmFsdWUuXG4gICAgICAgIGlmIChmZXRjaGluZykge1xuICAgICAgICAgIHJldHVybiB2YWx1ZS5fX3N0YWxlV2hpbGVGZXRjaGluZ1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubW92ZVRvVGFpbChpbmRleClcbiAgICAgICAgaWYgKHVwZGF0ZUFnZU9uR2V0KSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVJdGVtQWdlKGluZGV4KVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc3RhdHVzKSB7XG4gICAgICBzdGF0dXMuZ2V0ID0gJ21pc3MnXG4gICAgfVxuICB9XG5cbiAgY29ubmVjdChwLCBuKSB7XG4gICAgdGhpcy5wcmV2W25dID0gcFxuICAgIHRoaXMubmV4dFtwXSA9IG5cbiAgfVxuXG4gIG1vdmVUb1RhaWwoaW5kZXgpIHtcbiAgICAvLyBpZiB0YWlsIGFscmVhZHksIG5vdGhpbmcgdG8gZG9cbiAgICAvLyBpZiBoZWFkLCBtb3ZlIGhlYWQgdG8gbmV4dFtpbmRleF1cbiAgICAvLyBlbHNlXG4gICAgLy8gICBtb3ZlIG5leHRbcHJldltpbmRleF1dIHRvIG5leHRbaW5kZXhdIChoZWFkIGhhcyBubyBwcmV2KVxuICAgIC8vICAgbW92ZSBwcmV2W25leHRbaW5kZXhdXSB0byBwcmV2W2luZGV4XVxuICAgIC8vIHByZXZbaW5kZXhdID0gdGFpbFxuICAgIC8vIG5leHRbdGFpbF0gPSBpbmRleFxuICAgIC8vIHRhaWwgPSBpbmRleFxuICAgIGlmIChpbmRleCAhPT0gdGhpcy50YWlsKSB7XG4gICAgICBpZiAoaW5kZXggPT09IHRoaXMuaGVhZCkge1xuICAgICAgICB0aGlzLmhlYWQgPSB0aGlzLm5leHRbaW5kZXhdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNvbm5lY3QodGhpcy5wcmV2W2luZGV4XSwgdGhpcy5uZXh0W2luZGV4XSlcbiAgICAgIH1cbiAgICAgIHRoaXMuY29ubmVjdCh0aGlzLnRhaWwsIGluZGV4KVxuICAgICAgdGhpcy50YWlsID0gaW5kZXhcbiAgICB9XG4gIH1cblxuICBnZXQgZGVsKCkge1xuICAgIGRlcHJlY2F0ZWRNZXRob2QoJ2RlbCcsICdkZWxldGUnKVxuICAgIHJldHVybiB0aGlzLmRlbGV0ZVxuICB9XG5cbiAgZGVsZXRlKGspIHtcbiAgICBsZXQgZGVsZXRlZCA9IGZhbHNlXG4gICAgaWYgKHRoaXMuc2l6ZSAhPT0gMCkge1xuICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmtleU1hcC5nZXQoaylcbiAgICAgIGlmIChpbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGRlbGV0ZWQgPSB0cnVlXG4gICAgICAgIGlmICh0aGlzLnNpemUgPT09IDEpIHtcbiAgICAgICAgICB0aGlzLmNsZWFyKClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUl0ZW1TaXplKGluZGV4KVxuICAgICAgICAgIGNvbnN0IHYgPSB0aGlzLnZhbExpc3RbaW5kZXhdXG4gICAgICAgICAgaWYgKHRoaXMuaXNCYWNrZ3JvdW5kRmV0Y2godikpIHtcbiAgICAgICAgICAgIHYuX19hYm9ydENvbnRyb2xsZXIuYWJvcnQobmV3IEVycm9yKCdkZWxldGVkJykpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZSh2LCBrLCAnZGVsZXRlJylcbiAgICAgICAgICAgIGlmICh0aGlzLmRpc3Bvc2VBZnRlcikge1xuICAgICAgICAgICAgICB0aGlzLmRpc3Bvc2VkLnB1c2goW3YsIGssICdkZWxldGUnXSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5rZXlNYXAuZGVsZXRlKGspXG4gICAgICAgICAgdGhpcy5rZXlMaXN0W2luZGV4XSA9IG51bGxcbiAgICAgICAgICB0aGlzLnZhbExpc3RbaW5kZXhdID0gbnVsbFxuICAgICAgICAgIGlmIChpbmRleCA9PT0gdGhpcy50YWlsKSB7XG4gICAgICAgICAgICB0aGlzLnRhaWwgPSB0aGlzLnByZXZbaW5kZXhdXG4gICAgICAgICAgfSBlbHNlIGlmIChpbmRleCA9PT0gdGhpcy5oZWFkKSB7XG4gICAgICAgICAgICB0aGlzLmhlYWQgPSB0aGlzLm5leHRbaW5kZXhdXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubmV4dFt0aGlzLnByZXZbaW5kZXhdXSA9IHRoaXMubmV4dFtpbmRleF1cbiAgICAgICAgICAgIHRoaXMucHJldlt0aGlzLm5leHRbaW5kZXhdXSA9IHRoaXMucHJldltpbmRleF1cbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5zaXplLS1cbiAgICAgICAgICB0aGlzLmZyZWUucHVzaChpbmRleClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5kaXNwb3NlZCkge1xuICAgICAgd2hpbGUgKHRoaXMuZGlzcG9zZWQubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuZGlzcG9zZUFmdGVyKC4uLnRoaXMuZGlzcG9zZWQuc2hpZnQoKSlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRlbGV0ZWRcbiAgfVxuXG4gIGNsZWFyKCkge1xuICAgIGZvciAoY29uc3QgaW5kZXggb2YgdGhpcy5yaW5kZXhlcyh7IGFsbG93U3RhbGU6IHRydWUgfSkpIHtcbiAgICAgIGNvbnN0IHYgPSB0aGlzLnZhbExpc3RbaW5kZXhdXG4gICAgICBpZiAodGhpcy5pc0JhY2tncm91bmRGZXRjaCh2KSkge1xuICAgICAgICB2Ll9fYWJvcnRDb250cm9sbGVyLmFib3J0KG5ldyBFcnJvcignZGVsZXRlZCcpKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgayA9IHRoaXMua2V5TGlzdFtpbmRleF1cbiAgICAgICAgdGhpcy5kaXNwb3NlKHYsIGssICdkZWxldGUnKVxuICAgICAgICBpZiAodGhpcy5kaXNwb3NlQWZ0ZXIpIHtcbiAgICAgICAgICB0aGlzLmRpc3Bvc2VkLnB1c2goW3YsIGssICdkZWxldGUnXSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMua2V5TWFwLmNsZWFyKClcbiAgICB0aGlzLnZhbExpc3QuZmlsbChudWxsKVxuICAgIHRoaXMua2V5TGlzdC5maWxsKG51bGwpXG4gICAgaWYgKHRoaXMudHRscykge1xuICAgICAgdGhpcy50dGxzLmZpbGwoMClcbiAgICAgIHRoaXMuc3RhcnRzLmZpbGwoMClcbiAgICB9XG4gICAgaWYgKHRoaXMuc2l6ZXMpIHtcbiAgICAgIHRoaXMuc2l6ZXMuZmlsbCgwKVxuICAgIH1cbiAgICB0aGlzLmhlYWQgPSAwXG4gICAgdGhpcy50YWlsID0gMFxuICAgIHRoaXMuaW5pdGlhbEZpbGwgPSAxXG4gICAgdGhpcy5mcmVlLmxlbmd0aCA9IDBcbiAgICB0aGlzLmNhbGN1bGF0ZWRTaXplID0gMFxuICAgIHRoaXMuc2l6ZSA9IDBcbiAgICBpZiAodGhpcy5kaXNwb3NlZCkge1xuICAgICAgd2hpbGUgKHRoaXMuZGlzcG9zZWQubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuZGlzcG9zZUFmdGVyKC4uLnRoaXMuZGlzcG9zZWQuc2hpZnQoKSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXQgcmVzZXQoKSB7XG4gICAgZGVwcmVjYXRlZE1ldGhvZCgncmVzZXQnLCAnY2xlYXInKVxuICAgIHJldHVybiB0aGlzLmNsZWFyXG4gIH1cblxuICBnZXQgbGVuZ3RoKCkge1xuICAgIGRlcHJlY2F0ZWRQcm9wZXJ0eSgnbGVuZ3RoJywgJ3NpemUnKVxuICAgIHJldHVybiB0aGlzLnNpemVcbiAgfVxuXG4gIHN0YXRpYyBnZXQgQWJvcnRDb250cm9sbGVyKCkge1xuICAgIHJldHVybiBBQ1xuICB9XG4gIHN0YXRpYyBnZXQgQWJvcnRTaWduYWwoKSB7XG4gICAgcmV0dXJuIEFTXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTFJVQ2FjaGVcbiJdLCJuYW1lcyI6WyJwZXJmIiwicGVyZm9ybWFuY2UiLCJub3ciLCJEYXRlIiwiQUMiLCJBYm9ydENvbnRyb2xsZXIiLCJjb25zdHJ1Y3RvciIsInRoaXMiLCJzaWduYWwiLCJBUyIsImFib3J0IiwicmVhc29uIiwiRXJyb3IiLCJhYm9ydGVkIiwiZGlzcGF0Y2hFdmVudCIsInR5cGUiLCJ0YXJnZXQiLCJoYXNBYm9ydFNpZ25hbCIsIkFib3J0U2lnbmFsIiwiaGFzQUNBYm9ydFNpZ25hbCIsInVuZGVmaW5lZCIsIl9saXN0ZW5lcnMiLCJlIiwib25hYm9ydCIsImZvckVhY2giLCJmIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2IiwiZm4iLCJwdXNoIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImZpbHRlciIsIndhcm5lZCIsIlNldCIsImRlcHJlY2F0ZWRPcHRpb24iLCJvcHQiLCJpbnN0ZWFkIiwiY29kZSIsInNob3VsZFdhcm4iLCJ3YXJuIiwiTFJVQ2FjaGUiLCJkZXByZWNhdGVkTWV0aG9kIiwibWV0aG9kIiwicHJvdG90eXBlIiwiZ2V0IiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW1pdFdhcm5pbmciLCJhIiwicHJvY2VzcyIsImNvbnNvbGUiLCJlcnJvciIsImhhcyIsIndoYXQiLCJhZGQiLCJpc1Bvc0ludCIsIm4iLCJNYXRoIiwiZmxvb3IiLCJpc0Zpbml0ZSIsImdldFVpbnRBcnJheSIsIm1heCIsInBvdyIsIlVpbnQ4QXJyYXkiLCJVaW50MTZBcnJheSIsIlVpbnQzMkFycmF5IiwiTnVtYmVyIiwiTUFYX1NBRkVfSU5URUdFUiIsIlplcm9BcnJheSIsIkFycmF5Iiwic2l6ZSIsInN1cGVyIiwiZmlsbCIsIlN0YWNrIiwiVWludEFycmF5IiwiaGVhcCIsImxlbmd0aCIsInBvcCIsIm9wdGlvbnMiLCJ0dGwiLCJ0dGxSZXNvbHV0aW9uIiwidHRsQXV0b3B1cmdlIiwidXBkYXRlQWdlT25HZXQiLCJ1cGRhdGVBZ2VPbkhhcyIsImFsbG93U3RhbGUiLCJkaXNwb3NlIiwiZGlzcG9zZUFmdGVyIiwibm9EaXNwb3NlT25TZXQiLCJub1VwZGF0ZVRUTCIsIm1heFNpemUiLCJtYXhFbnRyeVNpemUiLCJzaXplQ2FsY3VsYXRpb24iLCJmZXRjaE1ldGhvZCIsImZldGNoQ29udGV4dCIsIm5vRGVsZXRlT25GZXRjaFJlamVjdGlvbiIsIm5vRGVsZXRlT25TdGFsZUdldCIsImFsbG93U3RhbGVPbkZldGNoUmVqZWN0aW9uIiwiYWxsb3dTdGFsZU9uRmV0Y2hBYm9ydCIsImlnbm9yZUZldGNoQWJvcnQiLCJtYXhBZ2UiLCJzdGFsZSIsIlR5cGVFcnJvciIsImtleU1hcCIsIk1hcCIsImtleUxpc3QiLCJ2YWxMaXN0IiwibmV4dCIsInByZXYiLCJoZWFkIiwidGFpbCIsImZyZWUiLCJpbml0aWFsRmlsbCIsImRpc3Bvc2VkIiwiaW5pdGlhbGl6ZVNpemVUcmFja2luZyIsImluaXRpYWxpemVUVExUcmFja2luZyIsImdldFJlbWFpbmluZ1RUTCIsImtleSIsIkluZmluaXR5IiwidHRscyIsInN0YXJ0cyIsInNldEl0ZW1UVEwiLCJpbmRleCIsInN0YXJ0IiwidCIsInNldFRpbWVvdXQiLCJpc1N0YWxlIiwiZGVsZXRlIiwidW5yZWYiLCJ1cGRhdGVJdGVtQWdlIiwic3RhdHVzVFRMIiwic3RhdHVzIiwiY2FjaGVkTm93IiwiZ2V0Tm93IiwicmVtYWluaW5nVFRMIiwiX2luZGV4IiwiX3N0YXR1cyIsIl90dGwiLCJfc3RhcnQiLCJjYWxjdWxhdGVkU2l6ZSIsInNpemVzIiwicmVtb3ZlSXRlbVNpemUiLCJyZXF1aXJlU2l6ZSIsImsiLCJ2IiwiaXNCYWNrZ3JvdW5kRmV0Y2giLCJhZGRJdGVtU2l6ZSIsImV2aWN0IiwiZW50cnlTaXplIiwidG90YWxDYWxjdWxhdGVkU2l6ZSIsIl9zaXplIiwiX2siLCJfdiIsImkiLCJpc1ZhbGlkSW5kZXgiLCJpbmRleGVzIiwicmluZGV4ZXMiLCJTeW1ib2wiLCJpdGVyYXRvciIsImVudHJpZXMiLCJmaW5kIiwiZ2V0T3B0aW9ucyIsInZhbHVlIiwiX19zdGFsZVdoaWxlRmV0Y2hpbmciLCJ0aGlzcCIsImNhbGwiLCJyZm9yRWFjaCIsInBydW5lIiwicHVyZ2VTdGFsZSIsImRlbGV0ZWQiLCJkdW1wIiwiYXJyIiwiZW50cnkiLCJhZ2UiLCJ1bnNoaWZ0IiwibG9hZCIsImNsZWFyIiwic2V0IiwiX3JlYXNvbiIsIm1heEVudHJ5U2l6ZUV4Y2VlZGVkIiwibmV3SW5kZXgiLCJtb3ZlVG9UYWlsIiwib2xkVmFsIiwiX19hYm9ydENvbnRyb2xsZXIiLCJvbGRWYWx1ZSIsInNoaWZ0IiwidmFsIiwicGVlayIsImJhY2tncm91bmRGZXRjaCIsImNvbnRleHQiLCJhYyIsImZldGNoT3B0cyIsImNiIiwidXBkYXRlQ2FjaGUiLCJpZ25vcmVBYm9ydCIsImZldGNoQWJvcnRlZCIsImZldGNoRXJyb3IiLCJmZXRjaEFib3J0SWdub3JlZCIsImZldGNoUmVzb2x2ZWQiLCJwIiwiZmV0Y2hVcGRhdGVkIiwiZmV0Y2hGYWlsIiwiZXIiLCJhbGxvd1N0YWxlQWJvcnRlZCIsIm5vRGVsZXRlIiwicmV0dXJuZWRTdGFsZSIsIl9fcmV0dXJuZWQiLCJmZXRjaERpc3BhdGNoZWQiLCJQcm9taXNlIiwicmVzIiwicmVqIiwidGhlbiIsImZldGNoUmVqZWN0ZWQiLCJoYXNPd25Qcm9wZXJ0eSIsImFzeW5jIiwiZm9yY2VSZWZyZXNoIiwiZmV0Y2giLCJoYXNTdGFsZSIsInN0YWxlVmFsIiwiZmV0Y2hpbmciLCJjb25uZWN0IiwiZGVsIiwicmVzZXQiLCJmaWVsZCIsImRlcHJlY2F0ZWRQcm9wZXJ0eSJdLCJzb3VyY2VSb290IjoiIn0=