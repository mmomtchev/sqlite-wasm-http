{"version":3,"file":"713.bundle.js","mappings":"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","sources":["webpack://sqlite-wasm-http/./deps/dist/sqlite3-bundler-friendly.mjs"],"sourcesContent":["/*\n** LICENSE for the sqlite3 WebAssembly/JavaScript APIs.\n**\n** This bundle (typically released as sqlite3.js or sqlite3.mjs)\n** is an amalgamation of JavaScript source code from two projects:\n**\n** 1) https://emscripten.org: the Emscripten \"glue code\" is covered by\n**    the terms of the MIT license and University of Illinois/NCSA\n**    Open Source License, as described at:\n**\n**    https://emscripten.org/docs/introducing_emscripten/emscripten_license.html\n**\n** 2) https://sqlite.org: all code and documentation labeled as being\n**    from this source are released under the same terms as the sqlite3\n**    C library:\n**\n** 2022-10-16\n**\n** The author disclaims copyright to this source code.  In place of a\n** legal notice, here is a blessing:\n**\n** *   May you do good and not evil.\n** *   May you find forgiveness for yourself and forgive others.\n** *   May you share freely, never taking more than you give.\n*/\n/*\n** This code was built from sqlite3 version...\n**\n** SQLITE_VERSION \"3.42.0\"\n** SQLITE_VERSION_NUMBER 3042000\n** SQLITE_SOURCE_ID \"2023-03-30 12:19:38 8724fe7426da55d19dba7b30e09321ba30c73286513864cb05de32f72e50ee31\"\n**\n** Using the Emscripten SDK version 3.1.32.\n*/\n\nvar sqlite3InitModule = (() => {\n  var _scriptDir = import.meta.url;\n  \n  return (\nfunction(sqlite3InitModule = {})  {\n\n// include: shell.js\n// The Module object: Our interface to the outside world. We import\n// and export values on it. There are various ways Module can be used:\n// 1. Not defined. We create it here\n// 2. A function parameter, function(Module) { ..generated code.. }\n// 3. pre-run appended it, var Module = {}; ..generated code..\n// 4. External script tag defines var Module.\n// We need to check if Module already exists (e.g. case 3 above).\n// Substitution will be replaced with actual code on later stage of the build,\n// this way Closure Compiler will not mangle it (e.g. case 4. above).\n// Note that if you want to run closure, and also to use Module\n// after the generated code, you will need to define   var Module = {};\n// before the code. Then that object will be used in the code, and you\n// can continue to use Module afterwards as well.\nvar Module = typeof sqlite3InitModule != 'undefined' ? sqlite3InitModule : {};\n\n// Set up the promise that indicates the Module is initialized\nvar readyPromiseResolve, readyPromiseReject;\nModule['ready'] = new Promise(function(resolve, reject) {\n  readyPromiseResolve = resolve;\n  readyPromiseReject = reject;\n});\n\n// --pre-jses are emitted after the Module integration code, so that they can\n// refer to Module (if they choose; they can also define Module)\n/**\n   BEGIN FILE: api/pre-js.js\n\n   This file is intended to be prepended to the sqlite3.js build using\n   Emscripten's --pre-js=THIS_FILE flag (or equivalent).\n*/\n\n// See notes in extern-post-js.js\nconst sqlite3InitModuleState = globalThis.sqlite3InitModuleState\n      || Object.assign(Object.create(null),{\n        debugModule: ()=>{}\n      });\ndelete globalThis.sqlite3InitModuleState;\nsqlite3InitModuleState.debugModule('globalThis.location =',globalThis.location);\n\n/**\n   Bug warning: a custom Module.instantiateWasm() does not work\n   in WASMFS builds:\n\n   https://github.com/emscripten-core/emscripten/issues/17951\n\n   In such builds we must disable this.\n*/\nconst xNameOfInstantiateWasm = false\n      ? 'instantiateWasm'\n      : 'emscripten-bug-17951';\nModule[xNameOfInstantiateWasm] = function callee(imports,onSuccess){\n  imports.env.foo = function(){};\n  const uri = Module.locateFile(\n    callee.uri, (\n      ('undefined'===typeof scriptDirectory/*var defined by Emscripten glue*/)\n        ? \"\" : scriptDirectory)\n  );\n  sqlite3InitModuleState.debugModule(\n    \"instantiateWasm() uri =\", uri\n  );\n  const wfetch = ()=>fetch(uri, {credentials: 'same-origin'});\n  const loadWasm = WebAssembly.instantiateStreaming\n        ? async ()=>{\n          return WebAssembly.instantiateStreaming(wfetch(), imports)\n            .then((arg)=>onSuccess(arg.instance, arg.module));\n        }\n        : async ()=>{ // Safari < v15\n          return wfetch()\n            .then(response => response.arrayBuffer())\n            .then(bytes => WebAssembly.instantiate(bytes, imports))\n            .then((arg)=>onSuccess(arg.instance, arg.module));\n        };\n  loadWasm();\n  return {};\n};\n/*\n  It is literally impossible to reliably get the name of _this_ script\n  at runtime, so impossible to derive X.wasm from script name\n  X.js. Thus we need, at build-time, to redefine\n  Module[xNameOfInstantiateWasm].uri by appending it to a build-specific\n  copy of this file with the name of the wasm file. This is apparently\n  why Emscripten hard-codes the name of the wasm file into their glue\n  scripts.\n*/\nModule[xNameOfInstantiateWasm].uri = 'sqlite3.wasm';\n/* END FILE: api/pre-js.js, noting that the build process may add a\n   line after this one to change the above .uri to a build-specific\n   one. */\n\n\n\n// Sometimes an existing Module object exists with properties\n// meant to overwrite the default module functionality. Here\n// we collect those properties and reapply _after_ we configure\n// the current environment's defaults to avoid having to be so\n// defensive during initialization.\nvar moduleOverrides = Object.assign({}, Module);\n\nvar arguments_ = [];\nvar thisProgram = './this.program';\nvar quit_ = (status, toThrow) => {\n  throw toThrow;\n};\n\n// Determine the runtime environment we are in. You can customize this by\n// setting the ENVIRONMENT setting at compile time (see settings.js).\n\n// Attempt to auto-detect the environment\nvar ENVIRONMENT_IS_WEB = typeof window == 'object';\nvar ENVIRONMENT_IS_WORKER = typeof importScripts == 'function';\n// N.b. Electron.js environment is simultaneously a NODE-environment, but\n// also a web environment.\nvar ENVIRONMENT_IS_NODE = typeof process == 'object' && typeof process.versions == 'object' && typeof process.versions.node == 'string';\nvar ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;\n\n// `/` should be present at the end if `scriptDirectory` is not empty\nvar scriptDirectory = '';\nfunction locateFile(path) {\n  if (Module['locateFile']) {\n    return Module['locateFile'](path, scriptDirectory);\n  }\n  return scriptDirectory + path;\n}\n\n// Hooks that are implemented differently in different runtime environments.\nvar read_,\n    readAsync,\n    readBinary,\n    setWindowTitle;\n\n// Note that this includes Node.js workers when relevant (pthreads is enabled).\n// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and\n// ENVIRONMENT_IS_NODE.\nif (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled\n    scriptDirectory = self.location.href;\n  } else if (typeof document != 'undefined' && document.currentScript) { // web\n    scriptDirectory = document.currentScript.src;\n  }\n  // When MODULARIZE, this JS may be executed later, after document.currentScript\n  // is gone, so we saved it, and we use it here instead of any other info.\n  if (_scriptDir) {\n    scriptDirectory = _scriptDir;\n  }\n  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.\n  // otherwise, slice off the final part of the url to find the script directory.\n  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,\n  // and scriptDirectory will correctly be replaced with an empty string.\n  // If scriptDirectory contains a query (starting with ?) or a fragment (starting with #),\n  // they are removed because they could contain a slash.\n  if (scriptDirectory.indexOf('blob:') !== 0) {\n    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, \"\").lastIndexOf('/')+1);\n  } else {\n    scriptDirectory = '';\n  }\n\n  // Differentiate the Web Worker from the Node Worker case, as reading must\n  // be done differently.\n  {\n// include: web_or_worker_shell_read.js\nread_ = (url) => {\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url, false);\n      xhr.send(null);\n      return xhr.responseText;\n  }\n\n  if (ENVIRONMENT_IS_WORKER) {\n    readBinary = (url) => {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', url, false);\n        xhr.responseType = 'arraybuffer';\n        xhr.send(null);\n        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));\n    };\n  }\n\n  readAsync = (url, onload, onerror) => {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'arraybuffer';\n    xhr.onload = () => {\n      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0\n        onload(xhr.response);\n        return;\n      }\n      onerror();\n    };\n    xhr.onerror = onerror;\n    xhr.send(null);\n  }\n\n// end include: web_or_worker_shell_read.js\n  }\n\n  setWindowTitle = (title) => document.title = title;\n} else\n{\n}\n\nvar out = Module['print'] || console.log.bind(console);\nvar err = Module['printErr'] || console.warn.bind(console);\n\n// Merge back in the overrides\nObject.assign(Module, moduleOverrides);\n// Free the object hierarchy contained in the overrides, this lets the GC\n// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.\nmoduleOverrides = null;\n\n// Emit code to handle expected values on the Module object. This applies Module.x\n// to the proper local x. This has two benefits: first, we only emit it if it is\n// expected to arrive, and second, by using a local everywhere else that can be\n// minified.\n\nif (Module['arguments']) arguments_ = Module['arguments'];\n\nif (Module['thisProgram']) thisProgram = Module['thisProgram'];\n\nif (Module['quit']) quit_ = Module['quit'];\n\n// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message\n\n\n// end include: shell.js\n// include: preamble.js\n// === Preamble library stuff ===\n\n// Documentation for the public APIs defined in this file must be updated in:\n//    site/source/docs/api_reference/preamble.js.rst\n// A prebuilt local version of the documentation is available at:\n//    site/build/text/docs/api_reference/preamble.js.txt\n// You can also build docs locally as HTML or other formats in site/\n// An online HTML version (which may be of a different version of Emscripten)\n//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html\n\nvar wasmBinary;\nif (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];\nvar noExitRuntime = Module['noExitRuntime'] || true;\n\nif (typeof WebAssembly != 'object') {\n  abort('no native wasm support detected');\n}\n\n// Wasm globals\n\nvar wasmMemory;\n\n//========================================\n// Runtime essentials\n//========================================\n\n// whether we are quitting the application. no code should run after this.\n// set in exit() and abort()\nvar ABORT = false;\n\n// set by exit() and abort().  Passed to 'onExit' handler.\n// NOTE: This is also used as the process return code code in shell environments\n// but only when noExitRuntime is false.\nvar EXITSTATUS;\n\n/** @type {function(*, string=)} */\nfunction assert(condition, text) {\n  if (!condition) {\n    // This build was created without ASSERTIONS defined.  `assert()` should not\n    // ever be called in this configuration but in case there are callers in\n    // the wild leave this simple abort() implemenation here for now.\n    abort(text);\n  }\n}\n\n// include: runtime_strings.js\n// runtime_strings.js: String related runtime functions that are part of both\n// MINIMAL_RUNTIME and regular runtime.\n\nvar UTF8Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf8') : undefined;\n\n/**\n * Given a pointer 'idx' to a null-terminated UTF8-encoded string in the given\n * array that contains uint8 values, returns a copy of that string as a\n * Javascript String object.\n * heapOrArray is either a regular array, or a JavaScript typed array view.\n * @param {number} idx\n * @param {number=} maxBytesToRead\n * @return {string}\n */\nfunction UTF8ArrayToString(heapOrArray, idx, maxBytesToRead) {\n  var endIdx = idx + maxBytesToRead;\n  var endPtr = idx;\n  // TextDecoder needs to know the byte length in advance, it doesn't stop on\n  // null terminator by itself.  Also, use the length info to avoid running tiny\n  // strings through TextDecoder, since .subarray() allocates garbage.\n  // (As a tiny code save trick, compare endPtr against endIdx using a negation,\n  // so that undefined means Infinity)\n  while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;\n\n  if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {\n    return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));\n  }\n  var str = '';\n  // If building with TextDecoder, we have already computed the string length\n  // above, so test loop end condition against that\n  while (idx < endPtr) {\n    // For UTF8 byte structure, see:\n    // http://en.wikipedia.org/wiki/UTF-8#Description\n    // https://www.ietf.org/rfc/rfc2279.txt\n    // https://tools.ietf.org/html/rfc3629\n    var u0 = heapOrArray[idx++];\n    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }\n    var u1 = heapOrArray[idx++] & 63;\n    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }\n    var u2 = heapOrArray[idx++] & 63;\n    if ((u0 & 0xF0) == 0xE0) {\n      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heapOrArray[idx++] & 63);\n    }\n\n    if (u0 < 0x10000) {\n      str += String.fromCharCode(u0);\n    } else {\n      var ch = u0 - 0x10000;\n      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));\n    }\n  }\n  return str;\n}\n\n/**\n * Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the\n * emscripten HEAP, returns a copy of that string as a Javascript String object.\n *\n * @param {number} ptr\n * @param {number=} maxBytesToRead - An optional length that specifies the\n *   maximum number of bytes to read. You can omit this parameter to scan the\n *   string until the first \\0 byte. If maxBytesToRead is passed, and the string\n *   at [ptr, ptr+maxBytesToReadr[ contains a null byte in the middle, then the\n *   string will cut short at that byte index (i.e. maxBytesToRead will not\n *   produce a string of exact length [ptr, ptr+maxBytesToRead[) N.B. mixing\n *   frequent uses of UTF8ToString() with and without maxBytesToRead may throw\n *   JS JIT optimizations off, so it is worth to consider consistently using one\n * @return {string}\n */\nfunction UTF8ToString(ptr, maxBytesToRead) {\n  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';\n}\n\n/**\n * Copies the given Javascript String object 'str' to the given byte array at\n * address 'outIdx', encoded in UTF8 form and null-terminated. The copy will\n * require at most str.length*4+1 bytes of space in the HEAP.  Use the function\n * lengthBytesUTF8 to compute the exact number of bytes (excluding null\n * terminator) that this function will write.\n *\n * @param {string} str - The Javascript string to copy.\n * @param {ArrayBufferView|Array<number>} heap - The array to copy to. Each\n *                                               index in this array is assumed\n *                                               to be one 8-byte element.\n * @param {number} outIdx - The starting offset in the array to begin the copying.\n * @param {number} maxBytesToWrite - The maximum number of bytes this function\n *                                   can write to the array.  This count should\n *                                   include the null terminator, i.e. if\n *                                   maxBytesToWrite=1, only the null terminator\n *                                   will be written and nothing else.\n *                                   maxBytesToWrite=0 does not write any bytes\n *                                   to the output, not even the null\n *                                   terminator.\n * @return {number} The number of bytes written, EXCLUDING the null terminator.\n */\nfunction stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {\n  // Parameter maxBytesToWrite is not optional. Negative values, 0, null,\n  // undefined and false each don't write out any bytes.\n  if (!(maxBytesToWrite > 0))\n    return 0;\n\n  var startIdx = outIdx;\n  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.\n  for (var i = 0; i < str.length; ++i) {\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code\n    // unit, not a Unicode code point of the character! So decode\n    // UTF16->UTF32->UTF8.\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\n    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description\n    // and https://www.ietf.org/rfc/rfc2279.txt\n    // and https://tools.ietf.org/html/rfc3629\n    var u = str.charCodeAt(i); // possibly a lead surrogate\n    if (u >= 0xD800 && u <= 0xDFFF) {\n      var u1 = str.charCodeAt(++i);\n      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      if (outIdx >= endIdx) break;\n      heap[outIdx++] = u;\n    } else if (u <= 0x7FF) {\n      if (outIdx + 1 >= endIdx) break;\n      heap[outIdx++] = 0xC0 | (u >> 6);\n      heap[outIdx++] = 0x80 | (u & 63);\n    } else if (u <= 0xFFFF) {\n      if (outIdx + 2 >= endIdx) break;\n      heap[outIdx++] = 0xE0 | (u >> 12);\n      heap[outIdx++] = 0x80 | ((u >> 6) & 63);\n      heap[outIdx++] = 0x80 | (u & 63);\n    } else {\n      if (outIdx + 3 >= endIdx) break;\n      heap[outIdx++] = 0xF0 | (u >> 18);\n      heap[outIdx++] = 0x80 | ((u >> 12) & 63);\n      heap[outIdx++] = 0x80 | ((u >> 6) & 63);\n      heap[outIdx++] = 0x80 | (u & 63);\n    }\n  }\n  // Null-terminate the pointer to the buffer.\n  heap[outIdx] = 0;\n  return outIdx - startIdx;\n}\n\n/**\n * Copies the given Javascript String object 'str' to the emscripten HEAP at\n * address 'outPtr', null-terminated and encoded in UTF8 form. The copy will\n * require at most str.length*4+1 bytes of space in the HEAP.\n * Use the function lengthBytesUTF8 to compute the exact number of bytes\n * (excluding null terminator) that this function will write.\n *\n * @return {number} The number of bytes written, EXCLUDING the null terminator.\n */\nfunction stringToUTF8(str, outPtr, maxBytesToWrite) {\n  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);\n}\n\n/**\n * Returns the number of bytes the given Javascript string takes if encoded as a\n * UTF8 byte array, EXCLUDING the null terminator byte.\n *\n * @param {string} str - JavaScript string to operator on\n * @return {number} Length, in bytes, of the UTF8 encoded string.\n */\nfunction lengthBytesUTF8(str) {\n  var len = 0;\n  for (var i = 0; i < str.length; ++i) {\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code\n    // unit, not a Unicode code point of the character! So decode\n    // UTF16->UTF32->UTF8.\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\n    var c = str.charCodeAt(i); // possibly a lead surrogate\n    if (c <= 0x7F) {\n      len++;\n    } else if (c <= 0x7FF) {\n      len += 2;\n    } else if (c >= 0xD800 && c <= 0xDFFF) {\n      len += 4; ++i;\n    } else {\n      len += 3;\n    }\n  }\n  return len;\n}\n\n// end include: runtime_strings.js\n// Memory management\n\nvar HEAP,\n/** @type {!Int8Array} */\n  HEAP8,\n/** @type {!Uint8Array} */\n  HEAPU8,\n/** @type {!Int16Array} */\n  HEAP16,\n/** @type {!Uint16Array} */\n  HEAPU16,\n/** @type {!Int32Array} */\n  HEAP32,\n/** @type {!Uint32Array} */\n  HEAPU32,\n/** @type {!Float32Array} */\n  HEAPF32,\n/* BigInt64Array type is not correctly defined in closure\n/** not-@type {!BigInt64Array} */\n  HEAP64,\n/* BigUInt64Array type is not correctly defined in closure\n/** not-t@type {!BigUint64Array} */\n  HEAPU64,\n/** @type {!Float64Array} */\n  HEAPF64;\n\nfunction updateMemoryViews() {\n  var b = wasmMemory.buffer;\n  Module['HEAP8'] = HEAP8 = new Int8Array(b);\n  Module['HEAP16'] = HEAP16 = new Int16Array(b);\n  Module['HEAP32'] = HEAP32 = new Int32Array(b);\n  Module['HEAPU8'] = HEAPU8 = new Uint8Array(b);\n  Module['HEAPU16'] = HEAPU16 = new Uint16Array(b);\n  Module['HEAPU32'] = HEAPU32 = new Uint32Array(b);\n  Module['HEAPF32'] = HEAPF32 = new Float32Array(b);\n  Module['HEAPF64'] = HEAPF64 = new Float64Array(b);\n  Module['HEAP64'] = HEAP64 = new BigInt64Array(b);\n  Module['HEAPU64'] = HEAPU64 = new BigUint64Array(b);\n}\n\n// In non-standalone/normal mode, we create the memory here.\n// include: runtime_init_memory.js\n// Create the wasm memory. (Note: this only applies if IMPORTED_MEMORY is defined)\n\nvar INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;\n\nassert(INITIAL_MEMORY >= 524288, 'INITIAL_MEMORY should be larger than STACK_SIZE, was ' + INITIAL_MEMORY + '! (STACK_SIZE=' + 524288 + ')');\n\n// check for full engine support (use string 'subarray' to avoid closure compiler confusion)\n\n  if (Module['wasmMemory']) {\n    wasmMemory = Module['wasmMemory'];\n  } else\n  {\n    wasmMemory = new WebAssembly.Memory({\n      'initial': INITIAL_MEMORY / 65536,\n      // In theory we should not need to emit the maximum if we want \"unlimited\"\n      // or 4GB of memory, but VMs error on that atm, see\n      // https://github.com/emscripten-core/emscripten/issues/14130\n      // And in the pthreads case we definitely need to emit a maximum. So\n      // always emit one.\n      'maximum': 2147483648 / 65536\n    });\n  }\n\nupdateMemoryViews();\n\n// If the user provides an incorrect length, just use that length instead rather than providing the user to\n// specifically provide the memory length with Module['INITIAL_MEMORY'].\nINITIAL_MEMORY = wasmMemory.buffer.byteLength;\n\n// end include: runtime_init_memory.js\n\n// include: runtime_init_table.js\n// In regular non-RELOCATABLE mode the table is exported\n// from the wasm module and this will be assigned once\n// the exports are available.\nvar wasmTable;\n\n// end include: runtime_init_table.js\n// include: runtime_stack_check.js\n// end include: runtime_stack_check.js\n// include: runtime_assertions.js\n// end include: runtime_assertions.js\nvar __ATPRERUN__  = []; // functions called before the runtime is initialized\nvar __ATINIT__    = []; // functions called during startup\nvar __ATEXIT__    = []; // functions called during shutdown\nvar __ATPOSTRUN__ = []; // functions called after the main() is called\n\nvar runtimeInitialized = false;\n\nfunction keepRuntimeAlive() {\n  return noExitRuntime;\n}\n\nfunction preRun() {\n  if (Module['preRun']) {\n    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];\n    while (Module['preRun'].length) {\n      addOnPreRun(Module['preRun'].shift());\n    }\n  }\n  callRuntimeCallbacks(__ATPRERUN__);\n}\n\nfunction initRuntime() {\n  runtimeInitialized = true;\n\n  \nif (!Module[\"noFSInit\"] && !FS.init.initialized)\n  FS.init();\nFS.ignorePermissions = false;\n\nTTY.init();\n  callRuntimeCallbacks(__ATINIT__);\n}\n\nfunction postRun() {\n\n  if (Module['postRun']) {\n    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];\n    while (Module['postRun'].length) {\n      addOnPostRun(Module['postRun'].shift());\n    }\n  }\n\n  callRuntimeCallbacks(__ATPOSTRUN__);\n}\n\nfunction addOnPreRun(cb) {\n  __ATPRERUN__.unshift(cb);\n}\n\nfunction addOnInit(cb) {\n  __ATINIT__.unshift(cb);\n}\n\nfunction addOnExit(cb) {\n}\n\nfunction addOnPostRun(cb) {\n  __ATPOSTRUN__.unshift(cb);\n}\n\n// include: runtime_math.js\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc\n\n// end include: runtime_math.js\n// A counter of dependencies for calling run(). If we need to\n// do asynchronous work before running, increment this and\n// decrement it. Incrementing must happen in a place like\n// Module.preRun (used by emcc to add file preloading).\n// Note that you can add dependencies in preRun, even though\n// it happens right before run - run will be postponed until\n// the dependencies are met.\nvar runDependencies = 0;\nvar runDependencyWatcher = null;\nvar dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled\n\nfunction getUniqueRunDependency(id) {\n  return id;\n}\n\nfunction addRunDependency(id) {\n  runDependencies++;\n\n  if (Module['monitorRunDependencies']) {\n    Module['monitorRunDependencies'](runDependencies);\n  }\n\n}\n\nfunction removeRunDependency(id) {\n  runDependencies--;\n\n  if (Module['monitorRunDependencies']) {\n    Module['monitorRunDependencies'](runDependencies);\n  }\n\n  if (runDependencies == 0) {\n    if (runDependencyWatcher !== null) {\n      clearInterval(runDependencyWatcher);\n      runDependencyWatcher = null;\n    }\n    if (dependenciesFulfilled) {\n      var callback = dependenciesFulfilled;\n      dependenciesFulfilled = null;\n      callback(); // can add another dependenciesFulfilled\n    }\n  }\n}\n\n/** @param {string|number=} what */\nfunction abort(what) {\n  if (Module['onAbort']) {\n    Module['onAbort'](what);\n  }\n\n  what = 'Aborted(' + what + ')';\n  // TODO(sbc): Should we remove printing and leave it up to whoever\n  // catches the exception?\n  err(what);\n\n  ABORT = true;\n  EXITSTATUS = 1;\n\n  what += '. Build with -sASSERTIONS for more info.';\n\n  // Use a wasm runtime error, because a JS error might be seen as a foreign\n  // exception, which means we'd run destructors on it. We need the error to\n  // simply make the program stop.\n  // FIXME This approach does not work in Wasm EH because it currently does not assume\n  // all RuntimeErrors are from traps; it decides whether a RuntimeError is from\n  // a trap or not based on a hidden field within the object. So at the moment\n  // we don't have a way of throwing a wasm trap from JS. TODO Make a JS API that\n  // allows this in the wasm spec.\n\n  // Suppress closure compiler warning here. Closure compiler's builtin extern\n  // defintion for WebAssembly.RuntimeError claims it takes no arguments even\n  // though it can.\n  // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure gets fixed.\n  /** @suppress {checkTypes} */\n  var e = new WebAssembly.RuntimeError(what);\n\n  readyPromiseReject(e);\n  // Throw the error whether or not MODULARIZE is set because abort is used\n  // in code paths apart from instantiation where an exception is expected\n  // to be thrown when abort is called.\n  throw e;\n}\n\n// include: memoryprofiler.js\n// end include: memoryprofiler.js\n// include: URIUtils.js\n// Prefix of data URIs emitted by SINGLE_FILE and related options.\nvar dataURIPrefix = 'data:application/octet-stream;base64,';\n\n// Indicates whether filename is a base64 data URI.\nfunction isDataURI(filename) {\n  // Prefix of data URIs emitted by SINGLE_FILE and related options.\n  return filename.startsWith(dataURIPrefix);\n}\n\n// Indicates whether filename is delivered via file protocol (as opposed to http/https)\nfunction isFileURI(filename) {\n  return filename.startsWith('file://');\n}\n\n// end include: URIUtils.js\n// include: runtime_exceptions.js\n// end include: runtime_exceptions.js\nvar wasmBinaryFile;\nif (Module['locateFile']) {\n  wasmBinaryFile = 'sqlite3.wasm';\n  if (!isDataURI(wasmBinaryFile)) {\n    wasmBinaryFile = locateFile(wasmBinaryFile);\n  }\n} else {\n  // Use bundler-friendly `new URL(..., import.meta.url)` pattern; works in browsers too.\n  wasmBinaryFile = new URL('sqlite3.wasm', import.meta.url).href;\n}\n\nfunction getBinary(file) {\n  try {\n    if (file == wasmBinaryFile && wasmBinary) {\n      return new Uint8Array(wasmBinary);\n    }\n    if (readBinary) {\n      return readBinary(file);\n    }\n    throw \"both async and sync fetching of the wasm failed\";\n  }\n  catch (err) {\n    abort(err);\n  }\n}\n\nfunction getBinaryPromise(binaryFile) {\n  // If we don't have the binary yet, try to to load it asynchronously.\n  // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.\n  // See https://github.com/github/fetch/pull/92#issuecomment-140665932\n  // Cordova or Electron apps are typically loaded from a file:// url.\n  // So use fetch if it is available and the url is not a file, otherwise fall back to XHR.\n  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {\n    if (typeof fetch == 'function'\n    ) {\n      return fetch(binaryFile, { credentials: 'same-origin' }).then(function(response) {\n        if (!response['ok']) {\n          throw \"failed to load wasm binary file at '\" + binaryFile + \"'\";\n        }\n        return response['arrayBuffer']();\n      }).catch(function () {\n          return getBinary(binaryFile);\n      });\n    }\n  }\n\n  // Otherwise, getBinary should be able to get it synchronously\n  return Promise.resolve().then(function() { return getBinary(binaryFile); });\n}\n\nfunction instantiateArrayBuffer(binaryFile, imports, receiver) {\n  return getBinaryPromise(binaryFile).then(function(binary) {\n    return WebAssembly.instantiate(binary, imports);\n  }).then(function (instance) {\n    return instance;\n  }).then(receiver, function(reason) {\n    err('failed to asynchronously prepare wasm: ' + reason);\n\n    abort(reason);\n  });\n}\n\nfunction instantiateAsync(binary, binaryFile, imports, callback) {\n  if (!binary &&\n      typeof WebAssembly.instantiateStreaming == 'function' &&\n      !isDataURI(binaryFile) &&\n      typeof fetch == 'function') {\n    return fetch(binaryFile, { credentials: 'same-origin' }).then(function(response) {\n      // Suppress closure warning here since the upstream definition for\n      // instantiateStreaming only allows Promise<Repsponse> rather than\n      // an actual Response.\n      // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure is fixed.\n      /** @suppress {checkTypes} */\n      var result = WebAssembly.instantiateStreaming(response, imports);\n\n      return result.then(\n        callback,\n        function(reason) {\n          // We expect the most common failure cause to be a bad MIME type for the binary,\n          // in which case falling back to ArrayBuffer instantiation should work.\n          err('wasm streaming compile failed: ' + reason);\n          err('falling back to ArrayBuffer instantiation');\n          return instantiateArrayBuffer(binaryFile, imports, callback);\n        });\n    });\n  } else {\n    return instantiateArrayBuffer(binaryFile, imports, callback);\n  }\n}\n\n// Create the wasm instance.\n// Receives the wasm imports, returns the exports.\nfunction createWasm() {\n  // prepare imports\n  var info = {\n    'env': wasmImports,\n    'wasi_snapshot_preview1': wasmImports,\n  };\n  // Load the wasm module and create an instance of using native support in the JS engine.\n  // handle a generated wasm instance, receiving its exports and\n  // performing other necessary setup\n  /** @param {WebAssembly.Module=} module*/\n  function receiveInstance(instance, module) {\n    var exports = instance.exports;\n\n    Module['asm'] = exports;\n\n    wasmTable = Module['asm']['__indirect_function_table'];\n\n    addOnInit(Module['asm']['__wasm_call_ctors']);\n\n    removeRunDependency('wasm-instantiate');\n\n    return exports;\n  }\n  // wait for the pthread pool (if any)\n  addRunDependency('wasm-instantiate');\n\n  // Prefer streaming instantiation if available.\n  function receiveInstantiationResult(result) {\n    // 'result' is a ResultObject object which has both the module and instance.\n    // receiveInstance() will swap in the exports (to Module.asm) so they can be called\n    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.\n    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.\n    receiveInstance(result['instance']);\n  }\n\n  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback\n  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel\n  // to any other async startup actions they are performing.\n  // Also pthreads and wasm workers initialize the wasm instance through this path.\n  if (Module['instantiateWasm']) {\n    try {\n      return Module['instantiateWasm'](info, receiveInstance);\n    } catch(e) {\n      err('Module.instantiateWasm callback failed with error: ' + e);\n        // If instantiation fails, reject the module ready promise.\n        readyPromiseReject(e);\n    }\n  }\n\n  // If instantiation fails, reject the module ready promise.\n  instantiateAsync(wasmBinary, wasmBinaryFile, info, receiveInstantiationResult).catch(readyPromiseReject);\n  return {}; // no exports yet; we'll fill them in later\n}\n\n// Globals used by JS i64 conversions (see makeSetValue)\nvar tempDouble;\nvar tempI64;\n\n// include: runtime_debug.js\n// end include: runtime_debug.js\n// === Body ===\n\n\n// end include: preamble.js\n\n  /** @constructor */\n  function ExitStatus(status) {\n      this.name = 'ExitStatus';\n      this.message = 'Program terminated with exit(' + status + ')';\n      this.status = status;\n    }\n\n  function callRuntimeCallbacks(callbacks) {\n      while (callbacks.length > 0) {\n        // Pass the module as the first argument.\n        callbacks.shift()(Module);\n      }\n    }\n\n  \n    /**\n     * @param {number} ptr\n     * @param {string} type\n     */\n  function getValue(ptr, type = 'i8') {\n    if (type.endsWith('*')) type = '*';\n    switch (type) {\n      case 'i1': return HEAP8[((ptr)>>0)];\n      case 'i8': return HEAP8[((ptr)>>0)];\n      case 'i16': return HEAP16[((ptr)>>1)];\n      case 'i32': return HEAP32[((ptr)>>2)];\n      case 'i64': return HEAP64[((ptr)>>3)];\n      case 'float': return HEAPF32[((ptr)>>2)];\n      case 'double': return HEAPF64[((ptr)>>3)];\n      case '*': return HEAPU32[((ptr)>>2)];\n      default: abort('invalid type for getValue: ' + type);\n    }\n  }\n\n  \n    /**\n     * @param {number} ptr\n     * @param {number} value\n     * @param {string} type\n     */\n  function setValue(ptr, value, type = 'i8') {\n    if (type.endsWith('*')) type = '*';\n    switch (type) {\n      case 'i1': HEAP8[((ptr)>>0)] = value; break;\n      case 'i8': HEAP8[((ptr)>>0)] = value; break;\n      case 'i16': HEAP16[((ptr)>>1)] = value; break;\n      case 'i32': HEAP32[((ptr)>>2)] = value; break;\n      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)] = tempI64[0],HEAP32[(((ptr)+(4))>>2)] = tempI64[1]); break;\n      case 'float': HEAPF32[((ptr)>>2)] = value; break;\n      case 'double': HEAPF64[((ptr)>>3)] = value; break;\n      case '*': HEAPU32[((ptr)>>2)] = value; break;\n      default: abort('invalid type for setValue: ' + type);\n    }\n  }\n\n  var PATH = {isAbs:(path) => path.charAt(0) === '/',splitPath:(filename) => {\n        var splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\n        return splitPathRe.exec(filename).slice(1);\n      },normalizeArray:(parts, allowAboveRoot) => {\n        // if the path tries to go above the root, `up` ends up > 0\n        var up = 0;\n        for (var i = parts.length - 1; i >= 0; i--) {\n          var last = parts[i];\n          if (last === '.') {\n            parts.splice(i, 1);\n          } else if (last === '..') {\n            parts.splice(i, 1);\n            up++;\n          } else if (up) {\n            parts.splice(i, 1);\n            up--;\n          }\n        }\n        // if the path is allowed to go above the root, restore leading ..s\n        if (allowAboveRoot) {\n          for (; up; up--) {\n            parts.unshift('..');\n          }\n        }\n        return parts;\n      },normalize:(path) => {\n        var isAbsolute = PATH.isAbs(path),\n            trailingSlash = path.substr(-1) === '/';\n        // Normalize the path\n        path = PATH.normalizeArray(path.split('/').filter((p) => !!p), !isAbsolute).join('/');\n        if (!path && !isAbsolute) {\n          path = '.';\n        }\n        if (path && trailingSlash) {\n          path += '/';\n        }\n        return (isAbsolute ? '/' : '') + path;\n      },dirname:(path) => {\n        var result = PATH.splitPath(path),\n            root = result[0],\n            dir = result[1];\n        if (!root && !dir) {\n          // No dirname whatsoever\n          return '.';\n        }\n        if (dir) {\n          // It has a dirname, strip trailing slash\n          dir = dir.substr(0, dir.length - 1);\n        }\n        return root + dir;\n      },basename:(path) => {\n        // EMSCRIPTEN return '/'' for '/', not an empty string\n        if (path === '/') return '/';\n        path = PATH.normalize(path);\n        path = path.replace(/\\/$/, \"\");\n        var lastSlash = path.lastIndexOf('/');\n        if (lastSlash === -1) return path;\n        return path.substr(lastSlash+1);\n      },join:function() {\n        var paths = Array.prototype.slice.call(arguments);\n        return PATH.normalize(paths.join('/'));\n      },join2:(l, r) => {\n        return PATH.normalize(l + '/' + r);\n      }};\n  \n  function getRandomDevice() {\n      if (typeof crypto == 'object' && typeof crypto['getRandomValues'] == 'function') {\n        // for modern web browsers\n        var randomBuffer = new Uint8Array(1);\n        return () => { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };\n      } else\n      // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096\n      return () => abort(\"randomDevice\");\n    }\n  \n  \n  \n  var PATH_FS = {resolve:function() {\n        var resolvedPath = '',\n          resolvedAbsolute = false;\n        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n          var path = (i >= 0) ? arguments[i] : FS.cwd();\n          // Skip empty and invalid entries\n          if (typeof path != 'string') {\n            throw new TypeError('Arguments to path.resolve must be strings');\n          } else if (!path) {\n            return ''; // an invalid portion invalidates the whole thing\n          }\n          resolvedPath = path + '/' + resolvedPath;\n          resolvedAbsolute = PATH.isAbs(path);\n        }\n        // At this point the path should be resolved to a full absolute path, but\n        // handle relative paths to be safe (might happen when process.cwd() fails)\n        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter((p) => !!p), !resolvedAbsolute).join('/');\n        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n      },relative:(from, to) => {\n        from = PATH_FS.resolve(from).substr(1);\n        to = PATH_FS.resolve(to).substr(1);\n        function trim(arr) {\n          var start = 0;\n          for (; start < arr.length; start++) {\n            if (arr[start] !== '') break;\n          }\n          var end = arr.length - 1;\n          for (; end >= 0; end--) {\n            if (arr[end] !== '') break;\n          }\n          if (start > end) return [];\n          return arr.slice(start, end - start + 1);\n        }\n        var fromParts = trim(from.split('/'));\n        var toParts = trim(to.split('/'));\n        var length = Math.min(fromParts.length, toParts.length);\n        var samePartsLength = length;\n        for (var i = 0; i < length; i++) {\n          if (fromParts[i] !== toParts[i]) {\n            samePartsLength = i;\n            break;\n          }\n        }\n        var outputParts = [];\n        for (var i = samePartsLength; i < fromParts.length; i++) {\n          outputParts.push('..');\n        }\n        outputParts = outputParts.concat(toParts.slice(samePartsLength));\n        return outputParts.join('/');\n      }};\n  \n  \n  /** @type {function(string, boolean=, number=)} */\n  function intArrayFromString(stringy, dontAddNull, length) {\n    var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;\n    var u8array = new Array(len);\n    var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);\n    if (dontAddNull) u8array.length = numBytesWritten;\n    return u8array;\n  }\n  var TTY = {ttys:[],init:function () {\n        // https://github.com/emscripten-core/emscripten/pull/1555\n        // if (ENVIRONMENT_IS_NODE) {\n        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY\n        //   // device, it always assumes it's a TTY device. because of this, we're forcing\n        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible\n        //   // with text files until FS.init can be refactored.\n        //   process.stdin.setEncoding('utf8');\n        // }\n      },shutdown:function() {\n        // https://github.com/emscripten-core/emscripten/pull/1555\n        // if (ENVIRONMENT_IS_NODE) {\n        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?\n        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation\n        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?\n        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle\n        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call\n        //   process.stdin.pause();\n        // }\n      },register:function(dev, ops) {\n        TTY.ttys[dev] = { input: [], output: [], ops: ops };\n        FS.registerDevice(dev, TTY.stream_ops);\n      },stream_ops:{open:function(stream) {\n          var tty = TTY.ttys[stream.node.rdev];\n          if (!tty) {\n            throw new FS.ErrnoError(43);\n          }\n          stream.tty = tty;\n          stream.seekable = false;\n        },close:function(stream) {\n          // flush any pending line data\n          stream.tty.ops.fsync(stream.tty);\n        },fsync:function(stream) {\n          stream.tty.ops.fsync(stream.tty);\n        },read:function(stream, buffer, offset, length, pos /* ignored */) {\n          if (!stream.tty || !stream.tty.ops.get_char) {\n            throw new FS.ErrnoError(60);\n          }\n          var bytesRead = 0;\n          for (var i = 0; i < length; i++) {\n            var result;\n            try {\n              result = stream.tty.ops.get_char(stream.tty);\n            } catch (e) {\n              throw new FS.ErrnoError(29);\n            }\n            if (result === undefined && bytesRead === 0) {\n              throw new FS.ErrnoError(6);\n            }\n            if (result === null || result === undefined) break;\n            bytesRead++;\n            buffer[offset+i] = result;\n          }\n          if (bytesRead) {\n            stream.node.timestamp = Date.now();\n          }\n          return bytesRead;\n        },write:function(stream, buffer, offset, length, pos) {\n          if (!stream.tty || !stream.tty.ops.put_char) {\n            throw new FS.ErrnoError(60);\n          }\n          try {\n            for (var i = 0; i < length; i++) {\n              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);\n            }\n          } catch (e) {\n            throw new FS.ErrnoError(29);\n          }\n          if (length) {\n            stream.node.timestamp = Date.now();\n          }\n          return i;\n        }},default_tty_ops:{get_char:function(tty) {\n          if (!tty.input.length) {\n            var result = null;\n            if (typeof window != 'undefined' &&\n              typeof window.prompt == 'function') {\n              // Browser.\n              result = window.prompt('Input: ');  // returns null on cancel\n              if (result !== null) {\n                result += '\\n';\n              }\n            } else if (typeof readline == 'function') {\n              // Command line.\n              result = readline();\n              if (result !== null) {\n                result += '\\n';\n              }\n            }\n            if (!result) {\n              return null;\n            }\n            tty.input = intArrayFromString(result, true);\n          }\n          return tty.input.shift();\n        },put_char:function(tty, val) {\n          if (val === null || val === 10) {\n            out(UTF8ArrayToString(tty.output, 0));\n            tty.output = [];\n          } else {\n            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.\n          }\n        },fsync:function(tty) {\n          if (tty.output && tty.output.length > 0) {\n            out(UTF8ArrayToString(tty.output, 0));\n            tty.output = [];\n          }\n        }},default_tty1_ops:{put_char:function(tty, val) {\n          if (val === null || val === 10) {\n            err(UTF8ArrayToString(tty.output, 0));\n            tty.output = [];\n          } else {\n            if (val != 0) tty.output.push(val);\n          }\n        },fsync:function(tty) {\n          if (tty.output && tty.output.length > 0) {\n            err(UTF8ArrayToString(tty.output, 0));\n            tty.output = [];\n          }\n        }}};\n  \n  \n  function zeroMemory(address, size) {\n      HEAPU8.fill(0, address, address + size);\n      return address;\n    }\n  \n  function alignMemory(size, alignment) {\n      return Math.ceil(size / alignment) * alignment;\n    }\n  function mmapAlloc(size) {\n      abort();\n    }\n  var MEMFS = {ops_table:null,mount:function(mount) {\n        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);\n      },createNode:function(parent, name, mode, dev) {\n        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {\n          // no supported\n          throw new FS.ErrnoError(63);\n        }\n        if (!MEMFS.ops_table) {\n          MEMFS.ops_table = {\n            dir: {\n              node: {\n                getattr: MEMFS.node_ops.getattr,\n                setattr: MEMFS.node_ops.setattr,\n                lookup: MEMFS.node_ops.lookup,\n                mknod: MEMFS.node_ops.mknod,\n                rename: MEMFS.node_ops.rename,\n                unlink: MEMFS.node_ops.unlink,\n                rmdir: MEMFS.node_ops.rmdir,\n                readdir: MEMFS.node_ops.readdir,\n                symlink: MEMFS.node_ops.symlink\n              },\n              stream: {\n                llseek: MEMFS.stream_ops.llseek\n              }\n            },\n            file: {\n              node: {\n                getattr: MEMFS.node_ops.getattr,\n                setattr: MEMFS.node_ops.setattr\n              },\n              stream: {\n                llseek: MEMFS.stream_ops.llseek,\n                read: MEMFS.stream_ops.read,\n                write: MEMFS.stream_ops.write,\n                allocate: MEMFS.stream_ops.allocate,\n                mmap: MEMFS.stream_ops.mmap,\n                msync: MEMFS.stream_ops.msync\n              }\n            },\n            link: {\n              node: {\n                getattr: MEMFS.node_ops.getattr,\n                setattr: MEMFS.node_ops.setattr,\n                readlink: MEMFS.node_ops.readlink\n              },\n              stream: {}\n            },\n            chrdev: {\n              node: {\n                getattr: MEMFS.node_ops.getattr,\n                setattr: MEMFS.node_ops.setattr\n              },\n              stream: FS.chrdev_stream_ops\n            }\n          };\n        }\n        var node = FS.createNode(parent, name, mode, dev);\n        if (FS.isDir(node.mode)) {\n          node.node_ops = MEMFS.ops_table.dir.node;\n          node.stream_ops = MEMFS.ops_table.dir.stream;\n          node.contents = {};\n        } else if (FS.isFile(node.mode)) {\n          node.node_ops = MEMFS.ops_table.file.node;\n          node.stream_ops = MEMFS.ops_table.file.stream;\n          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.\n          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred\n          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size\n          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.\n          node.contents = null; \n        } else if (FS.isLink(node.mode)) {\n          node.node_ops = MEMFS.ops_table.link.node;\n          node.stream_ops = MEMFS.ops_table.link.stream;\n        } else if (FS.isChrdev(node.mode)) {\n          node.node_ops = MEMFS.ops_table.chrdev.node;\n          node.stream_ops = MEMFS.ops_table.chrdev.stream;\n        }\n        node.timestamp = Date.now();\n        // add the new node to the parent\n        if (parent) {\n          parent.contents[name] = node;\n          parent.timestamp = node.timestamp;\n        }\n        return node;\n      },getFileDataAsTypedArray:function(node) {\n        if (!node.contents) return new Uint8Array(0);\n        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.\n        return new Uint8Array(node.contents);\n      },expandFileStorage:function(node, newCapacity) {\n        var prevCapacity = node.contents ? node.contents.length : 0;\n        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.\n        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.\n        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to\n        // avoid overshooting the allocation cap by a very large margin.\n        var CAPACITY_DOUBLING_MAX = 1024 * 1024;\n        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);\n        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.\n        var oldContents = node.contents;\n        node.contents = new Uint8Array(newCapacity); // Allocate new storage.\n        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.\n      },resizeFileStorage:function(node, newSize) {\n        if (node.usedBytes == newSize) return;\n        if (newSize == 0) {\n          node.contents = null; // Fully decommit when requesting a resize to zero.\n          node.usedBytes = 0;\n        } else {\n          var oldContents = node.contents;\n          node.contents = new Uint8Array(newSize); // Allocate new storage.\n          if (oldContents) {\n            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.\n          }\n          node.usedBytes = newSize;\n        }\n      },node_ops:{getattr:function(node) {\n          var attr = {};\n          // device numbers reuse inode numbers.\n          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;\n          attr.ino = node.id;\n          attr.mode = node.mode;\n          attr.nlink = 1;\n          attr.uid = 0;\n          attr.gid = 0;\n          attr.rdev = node.rdev;\n          if (FS.isDir(node.mode)) {\n            attr.size = 4096;\n          } else if (FS.isFile(node.mode)) {\n            attr.size = node.usedBytes;\n          } else if (FS.isLink(node.mode)) {\n            attr.size = node.link.length;\n          } else {\n            attr.size = 0;\n          }\n          attr.atime = new Date(node.timestamp);\n          attr.mtime = new Date(node.timestamp);\n          attr.ctime = new Date(node.timestamp);\n          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),\n          //       but this is not required by the standard.\n          attr.blksize = 4096;\n          attr.blocks = Math.ceil(attr.size / attr.blksize);\n          return attr;\n        },setattr:function(node, attr) {\n          if (attr.mode !== undefined) {\n            node.mode = attr.mode;\n          }\n          if (attr.timestamp !== undefined) {\n            node.timestamp = attr.timestamp;\n          }\n          if (attr.size !== undefined) {\n            MEMFS.resizeFileStorage(node, attr.size);\n          }\n        },lookup:function(parent, name) {\n          throw FS.genericErrors[44];\n        },mknod:function(parent, name, mode, dev) {\n          return MEMFS.createNode(parent, name, mode, dev);\n        },rename:function(old_node, new_dir, new_name) {\n          // if we're overwriting a directory at new_name, make sure it's empty.\n          if (FS.isDir(old_node.mode)) {\n            var new_node;\n            try {\n              new_node = FS.lookupNode(new_dir, new_name);\n            } catch (e) {\n            }\n            if (new_node) {\n              for (var i in new_node.contents) {\n                throw new FS.ErrnoError(55);\n              }\n            }\n          }\n          // do the internal rewiring\n          delete old_node.parent.contents[old_node.name];\n          old_node.parent.timestamp = Date.now()\n          old_node.name = new_name;\n          new_dir.contents[new_name] = old_node;\n          new_dir.timestamp = old_node.parent.timestamp;\n          old_node.parent = new_dir;\n        },unlink:function(parent, name) {\n          delete parent.contents[name];\n          parent.timestamp = Date.now();\n        },rmdir:function(parent, name) {\n          var node = FS.lookupNode(parent, name);\n          for (var i in node.contents) {\n            throw new FS.ErrnoError(55);\n          }\n          delete parent.contents[name];\n          parent.timestamp = Date.now();\n        },readdir:function(node) {\n          var entries = ['.', '..'];\n          for (var key in node.contents) {\n            if (!node.contents.hasOwnProperty(key)) {\n              continue;\n            }\n            entries.push(key);\n          }\n          return entries;\n        },symlink:function(parent, newname, oldpath) {\n          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);\n          node.link = oldpath;\n          return node;\n        },readlink:function(node) {\n          if (!FS.isLink(node.mode)) {\n            throw new FS.ErrnoError(28);\n          }\n          return node.link;\n        }},stream_ops:{read:function(stream, buffer, offset, length, position) {\n          var contents = stream.node.contents;\n          if (position >= stream.node.usedBytes) return 0;\n          var size = Math.min(stream.node.usedBytes - position, length);\n          if (size > 8 && contents.subarray) { // non-trivial, and typed array\n            buffer.set(contents.subarray(position, position + size), offset);\n          } else {\n            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];\n          }\n          return size;\n        },write:function(stream, buffer, offset, length, position, canOwn) {\n          // If the buffer is located in main memory (HEAP), and if\n          // memory can grow, we can't hold on to references of the\n          // memory buffer, as they may get invalidated. That means we\n          // need to do copy its contents.\n          if (buffer.buffer === HEAP8.buffer) {\n            canOwn = false;\n          }\n  \n          if (!length) return 0;\n          var node = stream.node;\n          node.timestamp = Date.now();\n  \n          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?\n            if (canOwn) {\n              node.contents = buffer.subarray(offset, offset + length);\n              node.usedBytes = length;\n              return length;\n            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.\n              node.contents = buffer.slice(offset, offset + length);\n              node.usedBytes = length;\n              return length;\n            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?\n              node.contents.set(buffer.subarray(offset, offset + length), position);\n              return length;\n            }\n          }\n  \n          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.\n          MEMFS.expandFileStorage(node, position+length);\n          if (node.contents.subarray && buffer.subarray) {\n            // Use typed array write which is available.\n            node.contents.set(buffer.subarray(offset, offset + length), position);\n          } else {\n            for (var i = 0; i < length; i++) {\n             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.\n            }\n          }\n          node.usedBytes = Math.max(node.usedBytes, position + length);\n          return length;\n        },llseek:function(stream, offset, whence) {\n          var position = offset;\n          if (whence === 1) {\n            position += stream.position;\n          } else if (whence === 2) {\n            if (FS.isFile(stream.node.mode)) {\n              position += stream.node.usedBytes;\n            }\n          }\n          if (position < 0) {\n            throw new FS.ErrnoError(28);\n          }\n          return position;\n        },allocate:function(stream, offset, length) {\n          MEMFS.expandFileStorage(stream.node, offset + length);\n          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);\n        },mmap:function(stream, length, position, prot, flags) {\n          if (!FS.isFile(stream.node.mode)) {\n            throw new FS.ErrnoError(43);\n          }\n          var ptr;\n          var allocated;\n          var contents = stream.node.contents;\n          // Only make a new copy when MAP_PRIVATE is specified.\n          if (!(flags & 2) && contents.buffer === HEAP8.buffer) {\n            // We can't emulate MAP_SHARED when the file is not backed by the\n            // buffer we're mapping to (e.g. the HEAP buffer).\n            allocated = false;\n            ptr = contents.byteOffset;\n          } else {\n            // Try to avoid unnecessary slices.\n            if (position > 0 || position + length < contents.length) {\n              if (contents.subarray) {\n                contents = contents.subarray(position, position + length);\n              } else {\n                contents = Array.prototype.slice.call(contents, position, position + length);\n              }\n            }\n            allocated = true;\n            ptr = mmapAlloc(length);\n            if (!ptr) {\n              throw new FS.ErrnoError(48);\n            }\n            HEAP8.set(contents, ptr);\n          }\n          return { ptr: ptr, allocated: allocated };\n        },msync:function(stream, buffer, offset, length, mmapFlags) {\n          MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);\n          // should we check if bytesWritten and length are the same?\n          return 0;\n        }}};\n  \n  /** @param {boolean=} noRunDep */\n  function asyncLoad(url, onload, onerror, noRunDep) {\n      var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';\n      readAsync(url, (arrayBuffer) => {\n        assert(arrayBuffer, 'Loading data file \"' + url + '\" failed (no arrayBuffer).');\n        onload(new Uint8Array(arrayBuffer));\n        if (dep) removeRunDependency(dep);\n      }, (event) => {\n        if (onerror) {\n          onerror();\n        } else {\n          throw 'Loading data file \"' + url + '\" failed.';\n        }\n      });\n      if (dep) addRunDependency(dep);\n    }\n  \n  var FS = {root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:\"/\",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:(path, opts = {}) => {\n        path = PATH_FS.resolve(path);\n  \n        if (!path) return { path: '', node: null };\n  \n        var defaults = {\n          follow_mount: true,\n          recurse_count: 0\n        };\n        opts = Object.assign(defaults, opts)\n  \n        if (opts.recurse_count > 8) {  // max recursive lookup of 8\n          throw new FS.ErrnoError(32);\n        }\n  \n        // split the absolute path\n        var parts = path.split('/').filter((p) => !!p);\n  \n        // start at the root\n        var current = FS.root;\n        var current_path = '/';\n  \n        for (var i = 0; i < parts.length; i++) {\n          var islast = (i === parts.length-1);\n          if (islast && opts.parent) {\n            // stop resolving\n            break;\n          }\n  \n          current = FS.lookupNode(current, parts[i]);\n          current_path = PATH.join2(current_path, parts[i]);\n  \n          // jump to the mount's root node if this is a mountpoint\n          if (FS.isMountpoint(current)) {\n            if (!islast || (islast && opts.follow_mount)) {\n              current = current.mounted.root;\n            }\n          }\n  \n          // by default, lookupPath will not follow a symlink if it is the final path component.\n          // setting opts.follow = true will override this behavior.\n          if (!islast || opts.follow) {\n            var count = 0;\n            while (FS.isLink(current.mode)) {\n              var link = FS.readlink(current_path);\n              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);\n  \n              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count + 1 });\n              current = lookup.node;\n  \n              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).\n                throw new FS.ErrnoError(32);\n              }\n            }\n          }\n        }\n  \n        return { path: current_path, node: current };\n      },getPath:(node) => {\n        var path;\n        while (true) {\n          if (FS.isRoot(node)) {\n            var mount = node.mount.mountpoint;\n            if (!path) return mount;\n            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;\n          }\n          path = path ? node.name + '/' + path : node.name;\n          node = node.parent;\n        }\n      },hashName:(parentid, name) => {\n        var hash = 0;\n  \n        for (var i = 0; i < name.length; i++) {\n          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;\n        }\n        return ((parentid + hash) >>> 0) % FS.nameTable.length;\n      },hashAddNode:(node) => {\n        var hash = FS.hashName(node.parent.id, node.name);\n        node.name_next = FS.nameTable[hash];\n        FS.nameTable[hash] = node;\n      },hashRemoveNode:(node) => {\n        var hash = FS.hashName(node.parent.id, node.name);\n        if (FS.nameTable[hash] === node) {\n          FS.nameTable[hash] = node.name_next;\n        } else {\n          var current = FS.nameTable[hash];\n          while (current) {\n            if (current.name_next === node) {\n              current.name_next = node.name_next;\n              break;\n            }\n            current = current.name_next;\n          }\n        }\n      },lookupNode:(parent, name) => {\n        var errCode = FS.mayLookup(parent);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode, parent);\n        }\n        var hash = FS.hashName(parent.id, name);\n        for (var node = FS.nameTable[hash]; node; node = node.name_next) {\n          var nodeName = node.name;\n          if (node.parent.id === parent.id && nodeName === name) {\n            return node;\n          }\n        }\n        // if we failed to find it in the cache, call into the VFS\n        return FS.lookup(parent, name);\n      },createNode:(parent, name, mode, rdev) => {\n        var node = new FS.FSNode(parent, name, mode, rdev);\n  \n        FS.hashAddNode(node);\n  \n        return node;\n      },destroyNode:(node) => {\n        FS.hashRemoveNode(node);\n      },isRoot:(node) => {\n        return node === node.parent;\n      },isMountpoint:(node) => {\n        return !!node.mounted;\n      },isFile:(mode) => {\n        return (mode & 61440) === 32768;\n      },isDir:(mode) => {\n        return (mode & 61440) === 16384;\n      },isLink:(mode) => {\n        return (mode & 61440) === 40960;\n      },isChrdev:(mode) => {\n        return (mode & 61440) === 8192;\n      },isBlkdev:(mode) => {\n        return (mode & 61440) === 24576;\n      },isFIFO:(mode) => {\n        return (mode & 61440) === 4096;\n      },isSocket:(mode) => {\n        return (mode & 49152) === 49152;\n      },flagModes:{\"r\":0,\"r+\":2,\"w\":577,\"w+\":578,\"a\":1089,\"a+\":1090},modeStringToFlags:(str) => {\n        var flags = FS.flagModes[str];\n        if (typeof flags == 'undefined') {\n          throw new Error('Unknown file open mode: ' + str);\n        }\n        return flags;\n      },flagsToPermissionString:(flag) => {\n        var perms = ['r', 'w', 'rw'][flag & 3];\n        if ((flag & 512)) {\n          perms += 'w';\n        }\n        return perms;\n      },nodePermissions:(node, perms) => {\n        if (FS.ignorePermissions) {\n          return 0;\n        }\n        // return 0 if any user, group or owner bits are set.\n        if (perms.includes('r') && !(node.mode & 292)) {\n          return 2;\n        } else if (perms.includes('w') && !(node.mode & 146)) {\n          return 2;\n        } else if (perms.includes('x') && !(node.mode & 73)) {\n          return 2;\n        }\n        return 0;\n      },mayLookup:(dir) => {\n        var errCode = FS.nodePermissions(dir, 'x');\n        if (errCode) return errCode;\n        if (!dir.node_ops.lookup) return 2;\n        return 0;\n      },mayCreate:(dir, name) => {\n        try {\n          var node = FS.lookupNode(dir, name);\n          return 20;\n        } catch (e) {\n        }\n        return FS.nodePermissions(dir, 'wx');\n      },mayDelete:(dir, name, isdir) => {\n        var node;\n        try {\n          node = FS.lookupNode(dir, name);\n        } catch (e) {\n          return e.errno;\n        }\n        var errCode = FS.nodePermissions(dir, 'wx');\n        if (errCode) {\n          return errCode;\n        }\n        if (isdir) {\n          if (!FS.isDir(node.mode)) {\n            return 54;\n          }\n          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {\n            return 10;\n          }\n        } else {\n          if (FS.isDir(node.mode)) {\n            return 31;\n          }\n        }\n        return 0;\n      },mayOpen:(node, flags) => {\n        if (!node) {\n          return 44;\n        }\n        if (FS.isLink(node.mode)) {\n          return 32;\n        } else if (FS.isDir(node.mode)) {\n          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write\n              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)\n            return 31;\n          }\n        }\n        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));\n      },MAX_OPEN_FDS:4096,nextfd:(fd_start = 0, fd_end = FS.MAX_OPEN_FDS) => {\n        for (var fd = fd_start; fd <= fd_end; fd++) {\n          if (!FS.streams[fd]) {\n            return fd;\n          }\n        }\n        throw new FS.ErrnoError(33);\n      },getStream:(fd) => FS.streams[fd],createStream:(stream, fd_start, fd_end) => {\n        if (!FS.FSStream) {\n          FS.FSStream = /** @constructor */ function() {\n            this.shared = { };\n          };\n          FS.FSStream.prototype = {};\n          Object.defineProperties(FS.FSStream.prototype, {\n            object: {\n              /** @this {FS.FSStream} */\n              get: function() { return this.node; },\n              /** @this {FS.FSStream} */\n              set: function(val) { this.node = val; }\n            },\n            isRead: {\n              /** @this {FS.FSStream} */\n              get: function() { return (this.flags & 2097155) !== 1; }\n            },\n            isWrite: {\n              /** @this {FS.FSStream} */\n              get: function() { return (this.flags & 2097155) !== 0; }\n            },\n            isAppend: {\n              /** @this {FS.FSStream} */\n              get: function() { return (this.flags & 1024); }\n            },\n            flags: {\n              /** @this {FS.FSStream} */\n              get: function() { return this.shared.flags; },\n              /** @this {FS.FSStream} */\n              set: function(val) { this.shared.flags = val; },\n            },\n            position : {\n              /** @this {FS.FSStream} */\n              get: function() { return this.shared.position; },\n              /** @this {FS.FSStream} */\n              set: function(val) { this.shared.position = val; },\n            },\n          });\n        }\n        // clone it, so we can return an instance of FSStream\n        stream = Object.assign(new FS.FSStream(), stream);\n        var fd = FS.nextfd(fd_start, fd_end);\n        stream.fd = fd;\n        FS.streams[fd] = stream;\n        return stream;\n      },closeStream:(fd) => {\n        FS.streams[fd] = null;\n      },chrdev_stream_ops:{open:(stream) => {\n          var device = FS.getDevice(stream.node.rdev);\n          // override node's stream ops with the device's\n          stream.stream_ops = device.stream_ops;\n          // forward the open call\n          if (stream.stream_ops.open) {\n            stream.stream_ops.open(stream);\n          }\n        },llseek:() => {\n          throw new FS.ErrnoError(70);\n        }},major:(dev) => ((dev) >> 8),minor:(dev) => ((dev) & 0xff),makedev:(ma, mi) => ((ma) << 8 | (mi)),registerDevice:(dev, ops) => {\n        FS.devices[dev] = { stream_ops: ops };\n      },getDevice:(dev) => FS.devices[dev],getMounts:(mount) => {\n        var mounts = [];\n        var check = [mount];\n  \n        while (check.length) {\n          var m = check.pop();\n  \n          mounts.push(m);\n  \n          check.push.apply(check, m.mounts);\n        }\n  \n        return mounts;\n      },syncfs:(populate, callback) => {\n        if (typeof populate == 'function') {\n          callback = populate;\n          populate = false;\n        }\n  \n        FS.syncFSRequests++;\n  \n        if (FS.syncFSRequests > 1) {\n          err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');\n        }\n  \n        var mounts = FS.getMounts(FS.root.mount);\n        var completed = 0;\n  \n        function doCallback(errCode) {\n          FS.syncFSRequests--;\n          return callback(errCode);\n        }\n  \n        function done(errCode) {\n          if (errCode) {\n            if (!done.errored) {\n              done.errored = true;\n              return doCallback(errCode);\n            }\n            return;\n          }\n          if (++completed >= mounts.length) {\n            doCallback(null);\n          }\n        };\n  \n        // sync all mounts\n        mounts.forEach((mount) => {\n          if (!mount.type.syncfs) {\n            return done(null);\n          }\n          mount.type.syncfs(mount, populate, done);\n        });\n      },mount:(type, opts, mountpoint) => {\n        var root = mountpoint === '/';\n        var pseudo = !mountpoint;\n        var node;\n  \n        if (root && FS.root) {\n          throw new FS.ErrnoError(10);\n        } else if (!root && !pseudo) {\n          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });\n  \n          mountpoint = lookup.path;  // use the absolute path\n          node = lookup.node;\n  \n          if (FS.isMountpoint(node)) {\n            throw new FS.ErrnoError(10);\n          }\n  \n          if (!FS.isDir(node.mode)) {\n            throw new FS.ErrnoError(54);\n          }\n        }\n  \n        var mount = {\n          type: type,\n          opts: opts,\n          mountpoint: mountpoint,\n          mounts: []\n        };\n  \n        // create a root node for the fs\n        var mountRoot = type.mount(mount);\n        mountRoot.mount = mount;\n        mount.root = mountRoot;\n  \n        if (root) {\n          FS.root = mountRoot;\n        } else if (node) {\n          // set as a mountpoint\n          node.mounted = mount;\n  \n          // add the new mount to the current mount's children\n          if (node.mount) {\n            node.mount.mounts.push(mount);\n          }\n        }\n  \n        return mountRoot;\n      },unmount:(mountpoint) => {\n        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });\n  \n        if (!FS.isMountpoint(lookup.node)) {\n          throw new FS.ErrnoError(28);\n        }\n  \n        // destroy the nodes for this mount, and all its child mounts\n        var node = lookup.node;\n        var mount = node.mounted;\n        var mounts = FS.getMounts(mount);\n  \n        Object.keys(FS.nameTable).forEach((hash) => {\n          var current = FS.nameTable[hash];\n  \n          while (current) {\n            var next = current.name_next;\n  \n            if (mounts.includes(current.mount)) {\n              FS.destroyNode(current);\n            }\n  \n            current = next;\n          }\n        });\n  \n        // no longer a mountpoint\n        node.mounted = null;\n  \n        // remove this mount from the child mounts\n        var idx = node.mount.mounts.indexOf(mount);\n        node.mount.mounts.splice(idx, 1);\n      },lookup:(parent, name) => {\n        return parent.node_ops.lookup(parent, name);\n      },mknod:(path, mode, dev) => {\n        var lookup = FS.lookupPath(path, { parent: true });\n        var parent = lookup.node;\n        var name = PATH.basename(path);\n        if (!name || name === '.' || name === '..') {\n          throw new FS.ErrnoError(28);\n        }\n        var errCode = FS.mayCreate(parent, name);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.mknod) {\n          throw new FS.ErrnoError(63);\n        }\n        return parent.node_ops.mknod(parent, name, mode, dev);\n      },create:(path, mode) => {\n        mode = mode !== undefined ? mode : 438 /* 0666 */;\n        mode &= 4095;\n        mode |= 32768;\n        return FS.mknod(path, mode, 0);\n      },mkdir:(path, mode) => {\n        mode = mode !== undefined ? mode : 511 /* 0777 */;\n        mode &= 511 | 512;\n        mode |= 16384;\n        return FS.mknod(path, mode, 0);\n      },mkdirTree:(path, mode) => {\n        var dirs = path.split('/');\n        var d = '';\n        for (var i = 0; i < dirs.length; ++i) {\n          if (!dirs[i]) continue;\n          d += '/' + dirs[i];\n          try {\n            FS.mkdir(d, mode);\n          } catch(e) {\n            if (e.errno != 20) throw e;\n          }\n        }\n      },mkdev:(path, mode, dev) => {\n        if (typeof dev == 'undefined') {\n          dev = mode;\n          mode = 438 /* 0666 */;\n        }\n        mode |= 8192;\n        return FS.mknod(path, mode, dev);\n      },symlink:(oldpath, newpath) => {\n        if (!PATH_FS.resolve(oldpath)) {\n          throw new FS.ErrnoError(44);\n        }\n        var lookup = FS.lookupPath(newpath, { parent: true });\n        var parent = lookup.node;\n        if (!parent) {\n          throw new FS.ErrnoError(44);\n        }\n        var newname = PATH.basename(newpath);\n        var errCode = FS.mayCreate(parent, newname);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.symlink) {\n          throw new FS.ErrnoError(63);\n        }\n        return parent.node_ops.symlink(parent, newname, oldpath);\n      },rename:(old_path, new_path) => {\n        var old_dirname = PATH.dirname(old_path);\n        var new_dirname = PATH.dirname(new_path);\n        var old_name = PATH.basename(old_path);\n        var new_name = PATH.basename(new_path);\n        // parents must exist\n        var lookup, old_dir, new_dir;\n  \n        // let the errors from non existant directories percolate up\n        lookup = FS.lookupPath(old_path, { parent: true });\n        old_dir = lookup.node;\n        lookup = FS.lookupPath(new_path, { parent: true });\n        new_dir = lookup.node;\n  \n        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);\n        // need to be part of the same mount\n        if (old_dir.mount !== new_dir.mount) {\n          throw new FS.ErrnoError(75);\n        }\n        // source must exist\n        var old_node = FS.lookupNode(old_dir, old_name);\n        // old path should not be an ancestor of the new path\n        var relative = PATH_FS.relative(old_path, new_dirname);\n        if (relative.charAt(0) !== '.') {\n          throw new FS.ErrnoError(28);\n        }\n        // new path should not be an ancestor of the old path\n        relative = PATH_FS.relative(new_path, old_dirname);\n        if (relative.charAt(0) !== '.') {\n          throw new FS.ErrnoError(55);\n        }\n        // see if the new path already exists\n        var new_node;\n        try {\n          new_node = FS.lookupNode(new_dir, new_name);\n        } catch (e) {\n          // not fatal\n        }\n        // early out if nothing needs to change\n        if (old_node === new_node) {\n          return;\n        }\n        // we'll need to delete the old entry\n        var isdir = FS.isDir(old_node.mode);\n        var errCode = FS.mayDelete(old_dir, old_name, isdir);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        // need delete permissions if we'll be overwriting.\n        // need create permissions if new doesn't already exist.\n        errCode = new_node ?\n          FS.mayDelete(new_dir, new_name, isdir) :\n          FS.mayCreate(new_dir, new_name);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!old_dir.node_ops.rename) {\n          throw new FS.ErrnoError(63);\n        }\n        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {\n          throw new FS.ErrnoError(10);\n        }\n        // if we are going to change the parent, check write permissions\n        if (new_dir !== old_dir) {\n          errCode = FS.nodePermissions(old_dir, 'w');\n          if (errCode) {\n            throw new FS.ErrnoError(errCode);\n          }\n        }\n        // remove the node from the lookup hash\n        FS.hashRemoveNode(old_node);\n        // do the underlying fs rename\n        try {\n          old_dir.node_ops.rename(old_node, new_dir, new_name);\n        } catch (e) {\n          throw e;\n        } finally {\n          // add the node back to the hash (in case node_ops.rename\n          // changed its name)\n          FS.hashAddNode(old_node);\n        }\n      },rmdir:(path) => {\n        var lookup = FS.lookupPath(path, { parent: true });\n        var parent = lookup.node;\n        var name = PATH.basename(path);\n        var node = FS.lookupNode(parent, name);\n        var errCode = FS.mayDelete(parent, name, true);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.rmdir) {\n          throw new FS.ErrnoError(63);\n        }\n        if (FS.isMountpoint(node)) {\n          throw new FS.ErrnoError(10);\n        }\n        parent.node_ops.rmdir(parent, name);\n        FS.destroyNode(node);\n      },readdir:(path) => {\n        var lookup = FS.lookupPath(path, { follow: true });\n        var node = lookup.node;\n        if (!node.node_ops.readdir) {\n          throw new FS.ErrnoError(54);\n        }\n        return node.node_ops.readdir(node);\n      },unlink:(path) => {\n        var lookup = FS.lookupPath(path, { parent: true });\n        var parent = lookup.node;\n        if (!parent) {\n          throw new FS.ErrnoError(44);\n        }\n        var name = PATH.basename(path);\n        var node = FS.lookupNode(parent, name);\n        var errCode = FS.mayDelete(parent, name, false);\n        if (errCode) {\n          // According to POSIX, we should map EISDIR to EPERM, but\n          // we instead do what Linux does (and we must, as we use\n          // the musl linux libc).\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.unlink) {\n          throw new FS.ErrnoError(63);\n        }\n        if (FS.isMountpoint(node)) {\n          throw new FS.ErrnoError(10);\n        }\n        parent.node_ops.unlink(parent, name);\n        FS.destroyNode(node);\n      },readlink:(path) => {\n        var lookup = FS.lookupPath(path);\n        var link = lookup.node;\n        if (!link) {\n          throw new FS.ErrnoError(44);\n        }\n        if (!link.node_ops.readlink) {\n          throw new FS.ErrnoError(28);\n        }\n        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));\n      },stat:(path, dontFollow) => {\n        var lookup = FS.lookupPath(path, { follow: !dontFollow });\n        var node = lookup.node;\n        if (!node) {\n          throw new FS.ErrnoError(44);\n        }\n        if (!node.node_ops.getattr) {\n          throw new FS.ErrnoError(63);\n        }\n        return node.node_ops.getattr(node);\n      },lstat:(path) => {\n        return FS.stat(path, true);\n      },chmod:(path, mode, dontFollow) => {\n        var node;\n        if (typeof path == 'string') {\n          var lookup = FS.lookupPath(path, { follow: !dontFollow });\n          node = lookup.node;\n        } else {\n          node = path;\n        }\n        if (!node.node_ops.setattr) {\n          throw new FS.ErrnoError(63);\n        }\n        node.node_ops.setattr(node, {\n          mode: (mode & 4095) | (node.mode & ~4095),\n          timestamp: Date.now()\n        });\n      },lchmod:(path, mode) => {\n        FS.chmod(path, mode, true);\n      },fchmod:(fd, mode) => {\n        var stream = FS.getStream(fd);\n        if (!stream) {\n          throw new FS.ErrnoError(8);\n        }\n        FS.chmod(stream.node, mode);\n      },chown:(path, uid, gid, dontFollow) => {\n        var node;\n        if (typeof path == 'string') {\n          var lookup = FS.lookupPath(path, { follow: !dontFollow });\n          node = lookup.node;\n        } else {\n          node = path;\n        }\n        if (!node.node_ops.setattr) {\n          throw new FS.ErrnoError(63);\n        }\n        node.node_ops.setattr(node, {\n          timestamp: Date.now()\n          // we ignore the uid / gid for now\n        });\n      },lchown:(path, uid, gid) => {\n        FS.chown(path, uid, gid, true);\n      },fchown:(fd, uid, gid) => {\n        var stream = FS.getStream(fd);\n        if (!stream) {\n          throw new FS.ErrnoError(8);\n        }\n        FS.chown(stream.node, uid, gid);\n      },truncate:(path, len) => {\n        if (len < 0) {\n          throw new FS.ErrnoError(28);\n        }\n        var node;\n        if (typeof path == 'string') {\n          var lookup = FS.lookupPath(path, { follow: true });\n          node = lookup.node;\n        } else {\n          node = path;\n        }\n        if (!node.node_ops.setattr) {\n          throw new FS.ErrnoError(63);\n        }\n        if (FS.isDir(node.mode)) {\n          throw new FS.ErrnoError(31);\n        }\n        if (!FS.isFile(node.mode)) {\n          throw new FS.ErrnoError(28);\n        }\n        var errCode = FS.nodePermissions(node, 'w');\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        node.node_ops.setattr(node, {\n          size: len,\n          timestamp: Date.now()\n        });\n      },ftruncate:(fd, len) => {\n        var stream = FS.getStream(fd);\n        if (!stream) {\n          throw new FS.ErrnoError(8);\n        }\n        if ((stream.flags & 2097155) === 0) {\n          throw new FS.ErrnoError(28);\n        }\n        FS.truncate(stream.node, len);\n      },utime:(path, atime, mtime) => {\n        var lookup = FS.lookupPath(path, { follow: true });\n        var node = lookup.node;\n        node.node_ops.setattr(node, {\n          timestamp: Math.max(atime, mtime)\n        });\n      },open:(path, flags, mode) => {\n        if (path === \"\") {\n          throw new FS.ErrnoError(44);\n        }\n        flags = typeof flags == 'string' ? FS.modeStringToFlags(flags) : flags;\n        mode = typeof mode == 'undefined' ? 438 /* 0666 */ : mode;\n        if ((flags & 64)) {\n          mode = (mode & 4095) | 32768;\n        } else {\n          mode = 0;\n        }\n        var node;\n        if (typeof path == 'object') {\n          node = path;\n        } else {\n          path = PATH.normalize(path);\n          try {\n            var lookup = FS.lookupPath(path, {\n              follow: !(flags & 131072)\n            });\n            node = lookup.node;\n          } catch (e) {\n            // ignore\n          }\n        }\n        // perhaps we need to create the node\n        var created = false;\n        if ((flags & 64)) {\n          if (node) {\n            // if O_CREAT and O_EXCL are set, error out if the node already exists\n            if ((flags & 128)) {\n              throw new FS.ErrnoError(20);\n            }\n          } else {\n            // node doesn't exist, try to create it\n            node = FS.mknod(path, mode, 0);\n            created = true;\n          }\n        }\n        if (!node) {\n          throw new FS.ErrnoError(44);\n        }\n        // can't truncate a device\n        if (FS.isChrdev(node.mode)) {\n          flags &= ~512;\n        }\n        // if asked only for a directory, then this must be one\n        if ((flags & 65536) && !FS.isDir(node.mode)) {\n          throw new FS.ErrnoError(54);\n        }\n        // check permissions, if this is not a file we just created now (it is ok to\n        // create and write to a file with read-only permissions; it is read-only\n        // for later use)\n        if (!created) {\n          var errCode = FS.mayOpen(node, flags);\n          if (errCode) {\n            throw new FS.ErrnoError(errCode);\n          }\n        }\n        // do truncation if necessary\n        if ((flags & 512) && !created) {\n          FS.truncate(node, 0);\n        }\n        // we've already handled these, don't pass down to the underlying vfs\n        flags &= ~(128 | 512 | 131072);\n  \n        // register the stream with the filesystem\n        var stream = FS.createStream({\n          node: node,\n          path: FS.getPath(node),  // we want the absolute path to the node\n          flags: flags,\n          seekable: true,\n          position: 0,\n          stream_ops: node.stream_ops,\n          // used by the file family libc calls (fopen, fwrite, ferror, etc.)\n          ungotten: [],\n          error: false\n        });\n        // call the new stream's open function\n        if (stream.stream_ops.open) {\n          stream.stream_ops.open(stream);\n        }\n        if (Module['logReadFiles'] && !(flags & 1)) {\n          if (!FS.readFiles) FS.readFiles = {};\n          if (!(path in FS.readFiles)) {\n            FS.readFiles[path] = 1;\n          }\n        }\n        return stream;\n      },close:(stream) => {\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if (stream.getdents) stream.getdents = null; // free readdir state\n        try {\n          if (stream.stream_ops.close) {\n            stream.stream_ops.close(stream);\n          }\n        } catch (e) {\n          throw e;\n        } finally {\n          FS.closeStream(stream.fd);\n        }\n        stream.fd = null;\n      },isClosed:(stream) => {\n        return stream.fd === null;\n      },llseek:(stream, offset, whence) => {\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if (!stream.seekable || !stream.stream_ops.llseek) {\n          throw new FS.ErrnoError(70);\n        }\n        if (whence != 0 && whence != 1 && whence != 2) {\n          throw new FS.ErrnoError(28);\n        }\n        stream.position = stream.stream_ops.llseek(stream, offset, whence);\n        stream.ungotten = [];\n        return stream.position;\n      },read:(stream, buffer, offset, length, position) => {\n        if (length < 0 || position < 0) {\n          throw new FS.ErrnoError(28);\n        }\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if ((stream.flags & 2097155) === 1) {\n          throw new FS.ErrnoError(8);\n        }\n        if (FS.isDir(stream.node.mode)) {\n          throw new FS.ErrnoError(31);\n        }\n        if (!stream.stream_ops.read) {\n          throw new FS.ErrnoError(28);\n        }\n        var seeking = typeof position != 'undefined';\n        if (!seeking) {\n          position = stream.position;\n        } else if (!stream.seekable) {\n          throw new FS.ErrnoError(70);\n        }\n        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);\n        if (!seeking) stream.position += bytesRead;\n        return bytesRead;\n      },write:(stream, buffer, offset, length, position, canOwn) => {\n        if (length < 0 || position < 0) {\n          throw new FS.ErrnoError(28);\n        }\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if ((stream.flags & 2097155) === 0) {\n          throw new FS.ErrnoError(8);\n        }\n        if (FS.isDir(stream.node.mode)) {\n          throw new FS.ErrnoError(31);\n        }\n        if (!stream.stream_ops.write) {\n          throw new FS.ErrnoError(28);\n        }\n        if (stream.seekable && stream.flags & 1024) {\n          // seek to the end before writing in append mode\n          FS.llseek(stream, 0, 2);\n        }\n        var seeking = typeof position != 'undefined';\n        if (!seeking) {\n          position = stream.position;\n        } else if (!stream.seekable) {\n          throw new FS.ErrnoError(70);\n        }\n        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);\n        if (!seeking) stream.position += bytesWritten;\n        return bytesWritten;\n      },allocate:(stream, offset, length) => {\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if (offset < 0 || length <= 0) {\n          throw new FS.ErrnoError(28);\n        }\n        if ((stream.flags & 2097155) === 0) {\n          throw new FS.ErrnoError(8);\n        }\n        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {\n          throw new FS.ErrnoError(43);\n        }\n        if (!stream.stream_ops.allocate) {\n          throw new FS.ErrnoError(138);\n        }\n        stream.stream_ops.allocate(stream, offset, length);\n      },mmap:(stream, length, position, prot, flags) => {\n        // User requests writing to file (prot & PROT_WRITE != 0).\n        // Checking if we have permissions to write to the file unless\n        // MAP_PRIVATE flag is set. According to POSIX spec it is possible\n        // to write to file opened in read-only mode with MAP_PRIVATE flag,\n        // as all modifications will be visible only in the memory of\n        // the current process.\n        if ((prot & 2) !== 0\n            && (flags & 2) === 0\n            && (stream.flags & 2097155) !== 2) {\n          throw new FS.ErrnoError(2);\n        }\n        if ((stream.flags & 2097155) === 1) {\n          throw new FS.ErrnoError(2);\n        }\n        if (!stream.stream_ops.mmap) {\n          throw new FS.ErrnoError(43);\n        }\n        return stream.stream_ops.mmap(stream, length, position, prot, flags);\n      },msync:(stream, buffer, offset, length, mmapFlags) => {\n        if (!stream.stream_ops.msync) {\n          return 0;\n        }\n        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);\n      },munmap:(stream) => 0,ioctl:(stream, cmd, arg) => {\n        if (!stream.stream_ops.ioctl) {\n          throw new FS.ErrnoError(59);\n        }\n        return stream.stream_ops.ioctl(stream, cmd, arg);\n      },readFile:(path, opts = {}) => {\n        opts.flags = opts.flags || 0;\n        opts.encoding = opts.encoding || 'binary';\n        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {\n          throw new Error('Invalid encoding type \"' + opts.encoding + '\"');\n        }\n        var ret;\n        var stream = FS.open(path, opts.flags);\n        var stat = FS.stat(path);\n        var length = stat.size;\n        var buf = new Uint8Array(length);\n        FS.read(stream, buf, 0, length, 0);\n        if (opts.encoding === 'utf8') {\n          ret = UTF8ArrayToString(buf, 0);\n        } else if (opts.encoding === 'binary') {\n          ret = buf;\n        }\n        FS.close(stream);\n        return ret;\n      },writeFile:(path, data, opts = {}) => {\n        opts.flags = opts.flags || 577;\n        var stream = FS.open(path, opts.flags, opts.mode);\n        if (typeof data == 'string') {\n          var buf = new Uint8Array(lengthBytesUTF8(data)+1);\n          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);\n          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);\n        } else if (ArrayBuffer.isView(data)) {\n          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);\n        } else {\n          throw new Error('Unsupported data type');\n        }\n        FS.close(stream);\n      },cwd:() => FS.currentPath,chdir:(path) => {\n        var lookup = FS.lookupPath(path, { follow: true });\n        if (lookup.node === null) {\n          throw new FS.ErrnoError(44);\n        }\n        if (!FS.isDir(lookup.node.mode)) {\n          throw new FS.ErrnoError(54);\n        }\n        var errCode = FS.nodePermissions(lookup.node, 'x');\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        FS.currentPath = lookup.path;\n      },createDefaultDirectories:() => {\n        FS.mkdir('/tmp');\n        FS.mkdir('/home');\n        FS.mkdir('/home/web_user');\n      },createDefaultDevices:() => {\n        // create /dev\n        FS.mkdir('/dev');\n        // setup /dev/null\n        FS.registerDevice(FS.makedev(1, 3), {\n          read: () => 0,\n          write: (stream, buffer, offset, length, pos) => length,\n        });\n        FS.mkdev('/dev/null', FS.makedev(1, 3));\n        // setup /dev/tty and /dev/tty1\n        // stderr needs to print output using err() rather than out()\n        // so we register a second tty just for it.\n        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);\n        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);\n        FS.mkdev('/dev/tty', FS.makedev(5, 0));\n        FS.mkdev('/dev/tty1', FS.makedev(6, 0));\n        // setup /dev/[u]random\n        var random_device = getRandomDevice();\n        FS.createDevice('/dev', 'random', random_device);\n        FS.createDevice('/dev', 'urandom', random_device);\n        // we're not going to emulate the actual shm device,\n        // just create the tmp dirs that reside in it commonly\n        FS.mkdir('/dev/shm');\n        FS.mkdir('/dev/shm/tmp');\n      },createSpecialDirectories:() => {\n        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the\n        // name of the stream for fd 6 (see test_unistd_ttyname)\n        FS.mkdir('/proc');\n        var proc_self = FS.mkdir('/proc/self');\n        FS.mkdir('/proc/self/fd');\n        FS.mount({\n          mount: () => {\n            var node = FS.createNode(proc_self, 'fd', 16384 | 511 /* 0777 */, 73);\n            node.node_ops = {\n              lookup: (parent, name) => {\n                var fd = +name;\n                var stream = FS.getStream(fd);\n                if (!stream) throw new FS.ErrnoError(8);\n                var ret = {\n                  parent: null,\n                  mount: { mountpoint: 'fake' },\n                  node_ops: { readlink: () => stream.path },\n                };\n                ret.parent = ret; // make it look like a simple root node\n                return ret;\n              }\n            };\n            return node;\n          }\n        }, {}, '/proc/self/fd');\n      },createStandardStreams:() => {\n        // TODO deprecate the old functionality of a single\n        // input / output callback and that utilizes FS.createDevice\n        // and instead require a unique set of stream ops\n  \n        // by default, we symlink the standard streams to the\n        // default tty devices. however, if the standard streams\n        // have been overwritten we create a unique device for\n        // them instead.\n        if (Module['stdin']) {\n          FS.createDevice('/dev', 'stdin', Module['stdin']);\n        } else {\n          FS.symlink('/dev/tty', '/dev/stdin');\n        }\n        if (Module['stdout']) {\n          FS.createDevice('/dev', 'stdout', null, Module['stdout']);\n        } else {\n          FS.symlink('/dev/tty', '/dev/stdout');\n        }\n        if (Module['stderr']) {\n          FS.createDevice('/dev', 'stderr', null, Module['stderr']);\n        } else {\n          FS.symlink('/dev/tty1', '/dev/stderr');\n        }\n  \n        // open default streams for the stdin, stdout and stderr devices\n        var stdin = FS.open('/dev/stdin', 0);\n        var stdout = FS.open('/dev/stdout', 1);\n        var stderr = FS.open('/dev/stderr', 1);\n      },ensureErrnoError:() => {\n        if (FS.ErrnoError) return;\n        FS.ErrnoError = /** @this{Object} */ function ErrnoError(errno, node) {\n          // We set the `name` property to be able to identify `FS.ErrnoError`\n          // - the `name` is a standard ECMA-262 property of error objects. Kind of good to have it anyway.\n          // - when using PROXYFS, an error can come from an underlying FS\n          // as different FS objects have their own FS.ErrnoError each,\n          // the test `err instanceof FS.ErrnoError` won't detect an error coming from another filesystem, causing bugs.\n          // we'll use the reliable test `err.name == \"ErrnoError\"` instead\n          this.name = 'ErrnoError';\n          this.node = node;\n          this.setErrno = /** @this{Object} */ function(errno) {\n            this.errno = errno;\n          };\n          this.setErrno(errno);\n          this.message = 'FS error';\n  \n        };\n        FS.ErrnoError.prototype = new Error();\n        FS.ErrnoError.prototype.constructor = FS.ErrnoError;\n        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)\n        [44].forEach((code) => {\n          FS.genericErrors[code] = new FS.ErrnoError(code);\n          FS.genericErrors[code].stack = '<generic error, no stack>';\n        });\n      },staticInit:() => {\n        FS.ensureErrnoError();\n  \n        FS.nameTable = new Array(4096);\n  \n        FS.mount(MEMFS, {}, '/');\n  \n        FS.createDefaultDirectories();\n        FS.createDefaultDevices();\n        FS.createSpecialDirectories();\n  \n        FS.filesystems = {\n          'MEMFS': MEMFS,\n        };\n      },init:(input, output, error) => {\n        FS.init.initialized = true;\n  \n        FS.ensureErrnoError();\n  \n        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here\n        Module['stdin'] = input || Module['stdin'];\n        Module['stdout'] = output || Module['stdout'];\n        Module['stderr'] = error || Module['stderr'];\n  \n        FS.createStandardStreams();\n      },quit:() => {\n        FS.init.initialized = false;\n        // force-flush all streams, so we get musl std streams printed out\n        // close all of our streams\n        for (var i = 0; i < FS.streams.length; i++) {\n          var stream = FS.streams[i];\n          if (!stream) {\n            continue;\n          }\n          FS.close(stream);\n        }\n      },getMode:(canRead, canWrite) => {\n        var mode = 0;\n        if (canRead) mode |= 292 | 73;\n        if (canWrite) mode |= 146;\n        return mode;\n      },findObject:(path, dontResolveLastLink) => {\n        var ret = FS.analyzePath(path, dontResolveLastLink);\n        if (!ret.exists) {\n          return null;\n        }\n        return ret.object;\n      },analyzePath:(path, dontResolveLastLink) => {\n        // operate from within the context of the symlink's target\n        try {\n          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });\n          path = lookup.path;\n        } catch (e) {\n        }\n        var ret = {\n          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,\n          parentExists: false, parentPath: null, parentObject: null\n        };\n        try {\n          var lookup = FS.lookupPath(path, { parent: true });\n          ret.parentExists = true;\n          ret.parentPath = lookup.path;\n          ret.parentObject = lookup.node;\n          ret.name = PATH.basename(path);\n          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });\n          ret.exists = true;\n          ret.path = lookup.path;\n          ret.object = lookup.node;\n          ret.name = lookup.node.name;\n          ret.isRoot = lookup.path === '/';\n        } catch (e) {\n          ret.error = e.errno;\n        };\n        return ret;\n      },createPath:(parent, path, canRead, canWrite) => {\n        parent = typeof parent == 'string' ? parent : FS.getPath(parent);\n        var parts = path.split('/').reverse();\n        while (parts.length) {\n          var part = parts.pop();\n          if (!part) continue;\n          var current = PATH.join2(parent, part);\n          try {\n            FS.mkdir(current);\n          } catch (e) {\n            // ignore EEXIST\n          }\n          parent = current;\n        }\n        return current;\n      },createFile:(parent, name, properties, canRead, canWrite) => {\n        var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);\n        var mode = FS.getMode(canRead, canWrite);\n        return FS.create(path, mode);\n      },createDataFile:(parent, name, data, canRead, canWrite, canOwn) => {\n        var path = name;\n        if (parent) {\n          parent = typeof parent == 'string' ? parent : FS.getPath(parent);\n          path = name ? PATH.join2(parent, name) : parent;\n        }\n        var mode = FS.getMode(canRead, canWrite);\n        var node = FS.create(path, mode);\n        if (data) {\n          if (typeof data == 'string') {\n            var arr = new Array(data.length);\n            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);\n            data = arr;\n          }\n          // make sure we can write to the file\n          FS.chmod(node, mode | 146);\n          var stream = FS.open(node, 577);\n          FS.write(stream, data, 0, data.length, 0, canOwn);\n          FS.close(stream);\n          FS.chmod(node, mode);\n        }\n        return node;\n      },createDevice:(parent, name, input, output) => {\n        var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);\n        var mode = FS.getMode(!!input, !!output);\n        if (!FS.createDevice.major) FS.createDevice.major = 64;\n        var dev = FS.makedev(FS.createDevice.major++, 0);\n        // Create a fake device that a set of stream ops to emulate\n        // the old behavior.\n        FS.registerDevice(dev, {\n          open: (stream) => {\n            stream.seekable = false;\n          },\n          close: (stream) => {\n            // flush any pending line data\n            if (output && output.buffer && output.buffer.length) {\n              output(10);\n            }\n          },\n          read: (stream, buffer, offset, length, pos /* ignored */) => {\n            var bytesRead = 0;\n            for (var i = 0; i < length; i++) {\n              var result;\n              try {\n                result = input();\n              } catch (e) {\n                throw new FS.ErrnoError(29);\n              }\n              if (result === undefined && bytesRead === 0) {\n                throw new FS.ErrnoError(6);\n              }\n              if (result === null || result === undefined) break;\n              bytesRead++;\n              buffer[offset+i] = result;\n            }\n            if (bytesRead) {\n              stream.node.timestamp = Date.now();\n            }\n            return bytesRead;\n          },\n          write: (stream, buffer, offset, length, pos) => {\n            for (var i = 0; i < length; i++) {\n              try {\n                output(buffer[offset+i]);\n              } catch (e) {\n                throw new FS.ErrnoError(29);\n              }\n            }\n            if (length) {\n              stream.node.timestamp = Date.now();\n            }\n            return i;\n          }\n        });\n        return FS.mkdev(path, mode, dev);\n      },forceLoadFile:(obj) => {\n        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;\n        if (typeof XMLHttpRequest != 'undefined') {\n          throw new Error(\"Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.\");\n        } else if (read_) {\n          // Command-line.\n          try {\n            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as\n            //          read() will try to parse UTF8.\n            obj.contents = intArrayFromString(read_(obj.url), true);\n            obj.usedBytes = obj.contents.length;\n          } catch (e) {\n            throw new FS.ErrnoError(29);\n          }\n        } else {\n          throw new Error('Cannot load without read() or XMLHttpRequest.');\n        }\n      },createLazyFile:(parent, name, url, canRead, canWrite) => {\n        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.\n        /** @constructor */\n        function LazyUint8Array() {\n          this.lengthKnown = false;\n          this.chunks = []; // Loaded chunks. Index is the chunk number\n        }\n        LazyUint8Array.prototype.get = /** @this{Object} */ function LazyUint8Array_get(idx) {\n          if (idx > this.length-1 || idx < 0) {\n            return undefined;\n          }\n          var chunkOffset = idx % this.chunkSize;\n          var chunkNum = (idx / this.chunkSize)|0;\n          return this.getter(chunkNum)[chunkOffset];\n        };\n        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {\n          this.getter = getter;\n        };\n        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {\n          // Find length\n          var xhr = new XMLHttpRequest();\n          xhr.open('HEAD', url, false);\n          xhr.send(null);\n          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error(\"Couldn't load \" + url + \". Status: \" + xhr.status);\n          var datalength = Number(xhr.getResponseHeader(\"Content-length\"));\n          var header;\n          var hasByteServing = (header = xhr.getResponseHeader(\"Accept-Ranges\")) && header === \"bytes\";\n          var usesGzip = (header = xhr.getResponseHeader(\"Content-Encoding\")) && header === \"gzip\";\n  \n          var chunkSize = 1024*1024; // Chunk size in bytes\n  \n          if (!hasByteServing) chunkSize = datalength;\n  \n          // Function to get a range from the remote URL.\n          var doXHR = (from, to) => {\n            if (from > to) throw new Error(\"invalid range (\" + from + \", \" + to + \") or no bytes requested!\");\n            if (to > datalength-1) throw new Error(\"only \" + datalength + \" bytes available! programmer error!\");\n  \n            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.\n            var xhr = new XMLHttpRequest();\n            xhr.open('GET', url, false);\n            if (datalength !== chunkSize) xhr.setRequestHeader(\"Range\", \"bytes=\" + from + \"-\" + to);\n  \n            // Some hints to the browser that we want binary data.\n            xhr.responseType = 'arraybuffer';\n            if (xhr.overrideMimeType) {\n              xhr.overrideMimeType('text/plain; charset=x-user-defined');\n            }\n  \n            xhr.send(null);\n            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error(\"Couldn't load \" + url + \". Status: \" + xhr.status);\n            if (xhr.response !== undefined) {\n              return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));\n            }\n            return intArrayFromString(xhr.responseText || '', true);\n          };\n          var lazyArray = this;\n          lazyArray.setDataGetter((chunkNum) => {\n            var start = chunkNum * chunkSize;\n            var end = (chunkNum+1) * chunkSize - 1; // including this byte\n            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block\n            if (typeof lazyArray.chunks[chunkNum] == 'undefined') {\n              lazyArray.chunks[chunkNum] = doXHR(start, end);\n            }\n            if (typeof lazyArray.chunks[chunkNum] == 'undefined') throw new Error('doXHR failed!');\n            return lazyArray.chunks[chunkNum];\n          });\n  \n          if (usesGzip || !datalength) {\n            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length\n            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file\n            datalength = this.getter(0).length;\n            chunkSize = datalength;\n            out(\"LazyFiles on gzip forces download of the whole file when length is accessed\");\n          }\n  \n          this._length = datalength;\n          this._chunkSize = chunkSize;\n          this.lengthKnown = true;\n        };\n        if (typeof XMLHttpRequest != 'undefined') {\n          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';\n          var lazyArray = new LazyUint8Array();\n          Object.defineProperties(lazyArray, {\n            length: {\n              get: /** @this{Object} */ function() {\n                if (!this.lengthKnown) {\n                  this.cacheLength();\n                }\n                return this._length;\n              }\n            },\n            chunkSize: {\n              get: /** @this{Object} */ function() {\n                if (!this.lengthKnown) {\n                  this.cacheLength();\n                }\n                return this._chunkSize;\n              }\n            }\n          });\n  \n          var properties = { isDevice: false, contents: lazyArray };\n        } else {\n          var properties = { isDevice: false, url: url };\n        }\n  \n        var node = FS.createFile(parent, name, properties, canRead, canWrite);\n        // This is a total hack, but I want to get this lazy file code out of the\n        // core of MEMFS. If we want to keep this lazy file concept I feel it should\n        // be its own thin LAZYFS proxying calls to MEMFS.\n        if (properties.contents) {\n          node.contents = properties.contents;\n        } else if (properties.url) {\n          node.contents = null;\n          node.url = properties.url;\n        }\n        // Add a function that defers querying the file size until it is asked the first time.\n        Object.defineProperties(node, {\n          usedBytes: {\n            get: /** @this {FSNode} */ function() { return this.contents.length; }\n          }\n        });\n        // override each stream op with one that tries to force load the lazy file first\n        var stream_ops = {};\n        var keys = Object.keys(node.stream_ops);\n        keys.forEach((key) => {\n          var fn = node.stream_ops[key];\n          stream_ops[key] = function forceLoadLazyFile() {\n            FS.forceLoadFile(node);\n            return fn.apply(null, arguments);\n          };\n        });\n        function writeChunks(stream, buffer, offset, length, position) {\n          var contents = stream.node.contents;\n          if (position >= contents.length)\n            return 0;\n          var size = Math.min(contents.length - position, length);\n          if (contents.slice) { // normal array\n            for (var i = 0; i < size; i++) {\n              buffer[offset + i] = contents[position + i];\n            }\n          } else {\n            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR\n              buffer[offset + i] = contents.get(position + i);\n            }\n          }\n          return size;\n        }\n        // use a custom read function\n        stream_ops.read = (stream, buffer, offset, length, position) => {\n          FS.forceLoadFile(node);\n          return writeChunks(stream, buffer, offset, length, position)\n        };\n        // use a custom mmap function\n        stream_ops.mmap = (stream, length, position, prot, flags) => {\n          FS.forceLoadFile(node);\n          var ptr = mmapAlloc(length);\n          if (!ptr) {\n            throw new FS.ErrnoError(48);\n          }\n          writeChunks(stream, HEAP8, ptr, length, position);\n          return { ptr: ptr, allocated: true };\n        };\n        node.stream_ops = stream_ops;\n        return node;\n      },createPreloadedFile:(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) => {\n        // TODO we should allow people to just pass in a complete filename instead\n        // of parent and name being that we just join them anyways\n        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;\n        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname\n        function processData(byteArray) {\n          function finish(byteArray) {\n            if (preFinish) preFinish();\n            if (!dontCreateFile) {\n              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);\n            }\n            if (onload) onload();\n            removeRunDependency(dep);\n          }\n          if (Browser.handledByPreloadPlugin(byteArray, fullname, finish, () => {\n            if (onerror) onerror();\n            removeRunDependency(dep);\n          })) {\n            return;\n          }\n          finish(byteArray);\n        }\n        addRunDependency(dep);\n        if (typeof url == 'string') {\n          asyncLoad(url, (byteArray) => processData(byteArray), onerror);\n        } else {\n          processData(url);\n        }\n      },indexedDB:() => {\n        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\n      },DB_NAME:() => {\n        return 'EM_FS_' + window.location.pathname;\n      },DB_VERSION:20,DB_STORE_NAME:\"FILE_DATA\",saveFilesToDB:(paths, onload = (() => {}), onerror = (() => {})) => {\n        var indexedDB = FS.indexedDB();\n        try {\n          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);\n        } catch (e) {\n          return onerror(e);\n        }\n        openRequest.onupgradeneeded = () => {\n          out('creating db');\n          var db = openRequest.result;\n          db.createObjectStore(FS.DB_STORE_NAME);\n        };\n        openRequest.onsuccess = () => {\n          var db = openRequest.result;\n          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');\n          var files = transaction.objectStore(FS.DB_STORE_NAME);\n          var ok = 0, fail = 0, total = paths.length;\n          function finish() {\n            if (fail == 0) onload(); else onerror();\n          }\n          paths.forEach((path) => {\n            var putRequest = files.put(FS.analyzePath(path).object.contents, path);\n            putRequest.onsuccess = () => { ok++; if (ok + fail == total) finish() };\n            putRequest.onerror = () => { fail++; if (ok + fail == total) finish() };\n          });\n          transaction.onerror = onerror;\n        };\n        openRequest.onerror = onerror;\n      },loadFilesFromDB:(paths, onload = (() => {}), onerror = (() => {})) => {\n        var indexedDB = FS.indexedDB();\n        try {\n          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);\n        } catch (e) {\n          return onerror(e);\n        }\n        openRequest.onupgradeneeded = onerror; // no database to load from\n        openRequest.onsuccess = () => {\n          var db = openRequest.result;\n          try {\n            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');\n          } catch(e) {\n            onerror(e);\n            return;\n          }\n          var files = transaction.objectStore(FS.DB_STORE_NAME);\n          var ok = 0, fail = 0, total = paths.length;\n          function finish() {\n            if (fail == 0) onload(); else onerror();\n          }\n          paths.forEach((path) => {\n            var getRequest = files.get(path);\n            getRequest.onsuccess = () => {\n              if (FS.analyzePath(path).exists) {\n                FS.unlink(path);\n              }\n              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);\n              ok++;\n              if (ok + fail == total) finish();\n            };\n            getRequest.onerror = () => { fail++; if (ok + fail == total) finish() };\n          });\n          transaction.onerror = onerror;\n        };\n        openRequest.onerror = onerror;\n      }};\n  var SYSCALLS = {DEFAULT_POLLMASK:5,calculateAt:function(dirfd, path, allowEmpty) {\n        if (PATH.isAbs(path)) {\n          return path;\n        }\n        // relative path\n        var dir;\n        if (dirfd === -100) {\n          dir = FS.cwd();\n        } else {\n          var dirstream = SYSCALLS.getStreamFromFD(dirfd);\n          dir = dirstream.path;\n        }\n        if (path.length == 0) {\n          if (!allowEmpty) {\n            throw new FS.ErrnoError(44);;\n          }\n          return dir;\n        }\n        return PATH.join2(dir, path);\n      },doStat:function(func, path, buf) {\n        try {\n          var stat = func(path);\n        } catch (e) {\n          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {\n            // an error occurred while trying to look up the path; we should just report ENOTDIR\n            return -54;\n          }\n          throw e;\n        }\n        HEAP32[((buf)>>2)] = stat.dev;\n        HEAP32[(((buf)+(8))>>2)] = stat.ino;\n        HEAP32[(((buf)+(12))>>2)] = stat.mode;\n        HEAPU32[(((buf)+(16))>>2)] = stat.nlink;\n        HEAP32[(((buf)+(20))>>2)] = stat.uid;\n        HEAP32[(((buf)+(24))>>2)] = stat.gid;\n        HEAP32[(((buf)+(28))>>2)] = stat.rdev;\n        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)] = tempI64[0],HEAP32[(((buf)+(44))>>2)] = tempI64[1]);\n        HEAP32[(((buf)+(48))>>2)] = 4096;\n        HEAP32[(((buf)+(52))>>2)] = stat.blocks;\n        var atime = stat.atime.getTime();\n        var mtime = stat.mtime.getTime();\n        var ctime = stat.ctime.getTime();\n        (tempI64 = [Math.floor(atime / 1000)>>>0,(tempDouble=Math.floor(atime / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(56))>>2)] = tempI64[0],HEAP32[(((buf)+(60))>>2)] = tempI64[1]);\n        HEAPU32[(((buf)+(64))>>2)] = (atime % 1000) * 1000;\n        (tempI64 = [Math.floor(mtime / 1000)>>>0,(tempDouble=Math.floor(mtime / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(72))>>2)] = tempI64[0],HEAP32[(((buf)+(76))>>2)] = tempI64[1]);\n        HEAPU32[(((buf)+(80))>>2)] = (mtime % 1000) * 1000;\n        (tempI64 = [Math.floor(ctime / 1000)>>>0,(tempDouble=Math.floor(ctime / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(88))>>2)] = tempI64[0],HEAP32[(((buf)+(92))>>2)] = tempI64[1]);\n        HEAPU32[(((buf)+(96))>>2)] = (ctime % 1000) * 1000;\n        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(104))>>2)] = tempI64[0],HEAP32[(((buf)+(108))>>2)] = tempI64[1]);\n        return 0;\n      },doMsync:function(addr, stream, len, flags, offset) {\n        if (!FS.isFile(stream.node.mode)) {\n          throw new FS.ErrnoError(43);\n        }\n        if (flags & 2) {\n          // MAP_PRIVATE calls need not to be synced back to underlying fs\n          return 0;\n        }\n        var buffer = HEAPU8.slice(addr, addr + len);\n        FS.msync(stream, buffer, offset, len, flags);\n      },varargs:undefined,get:function() {\n        SYSCALLS.varargs += 4;\n        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];\n        return ret;\n      },getStr:function(ptr) {\n        var ret = UTF8ToString(ptr);\n        return ret;\n      },getStreamFromFD:function(fd) {\n        var stream = FS.getStream(fd);\n        if (!stream) throw new FS.ErrnoError(8);\n        return stream;\n      }};\n  function ___syscall_chmod(path, mode) {\n  try {\n  \n      path = SYSCALLS.getStr(path);\n      FS.chmod(path, mode);\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n\n  function ___syscall_faccessat(dirfd, path, amode, flags) {\n  try {\n  \n      path = SYSCALLS.getStr(path);\n      path = SYSCALLS.calculateAt(dirfd, path);\n      if (amode & ~7) {\n        // need a valid mode\n        return -28;\n      }\n      var lookup = FS.lookupPath(path, { follow: true });\n      var node = lookup.node;\n      if (!node) {\n        return -44;\n      }\n      var perms = '';\n      if (amode & 4) perms += 'r';\n      if (amode & 2) perms += 'w';\n      if (amode & 1) perms += 'x';\n      if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {\n        return -2;\n      }\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n\n  function ___syscall_fchmod(fd, mode) {\n  try {\n  \n      FS.fchmod(fd, mode);\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n\n  function ___syscall_fchown32(fd, owner, group) {\n  try {\n  \n      FS.fchown(fd, owner, group);\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n\n  function setErrNo(value) {\n      HEAP32[((___errno_location())>>2)] = value;\n      return value;\n    }\n  \n  function ___syscall_fcntl64(fd, cmd, varargs) {\n  SYSCALLS.varargs = varargs;\n  try {\n  \n      var stream = SYSCALLS.getStreamFromFD(fd);\n      switch (cmd) {\n        case 0: {\n          var arg = SYSCALLS.get();\n          if (arg < 0) {\n            return -28;\n          }\n          var newStream;\n          newStream = FS.createStream(stream, arg);\n          return newStream.fd;\n        }\n        case 1:\n        case 2:\n          return 0;  // FD_CLOEXEC makes no sense for a single process.\n        case 3:\n          return stream.flags;\n        case 4: {\n          var arg = SYSCALLS.get();\n          stream.flags |= arg;\n          return 0;\n        }\n        case 5:\n        /* case 5: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {\n          \n          var arg = SYSCALLS.get();\n          var offset = 0;\n          // We're always unlocked.\n          HEAP16[(((arg)+(offset))>>1)] = 2;\n          return 0;\n        }\n        case 6:\n        case 7:\n        /* case 6: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */\n        /* case 7: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */\n          \n          \n          return 0; // Pretend that the locking is successful.\n        case 16:\n        case 8:\n          return -28; // These are for sockets. We don't have them fully implemented yet.\n        case 9:\n          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fcntl() returns that, and we set errno ourselves.\n          setErrNo(28);\n          return -1;\n        default: {\n          return -28;\n        }\n      }\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n\n  function ___syscall_fstat64(fd, buf) {\n  try {\n  \n      var stream = SYSCALLS.getStreamFromFD(fd);\n      return SYSCALLS.doStat(FS.stat, stream.path, buf);\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n\n  var MAX_INT53 = 9007199254740992;\n  \n  var MIN_INT53 = -9007199254740992;\n  function bigintToI53Checked(num) {\n      return (num < MIN_INT53 || num > MAX_INT53) ? NaN : Number(num);\n    }\n  \n  \n  \n  \n  function ___syscall_ftruncate64(fd, /** @type {!BigInt} */ length) {\n  try {\n  \n      length = bigintToI53Checked(length); if (isNaN(length)) return -61;\n      FS.ftruncate(fd, length);\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n\n  function ___syscall_getcwd(buf, size) {\n  try {\n  \n      if (size === 0) return -28;\n      var cwd = FS.cwd();\n      var cwdLengthInBytes = lengthBytesUTF8(cwd) + 1;\n      if (size < cwdLengthInBytes) return -68;\n      stringToUTF8(cwd, buf, size);\n      return cwdLengthInBytes;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n\n  function ___syscall_ioctl(fd, op, varargs) {\n  SYSCALLS.varargs = varargs;\n  try {\n  \n      var stream = SYSCALLS.getStreamFromFD(fd);\n      switch (op) {\n        case 21509:\n        case 21505: {\n          if (!stream.tty) return -59;\n          return 0;\n        }\n        case 21510:\n        case 21511:\n        case 21512:\n        case 21506:\n        case 21507:\n        case 21508: {\n          if (!stream.tty) return -59;\n          return 0; // no-op, not actually adjusting terminal settings\n        }\n        case 21519: {\n          if (!stream.tty) return -59;\n          var argp = SYSCALLS.get();\n          HEAP32[((argp)>>2)] = 0;\n          return 0;\n        }\n        case 21520: {\n          if (!stream.tty) return -59;\n          return -28; // not supported\n        }\n        case 21531: {\n          var argp = SYSCALLS.get();\n          return FS.ioctl(stream, op, argp);\n        }\n        case 21523: {\n          // TODO: in theory we should write to the winsize struct that gets\n          // passed in, but for now musl doesn't read anything on it\n          if (!stream.tty) return -59;\n          return 0;\n        }\n        case 21524: {\n          // TODO: technically, this ioctl call should change the window size.\n          // but, since emscripten doesn't have any concept of a terminal window\n          // yet, we'll just silently throw it away as we do TIOCGWINSZ\n          if (!stream.tty) return -59;\n          return 0;\n        }\n        default: return -28; // not supported\n      }\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n\n  function ___syscall_lstat64(path, buf) {\n  try {\n  \n      path = SYSCALLS.getStr(path);\n      return SYSCALLS.doStat(FS.lstat, path, buf);\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n\n  function ___syscall_mkdirat(dirfd, path, mode) {\n  try {\n  \n      path = SYSCALLS.getStr(path);\n      path = SYSCALLS.calculateAt(dirfd, path);\n      // remove a trailing slash, if one - /a/b/ has basename of '', but\n      // we want to create b in the context of this function\n      path = PATH.normalize(path);\n      if (path[path.length-1] === '/') path = path.substr(0, path.length-1);\n      FS.mkdir(path, mode, 0);\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n\n  function ___syscall_newfstatat(dirfd, path, buf, flags) {\n  try {\n  \n      path = SYSCALLS.getStr(path);\n      var nofollow = flags & 256;\n      var allowEmpty = flags & 4096;\n      flags = flags & (~6400);\n      path = SYSCALLS.calculateAt(dirfd, path, allowEmpty);\n      return SYSCALLS.doStat(nofollow ? FS.lstat : FS.stat, path, buf);\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n\n  function ___syscall_openat(dirfd, path, flags, varargs) {\n  SYSCALLS.varargs = varargs;\n  try {\n  \n      path = SYSCALLS.getStr(path);\n      path = SYSCALLS.calculateAt(dirfd, path);\n      var mode = varargs ? SYSCALLS.get() : 0;\n      return FS.open(path, flags, mode).fd;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n\n  function ___syscall_readlinkat(dirfd, path, buf, bufsize) {\n  try {\n  \n      path = SYSCALLS.getStr(path);\n      path = SYSCALLS.calculateAt(dirfd, path);\n      if (bufsize <= 0) return -28;\n      var ret = FS.readlink(path);\n  \n      var len = Math.min(bufsize, lengthBytesUTF8(ret));\n      var endChar = HEAP8[buf+len];\n      stringToUTF8(ret, buf, bufsize+1);\n      // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)\n      // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.\n      HEAP8[buf+len] = endChar;\n      return len;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n\n  function ___syscall_rmdir(path) {\n  try {\n  \n      path = SYSCALLS.getStr(path);\n      FS.rmdir(path);\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n\n  function ___syscall_stat64(path, buf) {\n  try {\n  \n      path = SYSCALLS.getStr(path);\n      return SYSCALLS.doStat(FS.stat, path, buf);\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n\n  function ___syscall_unlinkat(dirfd, path, flags) {\n  try {\n  \n      path = SYSCALLS.getStr(path);\n      path = SYSCALLS.calculateAt(dirfd, path);\n      if (flags === 0) {\n        FS.unlink(path);\n      } else if (flags === 512) {\n        FS.rmdir(path);\n      } else {\n        abort('Invalid flags passed to unlinkat');\n      }\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n\n  function readI53FromI64(ptr) {\n      return HEAPU32[ptr>>2] + HEAP32[ptr+4>>2] * 4294967296;\n    }\n  \n  function ___syscall_utimensat(dirfd, path, times, flags) {\n  try {\n  \n      path = SYSCALLS.getStr(path);\n      path = SYSCALLS.calculateAt(dirfd, path, true);\n      if (!times) {\n        var atime = Date.now();\n        var mtime = atime;\n      } else {\n        var seconds = readI53FromI64(times);\n        var nanoseconds = HEAP32[(((times)+(8))>>2)];\n        atime = (seconds*1000) + (nanoseconds/(1000*1000));\n        times += 16;\n        seconds = readI53FromI64(times);\n        nanoseconds = HEAP32[(((times)+(8))>>2)];\n        mtime = (seconds*1000) + (nanoseconds/(1000*1000));\n      }\n      FS.utime(path, atime, mtime);\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return -e.errno;\n  }\n  }\n\n  var nowIsMonotonic = true;;\n  function __emscripten_get_now_is_monotonic() {\n      return nowIsMonotonic;\n    }\n\n  \n  function __isLeapYear(year) {\n        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);\n    }\n  \n  var __MONTH_DAYS_LEAP_CUMULATIVE = [0,31,60,91,121,152,182,213,244,274,305,335];\n  \n  var __MONTH_DAYS_REGULAR_CUMULATIVE = [0,31,59,90,120,151,181,212,243,273,304,334];\n  function __yday_from_date(date) {\n      var isLeapYear = __isLeapYear(date.getFullYear());\n      var monthDaysCumulative = (isLeapYear ? __MONTH_DAYS_LEAP_CUMULATIVE : __MONTH_DAYS_REGULAR_CUMULATIVE);\n      var yday = monthDaysCumulative[date.getMonth()] + date.getDate() - 1; // -1 since it's days since Jan 1\n  \n      return yday;\n    }\n  function __localtime_js(time, tmPtr) {\n      var date = new Date(readI53FromI64(time)*1000);\n      HEAP32[((tmPtr)>>2)] = date.getSeconds();\n      HEAP32[(((tmPtr)+(4))>>2)] = date.getMinutes();\n      HEAP32[(((tmPtr)+(8))>>2)] = date.getHours();\n      HEAP32[(((tmPtr)+(12))>>2)] = date.getDate();\n      HEAP32[(((tmPtr)+(16))>>2)] = date.getMonth();\n      HEAP32[(((tmPtr)+(20))>>2)] = date.getFullYear()-1900;\n      HEAP32[(((tmPtr)+(24))>>2)] = date.getDay();\n  \n      var yday = __yday_from_date(date)|0;\n      HEAP32[(((tmPtr)+(28))>>2)] = yday;\n      HEAP32[(((tmPtr)+(36))>>2)] = -(date.getTimezoneOffset() * 60);\n  \n      // Attention: DST is in December in South, and some regions don't have DST at all.\n      var start = new Date(date.getFullYear(), 0, 1);\n      var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();\n      var winterOffset = start.getTimezoneOffset();\n      var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;\n      HEAP32[(((tmPtr)+(32))>>2)] = dst;\n    }\n\n  function allocateUTF8(str) {\n      var size = lengthBytesUTF8(str) + 1;\n      var ret = _malloc(size);\n      if (ret) stringToUTF8Array(str, HEAP8, ret, size);\n      return ret;\n    }\n  function __tzset_js(timezone, daylight, tzname) {\n      // TODO: Use (malleable) environment variables instead of system settings.\n      var currentYear = new Date().getFullYear();\n      var winter = new Date(currentYear, 0, 1);\n      var summer = new Date(currentYear, 6, 1);\n      var winterOffset = winter.getTimezoneOffset();\n      var summerOffset = summer.getTimezoneOffset();\n  \n      // Local standard timezone offset. Local standard time is not adjusted for daylight savings.\n      // This code uses the fact that getTimezoneOffset returns a greater value during Standard Time versus Daylight Saving Time (DST).\n      // Thus it determines the expected output during Standard Time, and it compares whether the output of the given date the same (Standard) or less (DST).\n      var stdTimezoneOffset = Math.max(winterOffset, summerOffset);\n  \n      // timezone is specified as seconds west of UTC (\"The external variable\n      // `timezone` shall be set to the difference, in seconds, between\n      // Coordinated Universal Time (UTC) and local standard time.\"), the same\n      // as returned by stdTimezoneOffset.\n      // See http://pubs.opengroup.org/onlinepubs/009695399/functions/tzset.html\n      HEAPU32[((timezone)>>2)] = stdTimezoneOffset * 60;\n  \n      HEAP32[((daylight)>>2)] = Number(winterOffset != summerOffset);\n  \n      function extractZone(date) {\n        var match = date.toTimeString().match(/\\(([A-Za-z ]+)\\)$/);\n        return match ? match[1] : \"GMT\";\n      };\n      var winterName = extractZone(winter);\n      var summerName = extractZone(summer);\n      var winterNamePtr = allocateUTF8(winterName);\n      var summerNamePtr = allocateUTF8(summerName);\n      if (summerOffset < winterOffset) {\n        // Northern hemisphere\n        HEAPU32[((tzname)>>2)] = winterNamePtr;\n        HEAPU32[(((tzname)+(4))>>2)] = summerNamePtr;\n      } else {\n        HEAPU32[((tzname)>>2)] = summerNamePtr;\n        HEAPU32[(((tzname)+(4))>>2)] = winterNamePtr;\n      }\n    }\n\n  function _emscripten_date_now() {\n      return Date.now();\n    }\n\n  var _emscripten_get_now;_emscripten_get_now = () => performance.now();\n  ;\n\n  function getHeapMax() {\n      // Stay one Wasm page short of 4GB: while e.g. Chrome is able to allocate\n      // full 4GB Wasm memories, the size will wrap back to 0 bytes in Wasm side\n      // for any code that deals with heap sizes, which would require special\n      // casing all heap size related code to treat 0 specially.\n      return 2147483648;\n    }\n  \n  function emscripten_realloc_buffer(size) {\n      var b = wasmMemory.buffer;\n      try {\n        // round size grow request up to wasm page size (fixed 64KB per spec)\n        wasmMemory.grow((size - b.byteLength + 65535) >>> 16); // .grow() takes a delta compared to the previous size\n        updateMemoryViews();\n        return 1 /*success*/;\n      } catch(e) {\n      }\n      // implicit 0 return to save code size (caller will cast \"undefined\" into 0\n      // anyhow)\n    }\n  function _emscripten_resize_heap(requestedSize) {\n      var oldSize = HEAPU8.length;\n      requestedSize = requestedSize >>> 0;\n      // With multithreaded builds, races can happen (another thread might increase the size\n      // in between), so return a failure, and let the caller retry.\n  \n      // Memory resize rules:\n      // 1.  Always increase heap size to at least the requested size, rounded up\n      //     to next page multiple.\n      // 2a. If MEMORY_GROWTH_LINEAR_STEP == -1, excessively resize the heap\n      //     geometrically: increase the heap size according to\n      //     MEMORY_GROWTH_GEOMETRIC_STEP factor (default +20%), At most\n      //     overreserve by MEMORY_GROWTH_GEOMETRIC_CAP bytes (default 96MB).\n      // 2b. If MEMORY_GROWTH_LINEAR_STEP != -1, excessively resize the heap\n      //     linearly: increase the heap size by at least\n      //     MEMORY_GROWTH_LINEAR_STEP bytes.\n      // 3.  Max size for the heap is capped at 2048MB-WASM_PAGE_SIZE, or by\n      //     MAXIMUM_MEMORY, or by ASAN limit, depending on which is smallest\n      // 4.  If we were unable to allocate as much memory, it may be due to\n      //     over-eager decision to excessively reserve due to (3) above.\n      //     Hence if an allocation fails, cut down on the amount of excess\n      //     growth, in an attempt to succeed to perform a smaller allocation.\n  \n      // A limit is set for how much we can grow. We should not exceed that\n      // (the wasm binary specifies it, so if we tried, we'd fail anyhow).\n      var maxHeapSize = getHeapMax();\n      if (requestedSize > maxHeapSize) {\n        return false;\n      }\n  \n      let alignUp = (x, multiple) => x + (multiple - x % multiple) % multiple;\n  \n      // Loop through potential heap size increases. If we attempt a too eager\n      // reservation that fails, cut down on the attempted size and reserve a\n      // smaller bump instead. (max 3 times, chosen somewhat arbitrarily)\n      for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {\n        var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown); // ensure geometric growth\n        // but limit overreserving (default to capping at +96MB overgrowth at most)\n        overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296 );\n  \n        var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));\n  \n        var replacement = emscripten_realloc_buffer(newSize);\n        if (replacement) {\n  \n          return true;\n        }\n      }\n      return false;\n    }\n\n  var ENV = {};\n  \n  function getExecutableName() {\n      return thisProgram || './this.program';\n    }\n  function getEnvStrings() {\n      if (!getEnvStrings.strings) {\n        // Default values.\n        // Browser language detection #8751\n        var lang = ((typeof navigator == 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8';\n        var env = {\n          'USER': 'web_user',\n          'LOGNAME': 'web_user',\n          'PATH': '/',\n          'PWD': '/',\n          'HOME': '/home/web_user',\n          'LANG': lang,\n          '_': getExecutableName()\n        };\n        // Apply the user-provided values, if any.\n        for (var x in ENV) {\n          // x is a key in ENV; if ENV[x] is undefined, that means it was\n          // explicitly set to be so. We allow user code to do that to\n          // force variables with default values to remain unset.\n          if (ENV[x] === undefined) delete env[x];\n          else env[x] = ENV[x];\n        }\n        var strings = [];\n        for (var x in env) {\n          strings.push(x + '=' + env[x]);\n        }\n        getEnvStrings.strings = strings;\n      }\n      return getEnvStrings.strings;\n    }\n  \n  /** @param {boolean=} dontAddNull */\n  function writeAsciiToMemory(str, buffer, dontAddNull) {\n      for (var i = 0; i < str.length; ++i) {\n        HEAP8[((buffer++)>>0)] = str.charCodeAt(i);\n      }\n      // Null-terminate the pointer to the HEAP.\n      if (!dontAddNull) HEAP8[((buffer)>>0)] = 0;\n    }\n  \n  function _environ_get(__environ, environ_buf) {\n      var bufSize = 0;\n      getEnvStrings().forEach(function(string, i) {\n        var ptr = environ_buf + bufSize;\n        HEAPU32[(((__environ)+(i*4))>>2)] = ptr;\n        writeAsciiToMemory(string, ptr);\n        bufSize += string.length + 1;\n      });\n      return 0;\n    }\n\n  \n  function _environ_sizes_get(penviron_count, penviron_buf_size) {\n      var strings = getEnvStrings();\n      HEAPU32[((penviron_count)>>2)] = strings.length;\n      var bufSize = 0;\n      strings.forEach(function(string) {\n        bufSize += string.length + 1;\n      });\n      HEAPU32[((penviron_buf_size)>>2)] = bufSize;\n      return 0;\n    }\n\n  function _fd_close(fd) {\n  try {\n  \n      var stream = SYSCALLS.getStreamFromFD(fd);\n      FS.close(stream);\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return e.errno;\n  }\n  }\n\n  function _fd_fdstat_get(fd, pbuf) {\n  try {\n  \n      var stream = SYSCALLS.getStreamFromFD(fd);\n      // All character devices are terminals (other things a Linux system would\n      // assume is a character device, like the mouse, we have special APIs for).\n      var type = stream.tty ? 2 :\n                 FS.isDir(stream.mode) ? 3 :\n                 FS.isLink(stream.mode) ? 7 :\n                 4;\n      HEAP8[((pbuf)>>0)] = type;\n      // TODO HEAP16[(((pbuf)+(2))>>1)] = ?;\n      // TODO (tempI64 = [?>>>0,(tempDouble=?,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((pbuf)+(8))>>2)] = tempI64[0],HEAP32[(((pbuf)+(12))>>2)] = tempI64[1]);\n      // TODO (tempI64 = [?>>>0,(tempDouble=?,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((pbuf)+(16))>>2)] = tempI64[0],HEAP32[(((pbuf)+(20))>>2)] = tempI64[1]);\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return e.errno;\n  }\n  }\n\n  /** @param {number=} offset */\n  function doReadv(stream, iov, iovcnt, offset) {\n      var ret = 0;\n      for (var i = 0; i < iovcnt; i++) {\n        var ptr = HEAPU32[((iov)>>2)];\n        var len = HEAPU32[(((iov)+(4))>>2)];\n        iov += 8;\n        var curr = FS.read(stream, HEAP8,ptr, len, offset);\n        if (curr < 0) return -1;\n        ret += curr;\n        if (curr < len) break; // nothing more to read\n        if (typeof offset !== 'undefined') {\n          offset += curr;\n        }\n      }\n      return ret;\n    }\n  \n  function _fd_read(fd, iov, iovcnt, pnum) {\n  try {\n  \n      var stream = SYSCALLS.getStreamFromFD(fd);\n      var num = doReadv(stream, iov, iovcnt);\n      HEAPU32[((pnum)>>2)] = num;\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return e.errno;\n  }\n  }\n\n  \n  \n  \n  \n  function _fd_seek(fd, /** @type {!BigInt} */ offset, whence, newOffset) {\n  try {\n  \n      offset = bigintToI53Checked(offset); if (isNaN(offset)) return 61;\n      var stream = SYSCALLS.getStreamFromFD(fd);\n      FS.llseek(stream, offset, whence);\n      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)] = tempI64[0],HEAP32[(((newOffset)+(4))>>2)] = tempI64[1]);\n      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return e.errno;\n  }\n  }\n\n  function _fd_sync(fd) {\n  try {\n  \n      var stream = SYSCALLS.getStreamFromFD(fd);\n      if (stream.stream_ops && stream.stream_ops.fsync) {\n        return stream.stream_ops.fsync(stream);\n      }\n      return 0; // we can't do anything synchronously; the in-memory FS is already synced to\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return e.errno;\n  }\n  }\n\n  /** @param {number=} offset */\n  function doWritev(stream, iov, iovcnt, offset) {\n      var ret = 0;\n      for (var i = 0; i < iovcnt; i++) {\n        var ptr = HEAPU32[((iov)>>2)];\n        var len = HEAPU32[(((iov)+(4))>>2)];\n        iov += 8;\n        var curr = FS.write(stream, HEAP8,ptr, len, offset);\n        if (curr < 0) return -1;\n        ret += curr;\n        if (typeof offset !== 'undefined') {\n          offset += curr;\n        }\n      }\n      return ret;\n    }\n  \n  function _fd_write(fd, iov, iovcnt, pnum) {\n  try {\n  \n      var stream = SYSCALLS.getStreamFromFD(fd);\n      var num = doWritev(stream, iov, iovcnt);\n      HEAPU32[((pnum)>>2)] = num;\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n    return e.errno;\n  }\n  }\n\n  var FSNode = /** @constructor */ function(parent, name, mode, rdev) {\n    if (!parent) {\n      parent = this;  // root node sets parent to itself\n    }\n    this.parent = parent;\n    this.mount = parent.mount;\n    this.mounted = null;\n    this.id = FS.nextInode++;\n    this.name = name;\n    this.mode = mode;\n    this.node_ops = {};\n    this.stream_ops = {};\n    this.rdev = rdev;\n  };\n  var readMode = 292/*292*/ | 73/*73*/;\n  var writeMode = 146/*146*/;\n  Object.defineProperties(FSNode.prototype, {\n   read: {\n    get: /** @this{FSNode} */function() {\n     return (this.mode & readMode) === readMode;\n    },\n    set: /** @this{FSNode} */function(val) {\n     val ? this.mode |= readMode : this.mode &= ~readMode;\n    }\n   },\n   write: {\n    get: /** @this{FSNode} */function() {\n     return (this.mode & writeMode) === writeMode;\n    },\n    set: /** @this{FSNode} */function(val) {\n     val ? this.mode |= writeMode : this.mode &= ~writeMode;\n    }\n   },\n   isFolder: {\n    get: /** @this{FSNode} */function() {\n     return FS.isDir(this.mode);\n    }\n   },\n   isDevice: {\n    get: /** @this{FSNode} */function() {\n     return FS.isChrdev(this.mode);\n    }\n   }\n  });\n  FS.FSNode = FSNode;\n  FS.staticInit();;\nvar wasmImports = {\n  \"__syscall_chmod\": ___syscall_chmod,\n  \"__syscall_faccessat\": ___syscall_faccessat,\n  \"__syscall_fchmod\": ___syscall_fchmod,\n  \"__syscall_fchown32\": ___syscall_fchown32,\n  \"__syscall_fcntl64\": ___syscall_fcntl64,\n  \"__syscall_fstat64\": ___syscall_fstat64,\n  \"__syscall_ftruncate64\": ___syscall_ftruncate64,\n  \"__syscall_getcwd\": ___syscall_getcwd,\n  \"__syscall_ioctl\": ___syscall_ioctl,\n  \"__syscall_lstat64\": ___syscall_lstat64,\n  \"__syscall_mkdirat\": ___syscall_mkdirat,\n  \"__syscall_newfstatat\": ___syscall_newfstatat,\n  \"__syscall_openat\": ___syscall_openat,\n  \"__syscall_readlinkat\": ___syscall_readlinkat,\n  \"__syscall_rmdir\": ___syscall_rmdir,\n  \"__syscall_stat64\": ___syscall_stat64,\n  \"__syscall_unlinkat\": ___syscall_unlinkat,\n  \"__syscall_utimensat\": ___syscall_utimensat,\n  \"_emscripten_get_now_is_monotonic\": __emscripten_get_now_is_monotonic,\n  \"_localtime_js\": __localtime_js,\n  \"_tzset_js\": __tzset_js,\n  \"emscripten_date_now\": _emscripten_date_now,\n  \"emscripten_get_now\": _emscripten_get_now,\n  \"emscripten_resize_heap\": _emscripten_resize_heap,\n  \"environ_get\": _environ_get,\n  \"environ_sizes_get\": _environ_sizes_get,\n  \"fd_close\": _fd_close,\n  \"fd_fdstat_get\": _fd_fdstat_get,\n  \"fd_read\": _fd_read,\n  \"fd_seek\": _fd_seek,\n  \"fd_sync\": _fd_sync,\n  \"fd_write\": _fd_write,\n  \"memory\": wasmMemory\n};\nvar asm = createWasm();\n/** @type {function(...*):?} */\nvar ___wasm_call_ctors = function() {\n  return (___wasm_call_ctors = Module[\"asm\"][\"__wasm_call_ctors\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_status64 = Module[\"_sqlite3_status64\"] = function() {\n  return (_sqlite3_status64 = Module[\"_sqlite3_status64\"] = Module[\"asm\"][\"sqlite3_status64\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_status = Module[\"_sqlite3_status\"] = function() {\n  return (_sqlite3_status = Module[\"_sqlite3_status\"] = Module[\"asm\"][\"sqlite3_status\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_db_status = Module[\"_sqlite3_db_status\"] = function() {\n  return (_sqlite3_db_status = Module[\"_sqlite3_db_status\"] = Module[\"asm\"][\"sqlite3_db_status\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_msize = Module[\"_sqlite3_msize\"] = function() {\n  return (_sqlite3_msize = Module[\"_sqlite3_msize\"] = Module[\"asm\"][\"sqlite3_msize\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_vfs_find = Module[\"_sqlite3_vfs_find\"] = function() {\n  return (_sqlite3_vfs_find = Module[\"_sqlite3_vfs_find\"] = Module[\"asm\"][\"sqlite3_vfs_find\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_initialize = Module[\"_sqlite3_initialize\"] = function() {\n  return (_sqlite3_initialize = Module[\"_sqlite3_initialize\"] = Module[\"asm\"][\"sqlite3_initialize\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_malloc = Module[\"_sqlite3_malloc\"] = function() {\n  return (_sqlite3_malloc = Module[\"_sqlite3_malloc\"] = Module[\"asm\"][\"sqlite3_malloc\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_free = Module[\"_sqlite3_free\"] = function() {\n  return (_sqlite3_free = Module[\"_sqlite3_free\"] = Module[\"asm\"][\"sqlite3_free\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_vfs_register = Module[\"_sqlite3_vfs_register\"] = function() {\n  return (_sqlite3_vfs_register = Module[\"_sqlite3_vfs_register\"] = Module[\"asm\"][\"sqlite3_vfs_register\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_vfs_unregister = Module[\"_sqlite3_vfs_unregister\"] = function() {\n  return (_sqlite3_vfs_unregister = Module[\"_sqlite3_vfs_unregister\"] = Module[\"asm\"][\"sqlite3_vfs_unregister\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_malloc64 = Module[\"_sqlite3_malloc64\"] = function() {\n  return (_sqlite3_malloc64 = Module[\"_sqlite3_malloc64\"] = Module[\"asm\"][\"sqlite3_malloc64\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_realloc = Module[\"_sqlite3_realloc\"] = function() {\n  return (_sqlite3_realloc = Module[\"_sqlite3_realloc\"] = Module[\"asm\"][\"sqlite3_realloc\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_realloc64 = Module[\"_sqlite3_realloc64\"] = function() {\n  return (_sqlite3_realloc64 = Module[\"_sqlite3_realloc64\"] = Module[\"asm\"][\"sqlite3_realloc64\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_value_text = Module[\"_sqlite3_value_text\"] = function() {\n  return (_sqlite3_value_text = Module[\"_sqlite3_value_text\"] = Module[\"asm\"][\"sqlite3_value_text\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_randomness = Module[\"_sqlite3_randomness\"] = function() {\n  return (_sqlite3_randomness = Module[\"_sqlite3_randomness\"] = Module[\"asm\"][\"sqlite3_randomness\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_stricmp = Module[\"_sqlite3_stricmp\"] = function() {\n  return (_sqlite3_stricmp = Module[\"_sqlite3_stricmp\"] = Module[\"asm\"][\"sqlite3_stricmp\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_strnicmp = Module[\"_sqlite3_strnicmp\"] = function() {\n  return (_sqlite3_strnicmp = Module[\"_sqlite3_strnicmp\"] = Module[\"asm\"][\"sqlite3_strnicmp\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_uri_parameter = Module[\"_sqlite3_uri_parameter\"] = function() {\n  return (_sqlite3_uri_parameter = Module[\"_sqlite3_uri_parameter\"] = Module[\"asm\"][\"sqlite3_uri_parameter\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar ___errno_location = function() {\n  return (___errno_location = Module[\"asm\"][\"__errno_location\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_uri_boolean = Module[\"_sqlite3_uri_boolean\"] = function() {\n  return (_sqlite3_uri_boolean = Module[\"_sqlite3_uri_boolean\"] = Module[\"asm\"][\"sqlite3_uri_boolean\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_serialize = Module[\"_sqlite3_serialize\"] = function() {\n  return (_sqlite3_serialize = Module[\"_sqlite3_serialize\"] = Module[\"asm\"][\"sqlite3_serialize\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_prepare_v2 = Module[\"_sqlite3_prepare_v2\"] = function() {\n  return (_sqlite3_prepare_v2 = Module[\"_sqlite3_prepare_v2\"] = Module[\"asm\"][\"sqlite3_prepare_v2\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_step = Module[\"_sqlite3_step\"] = function() {\n  return (_sqlite3_step = Module[\"_sqlite3_step\"] = Module[\"asm\"][\"sqlite3_step\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_column_int64 = Module[\"_sqlite3_column_int64\"] = function() {\n  return (_sqlite3_column_int64 = Module[\"_sqlite3_column_int64\"] = Module[\"asm\"][\"sqlite3_column_int64\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_column_int = Module[\"_sqlite3_column_int\"] = function() {\n  return (_sqlite3_column_int = Module[\"_sqlite3_column_int\"] = Module[\"asm\"][\"sqlite3_column_int\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_finalize = Module[\"_sqlite3_finalize\"] = function() {\n  return (_sqlite3_finalize = Module[\"_sqlite3_finalize\"] = Module[\"asm\"][\"sqlite3_finalize\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_file_control = Module[\"_sqlite3_file_control\"] = function() {\n  return (_sqlite3_file_control = Module[\"_sqlite3_file_control\"] = Module[\"asm\"][\"sqlite3_file_control\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_reset = Module[\"_sqlite3_reset\"] = function() {\n  return (_sqlite3_reset = Module[\"_sqlite3_reset\"] = Module[\"asm\"][\"sqlite3_reset\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_deserialize = Module[\"_sqlite3_deserialize\"] = function() {\n  return (_sqlite3_deserialize = Module[\"_sqlite3_deserialize\"] = Module[\"asm\"][\"sqlite3_deserialize\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_clear_bindings = Module[\"_sqlite3_clear_bindings\"] = function() {\n  return (_sqlite3_clear_bindings = Module[\"_sqlite3_clear_bindings\"] = Module[\"asm\"][\"sqlite3_clear_bindings\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_value_blob = Module[\"_sqlite3_value_blob\"] = function() {\n  return (_sqlite3_value_blob = Module[\"_sqlite3_value_blob\"] = Module[\"asm\"][\"sqlite3_value_blob\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_value_bytes = Module[\"_sqlite3_value_bytes\"] = function() {\n  return (_sqlite3_value_bytes = Module[\"_sqlite3_value_bytes\"] = Module[\"asm\"][\"sqlite3_value_bytes\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_value_double = Module[\"_sqlite3_value_double\"] = function() {\n  return (_sqlite3_value_double = Module[\"_sqlite3_value_double\"] = Module[\"asm\"][\"sqlite3_value_double\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_value_int = Module[\"_sqlite3_value_int\"] = function() {\n  return (_sqlite3_value_int = Module[\"_sqlite3_value_int\"] = Module[\"asm\"][\"sqlite3_value_int\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_value_int64 = Module[\"_sqlite3_value_int64\"] = function() {\n  return (_sqlite3_value_int64 = Module[\"_sqlite3_value_int64\"] = Module[\"asm\"][\"sqlite3_value_int64\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_value_subtype = Module[\"_sqlite3_value_subtype\"] = function() {\n  return (_sqlite3_value_subtype = Module[\"_sqlite3_value_subtype\"] = Module[\"asm\"][\"sqlite3_value_subtype\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_value_pointer = Module[\"_sqlite3_value_pointer\"] = function() {\n  return (_sqlite3_value_pointer = Module[\"_sqlite3_value_pointer\"] = Module[\"asm\"][\"sqlite3_value_pointer\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_value_type = Module[\"_sqlite3_value_type\"] = function() {\n  return (_sqlite3_value_type = Module[\"_sqlite3_value_type\"] = Module[\"asm\"][\"sqlite3_value_type\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_value_nochange = Module[\"_sqlite3_value_nochange\"] = function() {\n  return (_sqlite3_value_nochange = Module[\"_sqlite3_value_nochange\"] = Module[\"asm\"][\"sqlite3_value_nochange\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_value_frombind = Module[\"_sqlite3_value_frombind\"] = function() {\n  return (_sqlite3_value_frombind = Module[\"_sqlite3_value_frombind\"] = Module[\"asm\"][\"sqlite3_value_frombind\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_value_dup = Module[\"_sqlite3_value_dup\"] = function() {\n  return (_sqlite3_value_dup = Module[\"_sqlite3_value_dup\"] = Module[\"asm\"][\"sqlite3_value_dup\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_value_free = Module[\"_sqlite3_value_free\"] = function() {\n  return (_sqlite3_value_free = Module[\"_sqlite3_value_free\"] = Module[\"asm\"][\"sqlite3_value_free\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_result_blob = Module[\"_sqlite3_result_blob\"] = function() {\n  return (_sqlite3_result_blob = Module[\"_sqlite3_result_blob\"] = Module[\"asm\"][\"sqlite3_result_blob\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_result_error_nomem = Module[\"_sqlite3_result_error_nomem\"] = function() {\n  return (_sqlite3_result_error_nomem = Module[\"_sqlite3_result_error_nomem\"] = Module[\"asm\"][\"sqlite3_result_error_nomem\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_result_error_toobig = Module[\"_sqlite3_result_error_toobig\"] = function() {\n  return (_sqlite3_result_error_toobig = Module[\"_sqlite3_result_error_toobig\"] = Module[\"asm\"][\"sqlite3_result_error_toobig\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_result_double = Module[\"_sqlite3_result_double\"] = function() {\n  return (_sqlite3_result_double = Module[\"_sqlite3_result_double\"] = Module[\"asm\"][\"sqlite3_result_double\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_result_error = Module[\"_sqlite3_result_error\"] = function() {\n  return (_sqlite3_result_error = Module[\"_sqlite3_result_error\"] = Module[\"asm\"][\"sqlite3_result_error\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_result_int = Module[\"_sqlite3_result_int\"] = function() {\n  return (_sqlite3_result_int = Module[\"_sqlite3_result_int\"] = Module[\"asm\"][\"sqlite3_result_int\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_result_int64 = Module[\"_sqlite3_result_int64\"] = function() {\n  return (_sqlite3_result_int64 = Module[\"_sqlite3_result_int64\"] = Module[\"asm\"][\"sqlite3_result_int64\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_result_null = Module[\"_sqlite3_result_null\"] = function() {\n  return (_sqlite3_result_null = Module[\"_sqlite3_result_null\"] = Module[\"asm\"][\"sqlite3_result_null\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_result_pointer = Module[\"_sqlite3_result_pointer\"] = function() {\n  return (_sqlite3_result_pointer = Module[\"_sqlite3_result_pointer\"] = Module[\"asm\"][\"sqlite3_result_pointer\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_result_subtype = Module[\"_sqlite3_result_subtype\"] = function() {\n  return (_sqlite3_result_subtype = Module[\"_sqlite3_result_subtype\"] = Module[\"asm\"][\"sqlite3_result_subtype\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_result_text = Module[\"_sqlite3_result_text\"] = function() {\n  return (_sqlite3_result_text = Module[\"_sqlite3_result_text\"] = Module[\"asm\"][\"sqlite3_result_text\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_result_zeroblob = Module[\"_sqlite3_result_zeroblob\"] = function() {\n  return (_sqlite3_result_zeroblob = Module[\"_sqlite3_result_zeroblob\"] = Module[\"asm\"][\"sqlite3_result_zeroblob\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_result_zeroblob64 = Module[\"_sqlite3_result_zeroblob64\"] = function() {\n  return (_sqlite3_result_zeroblob64 = Module[\"_sqlite3_result_zeroblob64\"] = Module[\"asm\"][\"sqlite3_result_zeroblob64\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_result_error_code = Module[\"_sqlite3_result_error_code\"] = function() {\n  return (_sqlite3_result_error_code = Module[\"_sqlite3_result_error_code\"] = Module[\"asm\"][\"sqlite3_result_error_code\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_user_data = Module[\"_sqlite3_user_data\"] = function() {\n  return (_sqlite3_user_data = Module[\"_sqlite3_user_data\"] = Module[\"asm\"][\"sqlite3_user_data\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_context_db_handle = Module[\"_sqlite3_context_db_handle\"] = function() {\n  return (_sqlite3_context_db_handle = Module[\"_sqlite3_context_db_handle\"] = Module[\"asm\"][\"sqlite3_context_db_handle\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_vtab_nochange = Module[\"_sqlite3_vtab_nochange\"] = function() {\n  return (_sqlite3_vtab_nochange = Module[\"_sqlite3_vtab_nochange\"] = Module[\"asm\"][\"sqlite3_vtab_nochange\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_vtab_in_first = Module[\"_sqlite3_vtab_in_first\"] = function() {\n  return (_sqlite3_vtab_in_first = Module[\"_sqlite3_vtab_in_first\"] = Module[\"asm\"][\"sqlite3_vtab_in_first\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_vtab_in_next = Module[\"_sqlite3_vtab_in_next\"] = function() {\n  return (_sqlite3_vtab_in_next = Module[\"_sqlite3_vtab_in_next\"] = Module[\"asm\"][\"sqlite3_vtab_in_next\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_aggregate_context = Module[\"_sqlite3_aggregate_context\"] = function() {\n  return (_sqlite3_aggregate_context = Module[\"_sqlite3_aggregate_context\"] = Module[\"asm\"][\"sqlite3_aggregate_context\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_get_auxdata = Module[\"_sqlite3_get_auxdata\"] = function() {\n  return (_sqlite3_get_auxdata = Module[\"_sqlite3_get_auxdata\"] = Module[\"asm\"][\"sqlite3_get_auxdata\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_set_auxdata = Module[\"_sqlite3_set_auxdata\"] = function() {\n  return (_sqlite3_set_auxdata = Module[\"_sqlite3_set_auxdata\"] = Module[\"asm\"][\"sqlite3_set_auxdata\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_column_count = Module[\"_sqlite3_column_count\"] = function() {\n  return (_sqlite3_column_count = Module[\"_sqlite3_column_count\"] = Module[\"asm\"][\"sqlite3_column_count\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_data_count = Module[\"_sqlite3_data_count\"] = function() {\n  return (_sqlite3_data_count = Module[\"_sqlite3_data_count\"] = Module[\"asm\"][\"sqlite3_data_count\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_column_blob = Module[\"_sqlite3_column_blob\"] = function() {\n  return (_sqlite3_column_blob = Module[\"_sqlite3_column_blob\"] = Module[\"asm\"][\"sqlite3_column_blob\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_column_bytes = Module[\"_sqlite3_column_bytes\"] = function() {\n  return (_sqlite3_column_bytes = Module[\"_sqlite3_column_bytes\"] = Module[\"asm\"][\"sqlite3_column_bytes\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_column_double = Module[\"_sqlite3_column_double\"] = function() {\n  return (_sqlite3_column_double = Module[\"_sqlite3_column_double\"] = Module[\"asm\"][\"sqlite3_column_double\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_column_text = Module[\"_sqlite3_column_text\"] = function() {\n  return (_sqlite3_column_text = Module[\"_sqlite3_column_text\"] = Module[\"asm\"][\"sqlite3_column_text\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_column_value = Module[\"_sqlite3_column_value\"] = function() {\n  return (_sqlite3_column_value = Module[\"_sqlite3_column_value\"] = Module[\"asm\"][\"sqlite3_column_value\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_column_type = Module[\"_sqlite3_column_type\"] = function() {\n  return (_sqlite3_column_type = Module[\"_sqlite3_column_type\"] = Module[\"asm\"][\"sqlite3_column_type\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_column_name = Module[\"_sqlite3_column_name\"] = function() {\n  return (_sqlite3_column_name = Module[\"_sqlite3_column_name\"] = Module[\"asm\"][\"sqlite3_column_name\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_bind_blob = Module[\"_sqlite3_bind_blob\"] = function() {\n  return (_sqlite3_bind_blob = Module[\"_sqlite3_bind_blob\"] = Module[\"asm\"][\"sqlite3_bind_blob\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_bind_double = Module[\"_sqlite3_bind_double\"] = function() {\n  return (_sqlite3_bind_double = Module[\"_sqlite3_bind_double\"] = Module[\"asm\"][\"sqlite3_bind_double\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_bind_int = Module[\"_sqlite3_bind_int\"] = function() {\n  return (_sqlite3_bind_int = Module[\"_sqlite3_bind_int\"] = Module[\"asm\"][\"sqlite3_bind_int\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_bind_int64 = Module[\"_sqlite3_bind_int64\"] = function() {\n  return (_sqlite3_bind_int64 = Module[\"_sqlite3_bind_int64\"] = Module[\"asm\"][\"sqlite3_bind_int64\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_bind_null = Module[\"_sqlite3_bind_null\"] = function() {\n  return (_sqlite3_bind_null = Module[\"_sqlite3_bind_null\"] = Module[\"asm\"][\"sqlite3_bind_null\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_bind_pointer = Module[\"_sqlite3_bind_pointer\"] = function() {\n  return (_sqlite3_bind_pointer = Module[\"_sqlite3_bind_pointer\"] = Module[\"asm\"][\"sqlite3_bind_pointer\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_bind_text = Module[\"_sqlite3_bind_text\"] = function() {\n  return (_sqlite3_bind_text = Module[\"_sqlite3_bind_text\"] = Module[\"asm\"][\"sqlite3_bind_text\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_bind_parameter_count = Module[\"_sqlite3_bind_parameter_count\"] = function() {\n  return (_sqlite3_bind_parameter_count = Module[\"_sqlite3_bind_parameter_count\"] = Module[\"asm\"][\"sqlite3_bind_parameter_count\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_bind_parameter_index = Module[\"_sqlite3_bind_parameter_index\"] = function() {\n  return (_sqlite3_bind_parameter_index = Module[\"_sqlite3_bind_parameter_index\"] = Module[\"asm\"][\"sqlite3_bind_parameter_index\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_db_handle = Module[\"_sqlite3_db_handle\"] = function() {\n  return (_sqlite3_db_handle = Module[\"_sqlite3_db_handle\"] = Module[\"asm\"][\"sqlite3_db_handle\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_stmt_readonly = Module[\"_sqlite3_stmt_readonly\"] = function() {\n  return (_sqlite3_stmt_readonly = Module[\"_sqlite3_stmt_readonly\"] = Module[\"asm\"][\"sqlite3_stmt_readonly\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_stmt_isexplain = Module[\"_sqlite3_stmt_isexplain\"] = function() {\n  return (_sqlite3_stmt_isexplain = Module[\"_sqlite3_stmt_isexplain\"] = Module[\"asm\"][\"sqlite3_stmt_isexplain\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_stmt_status = Module[\"_sqlite3_stmt_status\"] = function() {\n  return (_sqlite3_stmt_status = Module[\"_sqlite3_stmt_status\"] = Module[\"asm\"][\"sqlite3_stmt_status\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_sql = Module[\"_sqlite3_sql\"] = function() {\n  return (_sqlite3_sql = Module[\"_sqlite3_sql\"] = Module[\"asm\"][\"sqlite3_sql\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_expanded_sql = Module[\"_sqlite3_expanded_sql\"] = function() {\n  return (_sqlite3_expanded_sql = Module[\"_sqlite3_expanded_sql\"] = Module[\"asm\"][\"sqlite3_expanded_sql\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_preupdate_old = Module[\"_sqlite3_preupdate_old\"] = function() {\n  return (_sqlite3_preupdate_old = Module[\"_sqlite3_preupdate_old\"] = Module[\"asm\"][\"sqlite3_preupdate_old\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_preupdate_count = Module[\"_sqlite3_preupdate_count\"] = function() {\n  return (_sqlite3_preupdate_count = Module[\"_sqlite3_preupdate_count\"] = Module[\"asm\"][\"sqlite3_preupdate_count\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_preupdate_depth = Module[\"_sqlite3_preupdate_depth\"] = function() {\n  return (_sqlite3_preupdate_depth = Module[\"_sqlite3_preupdate_depth\"] = Module[\"asm\"][\"sqlite3_preupdate_depth\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_preupdate_blobwrite = Module[\"_sqlite3_preupdate_blobwrite\"] = function() {\n  return (_sqlite3_preupdate_blobwrite = Module[\"_sqlite3_preupdate_blobwrite\"] = Module[\"asm\"][\"sqlite3_preupdate_blobwrite\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_preupdate_new = Module[\"_sqlite3_preupdate_new\"] = function() {\n  return (_sqlite3_preupdate_new = Module[\"_sqlite3_preupdate_new\"] = Module[\"asm\"][\"sqlite3_preupdate_new\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_value_numeric_type = Module[\"_sqlite3_value_numeric_type\"] = function() {\n  return (_sqlite3_value_numeric_type = Module[\"_sqlite3_value_numeric_type\"] = Module[\"asm\"][\"sqlite3_value_numeric_type\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_errmsg = Module[\"_sqlite3_errmsg\"] = function() {\n  return (_sqlite3_errmsg = Module[\"_sqlite3_errmsg\"] = Module[\"asm\"][\"sqlite3_errmsg\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_set_authorizer = Module[\"_sqlite3_set_authorizer\"] = function() {\n  return (_sqlite3_set_authorizer = Module[\"_sqlite3_set_authorizer\"] = Module[\"asm\"][\"sqlite3_set_authorizer\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_strglob = Module[\"_sqlite3_strglob\"] = function() {\n  return (_sqlite3_strglob = Module[\"_sqlite3_strglob\"] = Module[\"asm\"][\"sqlite3_strglob\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_strlike = Module[\"_sqlite3_strlike\"] = function() {\n  return (_sqlite3_strlike = Module[\"_sqlite3_strlike\"] = Module[\"asm\"][\"sqlite3_strlike\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_exec = Module[\"_sqlite3_exec\"] = function() {\n  return (_sqlite3_exec = Module[\"_sqlite3_exec\"] = Module[\"asm\"][\"sqlite3_exec\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_auto_extension = Module[\"_sqlite3_auto_extension\"] = function() {\n  return (_sqlite3_auto_extension = Module[\"_sqlite3_auto_extension\"] = Module[\"asm\"][\"sqlite3_auto_extension\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_cancel_auto_extension = Module[\"_sqlite3_cancel_auto_extension\"] = function() {\n  return (_sqlite3_cancel_auto_extension = Module[\"_sqlite3_cancel_auto_extension\"] = Module[\"asm\"][\"sqlite3_cancel_auto_extension\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_reset_auto_extension = Module[\"_sqlite3_reset_auto_extension\"] = function() {\n  return (_sqlite3_reset_auto_extension = Module[\"_sqlite3_reset_auto_extension\"] = Module[\"asm\"][\"sqlite3_reset_auto_extension\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_prepare_v3 = Module[\"_sqlite3_prepare_v3\"] = function() {\n  return (_sqlite3_prepare_v3 = Module[\"_sqlite3_prepare_v3\"] = Module[\"asm\"][\"sqlite3_prepare_v3\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_create_module = Module[\"_sqlite3_create_module\"] = function() {\n  return (_sqlite3_create_module = Module[\"_sqlite3_create_module\"] = Module[\"asm\"][\"sqlite3_create_module\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_create_module_v2 = Module[\"_sqlite3_create_module_v2\"] = function() {\n  return (_sqlite3_create_module_v2 = Module[\"_sqlite3_create_module_v2\"] = Module[\"asm\"][\"sqlite3_create_module_v2\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_drop_modules = Module[\"_sqlite3_drop_modules\"] = function() {\n  return (_sqlite3_drop_modules = Module[\"_sqlite3_drop_modules\"] = Module[\"asm\"][\"sqlite3_drop_modules\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_declare_vtab = Module[\"_sqlite3_declare_vtab\"] = function() {\n  return (_sqlite3_declare_vtab = Module[\"_sqlite3_declare_vtab\"] = Module[\"asm\"][\"sqlite3_declare_vtab\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_vtab_on_conflict = Module[\"_sqlite3_vtab_on_conflict\"] = function() {\n  return (_sqlite3_vtab_on_conflict = Module[\"_sqlite3_vtab_on_conflict\"] = Module[\"asm\"][\"sqlite3_vtab_on_conflict\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_vtab_collation = Module[\"_sqlite3_vtab_collation\"] = function() {\n  return (_sqlite3_vtab_collation = Module[\"_sqlite3_vtab_collation\"] = Module[\"asm\"][\"sqlite3_vtab_collation\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_vtab_in = Module[\"_sqlite3_vtab_in\"] = function() {\n  return (_sqlite3_vtab_in = Module[\"_sqlite3_vtab_in\"] = Module[\"asm\"][\"sqlite3_vtab_in\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_vtab_rhs_value = Module[\"_sqlite3_vtab_rhs_value\"] = function() {\n  return (_sqlite3_vtab_rhs_value = Module[\"_sqlite3_vtab_rhs_value\"] = Module[\"asm\"][\"sqlite3_vtab_rhs_value\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_vtab_distinct = Module[\"_sqlite3_vtab_distinct\"] = function() {\n  return (_sqlite3_vtab_distinct = Module[\"_sqlite3_vtab_distinct\"] = Module[\"asm\"][\"sqlite3_vtab_distinct\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_keyword_name = Module[\"_sqlite3_keyword_name\"] = function() {\n  return (_sqlite3_keyword_name = Module[\"_sqlite3_keyword_name\"] = Module[\"asm\"][\"sqlite3_keyword_name\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_keyword_count = Module[\"_sqlite3_keyword_count\"] = function() {\n  return (_sqlite3_keyword_count = Module[\"_sqlite3_keyword_count\"] = Module[\"asm\"][\"sqlite3_keyword_count\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_keyword_check = Module[\"_sqlite3_keyword_check\"] = function() {\n  return (_sqlite3_keyword_check = Module[\"_sqlite3_keyword_check\"] = Module[\"asm\"][\"sqlite3_keyword_check\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_complete = Module[\"_sqlite3_complete\"] = function() {\n  return (_sqlite3_complete = Module[\"_sqlite3_complete\"] = Module[\"asm\"][\"sqlite3_complete\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_libversion = Module[\"_sqlite3_libversion\"] = function() {\n  return (_sqlite3_libversion = Module[\"_sqlite3_libversion\"] = Module[\"asm\"][\"sqlite3_libversion\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_libversion_number = Module[\"_sqlite3_libversion_number\"] = function() {\n  return (_sqlite3_libversion_number = Module[\"_sqlite3_libversion_number\"] = Module[\"asm\"][\"sqlite3_libversion_number\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_shutdown = Module[\"_sqlite3_shutdown\"] = function() {\n  return (_sqlite3_shutdown = Module[\"_sqlite3_shutdown\"] = Module[\"asm\"][\"sqlite3_shutdown\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_last_insert_rowid = Module[\"_sqlite3_last_insert_rowid\"] = function() {\n  return (_sqlite3_last_insert_rowid = Module[\"_sqlite3_last_insert_rowid\"] = Module[\"asm\"][\"sqlite3_last_insert_rowid\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_set_last_insert_rowid = Module[\"_sqlite3_set_last_insert_rowid\"] = function() {\n  return (_sqlite3_set_last_insert_rowid = Module[\"_sqlite3_set_last_insert_rowid\"] = Module[\"asm\"][\"sqlite3_set_last_insert_rowid\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_changes64 = Module[\"_sqlite3_changes64\"] = function() {\n  return (_sqlite3_changes64 = Module[\"_sqlite3_changes64\"] = Module[\"asm\"][\"sqlite3_changes64\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_changes = Module[\"_sqlite3_changes\"] = function() {\n  return (_sqlite3_changes = Module[\"_sqlite3_changes\"] = Module[\"asm\"][\"sqlite3_changes\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_total_changes64 = Module[\"_sqlite3_total_changes64\"] = function() {\n  return (_sqlite3_total_changes64 = Module[\"_sqlite3_total_changes64\"] = Module[\"asm\"][\"sqlite3_total_changes64\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_total_changes = Module[\"_sqlite3_total_changes\"] = function() {\n  return (_sqlite3_total_changes = Module[\"_sqlite3_total_changes\"] = Module[\"asm\"][\"sqlite3_total_changes\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_txn_state = Module[\"_sqlite3_txn_state\"] = function() {\n  return (_sqlite3_txn_state = Module[\"_sqlite3_txn_state\"] = Module[\"asm\"][\"sqlite3_txn_state\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_close_v2 = Module[\"_sqlite3_close_v2\"] = function() {\n  return (_sqlite3_close_v2 = Module[\"_sqlite3_close_v2\"] = Module[\"asm\"][\"sqlite3_close_v2\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_busy_handler = Module[\"_sqlite3_busy_handler\"] = function() {\n  return (_sqlite3_busy_handler = Module[\"_sqlite3_busy_handler\"] = Module[\"asm\"][\"sqlite3_busy_handler\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_progress_handler = Module[\"_sqlite3_progress_handler\"] = function() {\n  return (_sqlite3_progress_handler = Module[\"_sqlite3_progress_handler\"] = Module[\"asm\"][\"sqlite3_progress_handler\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_busy_timeout = Module[\"_sqlite3_busy_timeout\"] = function() {\n  return (_sqlite3_busy_timeout = Module[\"_sqlite3_busy_timeout\"] = Module[\"asm\"][\"sqlite3_busy_timeout\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_create_function = Module[\"_sqlite3_create_function\"] = function() {\n  return (_sqlite3_create_function = Module[\"_sqlite3_create_function\"] = Module[\"asm\"][\"sqlite3_create_function\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_create_function_v2 = Module[\"_sqlite3_create_function_v2\"] = function() {\n  return (_sqlite3_create_function_v2 = Module[\"_sqlite3_create_function_v2\"] = Module[\"asm\"][\"sqlite3_create_function_v2\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_create_window_function = Module[\"_sqlite3_create_window_function\"] = function() {\n  return (_sqlite3_create_window_function = Module[\"_sqlite3_create_window_function\"] = Module[\"asm\"][\"sqlite3_create_window_function\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_overload_function = Module[\"_sqlite3_overload_function\"] = function() {\n  return (_sqlite3_overload_function = Module[\"_sqlite3_overload_function\"] = Module[\"asm\"][\"sqlite3_overload_function\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_trace_v2 = Module[\"_sqlite3_trace_v2\"] = function() {\n  return (_sqlite3_trace_v2 = Module[\"_sqlite3_trace_v2\"] = Module[\"asm\"][\"sqlite3_trace_v2\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_commit_hook = Module[\"_sqlite3_commit_hook\"] = function() {\n  return (_sqlite3_commit_hook = Module[\"_sqlite3_commit_hook\"] = Module[\"asm\"][\"sqlite3_commit_hook\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_update_hook = Module[\"_sqlite3_update_hook\"] = function() {\n  return (_sqlite3_update_hook = Module[\"_sqlite3_update_hook\"] = Module[\"asm\"][\"sqlite3_update_hook\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_rollback_hook = Module[\"_sqlite3_rollback_hook\"] = function() {\n  return (_sqlite3_rollback_hook = Module[\"_sqlite3_rollback_hook\"] = Module[\"asm\"][\"sqlite3_rollback_hook\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_preupdate_hook = Module[\"_sqlite3_preupdate_hook\"] = function() {\n  return (_sqlite3_preupdate_hook = Module[\"_sqlite3_preupdate_hook\"] = Module[\"asm\"][\"sqlite3_preupdate_hook\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_error_offset = Module[\"_sqlite3_error_offset\"] = function() {\n  return (_sqlite3_error_offset = Module[\"_sqlite3_error_offset\"] = Module[\"asm\"][\"sqlite3_error_offset\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_errcode = Module[\"_sqlite3_errcode\"] = function() {\n  return (_sqlite3_errcode = Module[\"_sqlite3_errcode\"] = Module[\"asm\"][\"sqlite3_errcode\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_extended_errcode = Module[\"_sqlite3_extended_errcode\"] = function() {\n  return (_sqlite3_extended_errcode = Module[\"_sqlite3_extended_errcode\"] = Module[\"asm\"][\"sqlite3_extended_errcode\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_errstr = Module[\"_sqlite3_errstr\"] = function() {\n  return (_sqlite3_errstr = Module[\"_sqlite3_errstr\"] = Module[\"asm\"][\"sqlite3_errstr\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_limit = Module[\"_sqlite3_limit\"] = function() {\n  return (_sqlite3_limit = Module[\"_sqlite3_limit\"] = Module[\"asm\"][\"sqlite3_limit\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_open = Module[\"_sqlite3_open\"] = function() {\n  return (_sqlite3_open = Module[\"_sqlite3_open\"] = Module[\"asm\"][\"sqlite3_open\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_open_v2 = Module[\"_sqlite3_open_v2\"] = function() {\n  return (_sqlite3_open_v2 = Module[\"_sqlite3_open_v2\"] = Module[\"asm\"][\"sqlite3_open_v2\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_create_collation = Module[\"_sqlite3_create_collation\"] = function() {\n  return (_sqlite3_create_collation = Module[\"_sqlite3_create_collation\"] = Module[\"asm\"][\"sqlite3_create_collation\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_create_collation_v2 = Module[\"_sqlite3_create_collation_v2\"] = function() {\n  return (_sqlite3_create_collation_v2 = Module[\"_sqlite3_create_collation_v2\"] = Module[\"asm\"][\"sqlite3_create_collation_v2\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_collation_needed = Module[\"_sqlite3_collation_needed\"] = function() {\n  return (_sqlite3_collation_needed = Module[\"_sqlite3_collation_needed\"] = Module[\"asm\"][\"sqlite3_collation_needed\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_table_column_metadata = Module[\"_sqlite3_table_column_metadata\"] = function() {\n  return (_sqlite3_table_column_metadata = Module[\"_sqlite3_table_column_metadata\"] = Module[\"asm\"][\"sqlite3_table_column_metadata\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_extended_result_codes = Module[\"_sqlite3_extended_result_codes\"] = function() {\n  return (_sqlite3_extended_result_codes = Module[\"_sqlite3_extended_result_codes\"] = Module[\"asm\"][\"sqlite3_extended_result_codes\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_uri_key = Module[\"_sqlite3_uri_key\"] = function() {\n  return (_sqlite3_uri_key = Module[\"_sqlite3_uri_key\"] = Module[\"asm\"][\"sqlite3_uri_key\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_uri_int64 = Module[\"_sqlite3_uri_int64\"] = function() {\n  return (_sqlite3_uri_int64 = Module[\"_sqlite3_uri_int64\"] = Module[\"asm\"][\"sqlite3_uri_int64\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_db_name = Module[\"_sqlite3_db_name\"] = function() {\n  return (_sqlite3_db_name = Module[\"_sqlite3_db_name\"] = Module[\"asm\"][\"sqlite3_db_name\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_db_filename = Module[\"_sqlite3_db_filename\"] = function() {\n  return (_sqlite3_db_filename = Module[\"_sqlite3_db_filename\"] = Module[\"asm\"][\"sqlite3_db_filename\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_compileoption_used = Module[\"_sqlite3_compileoption_used\"] = function() {\n  return (_sqlite3_compileoption_used = Module[\"_sqlite3_compileoption_used\"] = Module[\"asm\"][\"sqlite3_compileoption_used\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_compileoption_get = Module[\"_sqlite3_compileoption_get\"] = function() {\n  return (_sqlite3_compileoption_get = Module[\"_sqlite3_compileoption_get\"] = Module[\"asm\"][\"sqlite3_compileoption_get\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3session_diff = Module[\"_sqlite3session_diff\"] = function() {\n  return (_sqlite3session_diff = Module[\"_sqlite3session_diff\"] = Module[\"asm\"][\"sqlite3session_diff\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3session_attach = Module[\"_sqlite3session_attach\"] = function() {\n  return (_sqlite3session_attach = Module[\"_sqlite3session_attach\"] = Module[\"asm\"][\"sqlite3session_attach\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3session_create = Module[\"_sqlite3session_create\"] = function() {\n  return (_sqlite3session_create = Module[\"_sqlite3session_create\"] = Module[\"asm\"][\"sqlite3session_create\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3session_delete = Module[\"_sqlite3session_delete\"] = function() {\n  return (_sqlite3session_delete = Module[\"_sqlite3session_delete\"] = Module[\"asm\"][\"sqlite3session_delete\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3session_table_filter = Module[\"_sqlite3session_table_filter\"] = function() {\n  return (_sqlite3session_table_filter = Module[\"_sqlite3session_table_filter\"] = Module[\"asm\"][\"sqlite3session_table_filter\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3session_changeset = Module[\"_sqlite3session_changeset\"] = function() {\n  return (_sqlite3session_changeset = Module[\"_sqlite3session_changeset\"] = Module[\"asm\"][\"sqlite3session_changeset\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3session_changeset_strm = Module[\"_sqlite3session_changeset_strm\"] = function() {\n  return (_sqlite3session_changeset_strm = Module[\"_sqlite3session_changeset_strm\"] = Module[\"asm\"][\"sqlite3session_changeset_strm\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3session_patchset_strm = Module[\"_sqlite3session_patchset_strm\"] = function() {\n  return (_sqlite3session_patchset_strm = Module[\"_sqlite3session_patchset_strm\"] = Module[\"asm\"][\"sqlite3session_patchset_strm\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3session_patchset = Module[\"_sqlite3session_patchset\"] = function() {\n  return (_sqlite3session_patchset = Module[\"_sqlite3session_patchset\"] = Module[\"asm\"][\"sqlite3session_patchset\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3session_enable = Module[\"_sqlite3session_enable\"] = function() {\n  return (_sqlite3session_enable = Module[\"_sqlite3session_enable\"] = Module[\"asm\"][\"sqlite3session_enable\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3session_indirect = Module[\"_sqlite3session_indirect\"] = function() {\n  return (_sqlite3session_indirect = Module[\"_sqlite3session_indirect\"] = Module[\"asm\"][\"sqlite3session_indirect\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3session_isempty = Module[\"_sqlite3session_isempty\"] = function() {\n  return (_sqlite3session_isempty = Module[\"_sqlite3session_isempty\"] = Module[\"asm\"][\"sqlite3session_isempty\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3session_memory_used = Module[\"_sqlite3session_memory_used\"] = function() {\n  return (_sqlite3session_memory_used = Module[\"_sqlite3session_memory_used\"] = Module[\"asm\"][\"sqlite3session_memory_used\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3session_object_config = Module[\"_sqlite3session_object_config\"] = function() {\n  return (_sqlite3session_object_config = Module[\"_sqlite3session_object_config\"] = Module[\"asm\"][\"sqlite3session_object_config\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3session_changeset_size = Module[\"_sqlite3session_changeset_size\"] = function() {\n  return (_sqlite3session_changeset_size = Module[\"_sqlite3session_changeset_size\"] = Module[\"asm\"][\"sqlite3session_changeset_size\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3changeset_start = Module[\"_sqlite3changeset_start\"] = function() {\n  return (_sqlite3changeset_start = Module[\"_sqlite3changeset_start\"] = Module[\"asm\"][\"sqlite3changeset_start\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3changeset_start_v2 = Module[\"_sqlite3changeset_start_v2\"] = function() {\n  return (_sqlite3changeset_start_v2 = Module[\"_sqlite3changeset_start_v2\"] = Module[\"asm\"][\"sqlite3changeset_start_v2\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3changeset_start_strm = Module[\"_sqlite3changeset_start_strm\"] = function() {\n  return (_sqlite3changeset_start_strm = Module[\"_sqlite3changeset_start_strm\"] = Module[\"asm\"][\"sqlite3changeset_start_strm\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3changeset_start_v2_strm = Module[\"_sqlite3changeset_start_v2_strm\"] = function() {\n  return (_sqlite3changeset_start_v2_strm = Module[\"_sqlite3changeset_start_v2_strm\"] = Module[\"asm\"][\"sqlite3changeset_start_v2_strm\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3changeset_next = Module[\"_sqlite3changeset_next\"] = function() {\n  return (_sqlite3changeset_next = Module[\"_sqlite3changeset_next\"] = Module[\"asm\"][\"sqlite3changeset_next\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3changeset_op = Module[\"_sqlite3changeset_op\"] = function() {\n  return (_sqlite3changeset_op = Module[\"_sqlite3changeset_op\"] = Module[\"asm\"][\"sqlite3changeset_op\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3changeset_pk = Module[\"_sqlite3changeset_pk\"] = function() {\n  return (_sqlite3changeset_pk = Module[\"_sqlite3changeset_pk\"] = Module[\"asm\"][\"sqlite3changeset_pk\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3changeset_old = Module[\"_sqlite3changeset_old\"] = function() {\n  return (_sqlite3changeset_old = Module[\"_sqlite3changeset_old\"] = Module[\"asm\"][\"sqlite3changeset_old\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3changeset_new = Module[\"_sqlite3changeset_new\"] = function() {\n  return (_sqlite3changeset_new = Module[\"_sqlite3changeset_new\"] = Module[\"asm\"][\"sqlite3changeset_new\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3changeset_conflict = Module[\"_sqlite3changeset_conflict\"] = function() {\n  return (_sqlite3changeset_conflict = Module[\"_sqlite3changeset_conflict\"] = Module[\"asm\"][\"sqlite3changeset_conflict\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3changeset_fk_conflicts = Module[\"_sqlite3changeset_fk_conflicts\"] = function() {\n  return (_sqlite3changeset_fk_conflicts = Module[\"_sqlite3changeset_fk_conflicts\"] = Module[\"asm\"][\"sqlite3changeset_fk_conflicts\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3changeset_finalize = Module[\"_sqlite3changeset_finalize\"] = function() {\n  return (_sqlite3changeset_finalize = Module[\"_sqlite3changeset_finalize\"] = Module[\"asm\"][\"sqlite3changeset_finalize\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3changeset_invert = Module[\"_sqlite3changeset_invert\"] = function() {\n  return (_sqlite3changeset_invert = Module[\"_sqlite3changeset_invert\"] = Module[\"asm\"][\"sqlite3changeset_invert\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3changeset_invert_strm = Module[\"_sqlite3changeset_invert_strm\"] = function() {\n  return (_sqlite3changeset_invert_strm = Module[\"_sqlite3changeset_invert_strm\"] = Module[\"asm\"][\"sqlite3changeset_invert_strm\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3changeset_apply_v2 = Module[\"_sqlite3changeset_apply_v2\"] = function() {\n  return (_sqlite3changeset_apply_v2 = Module[\"_sqlite3changeset_apply_v2\"] = Module[\"asm\"][\"sqlite3changeset_apply_v2\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3changeset_apply = Module[\"_sqlite3changeset_apply\"] = function() {\n  return (_sqlite3changeset_apply = Module[\"_sqlite3changeset_apply\"] = Module[\"asm\"][\"sqlite3changeset_apply\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3changeset_apply_v2_strm = Module[\"_sqlite3changeset_apply_v2_strm\"] = function() {\n  return (_sqlite3changeset_apply_v2_strm = Module[\"_sqlite3changeset_apply_v2_strm\"] = Module[\"asm\"][\"sqlite3changeset_apply_v2_strm\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3changeset_apply_strm = Module[\"_sqlite3changeset_apply_strm\"] = function() {\n  return (_sqlite3changeset_apply_strm = Module[\"_sqlite3changeset_apply_strm\"] = Module[\"asm\"][\"sqlite3changeset_apply_strm\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3changegroup_new = Module[\"_sqlite3changegroup_new\"] = function() {\n  return (_sqlite3changegroup_new = Module[\"_sqlite3changegroup_new\"] = Module[\"asm\"][\"sqlite3changegroup_new\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3changegroup_add = Module[\"_sqlite3changegroup_add\"] = function() {\n  return (_sqlite3changegroup_add = Module[\"_sqlite3changegroup_add\"] = Module[\"asm\"][\"sqlite3changegroup_add\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3changegroup_output = Module[\"_sqlite3changegroup_output\"] = function() {\n  return (_sqlite3changegroup_output = Module[\"_sqlite3changegroup_output\"] = Module[\"asm\"][\"sqlite3changegroup_output\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3changegroup_add_strm = Module[\"_sqlite3changegroup_add_strm\"] = function() {\n  return (_sqlite3changegroup_add_strm = Module[\"_sqlite3changegroup_add_strm\"] = Module[\"asm\"][\"sqlite3changegroup_add_strm\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3changegroup_output_strm = Module[\"_sqlite3changegroup_output_strm\"] = function() {\n  return (_sqlite3changegroup_output_strm = Module[\"_sqlite3changegroup_output_strm\"] = Module[\"asm\"][\"sqlite3changegroup_output_strm\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3changegroup_delete = Module[\"_sqlite3changegroup_delete\"] = function() {\n  return (_sqlite3changegroup_delete = Module[\"_sqlite3changegroup_delete\"] = Module[\"asm\"][\"sqlite3changegroup_delete\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3changeset_concat = Module[\"_sqlite3changeset_concat\"] = function() {\n  return (_sqlite3changeset_concat = Module[\"_sqlite3changeset_concat\"] = Module[\"asm\"][\"sqlite3changeset_concat\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3changeset_concat_strm = Module[\"_sqlite3changeset_concat_strm\"] = function() {\n  return (_sqlite3changeset_concat_strm = Module[\"_sqlite3changeset_concat_strm\"] = Module[\"asm\"][\"sqlite3changeset_concat_strm\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3session_config = Module[\"_sqlite3session_config\"] = function() {\n  return (_sqlite3session_config = Module[\"_sqlite3session_config\"] = Module[\"asm\"][\"sqlite3session_config\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_sourceid = Module[\"_sqlite3_sourceid\"] = function() {\n  return (_sqlite3_sourceid = Module[\"_sqlite3_sourceid\"] = Module[\"asm\"][\"sqlite3_sourceid\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_pstack_ptr = Module[\"_sqlite3_wasm_pstack_ptr\"] = function() {\n  return (_sqlite3_wasm_pstack_ptr = Module[\"_sqlite3_wasm_pstack_ptr\"] = Module[\"asm\"][\"sqlite3_wasm_pstack_ptr\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_pstack_restore = Module[\"_sqlite3_wasm_pstack_restore\"] = function() {\n  return (_sqlite3_wasm_pstack_restore = Module[\"_sqlite3_wasm_pstack_restore\"] = Module[\"asm\"][\"sqlite3_wasm_pstack_restore\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_pstack_alloc = Module[\"_sqlite3_wasm_pstack_alloc\"] = function() {\n  return (_sqlite3_wasm_pstack_alloc = Module[\"_sqlite3_wasm_pstack_alloc\"] = Module[\"asm\"][\"sqlite3_wasm_pstack_alloc\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_pstack_remaining = Module[\"_sqlite3_wasm_pstack_remaining\"] = function() {\n  return (_sqlite3_wasm_pstack_remaining = Module[\"_sqlite3_wasm_pstack_remaining\"] = Module[\"asm\"][\"sqlite3_wasm_pstack_remaining\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_pstack_quota = Module[\"_sqlite3_wasm_pstack_quota\"] = function() {\n  return (_sqlite3_wasm_pstack_quota = Module[\"_sqlite3_wasm_pstack_quota\"] = Module[\"asm\"][\"sqlite3_wasm_pstack_quota\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_db_error = Module[\"_sqlite3_wasm_db_error\"] = function() {\n  return (_sqlite3_wasm_db_error = Module[\"_sqlite3_wasm_db_error\"] = Module[\"asm\"][\"sqlite3_wasm_db_error\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_test_struct = Module[\"_sqlite3_wasm_test_struct\"] = function() {\n  return (_sqlite3_wasm_test_struct = Module[\"_sqlite3_wasm_test_struct\"] = Module[\"asm\"][\"sqlite3_wasm_test_struct\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_enum_json = Module[\"_sqlite3_wasm_enum_json\"] = function() {\n  return (_sqlite3_wasm_enum_json = Module[\"_sqlite3_wasm_enum_json\"] = Module[\"asm\"][\"sqlite3_wasm_enum_json\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_vfs_unlink = Module[\"_sqlite3_wasm_vfs_unlink\"] = function() {\n  return (_sqlite3_wasm_vfs_unlink = Module[\"_sqlite3_wasm_vfs_unlink\"] = Module[\"asm\"][\"sqlite3_wasm_vfs_unlink\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_db_vfs = Module[\"_sqlite3_wasm_db_vfs\"] = function() {\n  return (_sqlite3_wasm_db_vfs = Module[\"_sqlite3_wasm_db_vfs\"] = Module[\"asm\"][\"sqlite3_wasm_db_vfs\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_db_reset = Module[\"_sqlite3_wasm_db_reset\"] = function() {\n  return (_sqlite3_wasm_db_reset = Module[\"_sqlite3_wasm_db_reset\"] = Module[\"asm\"][\"sqlite3_wasm_db_reset\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_db_export_chunked = Module[\"_sqlite3_wasm_db_export_chunked\"] = function() {\n  return (_sqlite3_wasm_db_export_chunked = Module[\"_sqlite3_wasm_db_export_chunked\"] = Module[\"asm\"][\"sqlite3_wasm_db_export_chunked\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_db_serialize = Module[\"_sqlite3_wasm_db_serialize\"] = function() {\n  return (_sqlite3_wasm_db_serialize = Module[\"_sqlite3_wasm_db_serialize\"] = Module[\"asm\"][\"sqlite3_wasm_db_serialize\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_vfs_create_file = Module[\"_sqlite3_wasm_vfs_create_file\"] = function() {\n  return (_sqlite3_wasm_vfs_create_file = Module[\"_sqlite3_wasm_vfs_create_file\"] = Module[\"asm\"][\"sqlite3_wasm_vfs_create_file\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_kvvfsMakeKeyOnPstack = Module[\"_sqlite3_wasm_kvvfsMakeKeyOnPstack\"] = function() {\n  return (_sqlite3_wasm_kvvfsMakeKeyOnPstack = Module[\"_sqlite3_wasm_kvvfsMakeKeyOnPstack\"] = Module[\"asm\"][\"sqlite3_wasm_kvvfsMakeKeyOnPstack\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_kvvfs_methods = Module[\"_sqlite3_wasm_kvvfs_methods\"] = function() {\n  return (_sqlite3_wasm_kvvfs_methods = Module[\"_sqlite3_wasm_kvvfs_methods\"] = Module[\"asm\"][\"sqlite3_wasm_kvvfs_methods\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_vtab_config = Module[\"_sqlite3_wasm_vtab_config\"] = function() {\n  return (_sqlite3_wasm_vtab_config = Module[\"_sqlite3_wasm_vtab_config\"] = Module[\"asm\"][\"sqlite3_wasm_vtab_config\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_db_config_ip = Module[\"_sqlite3_wasm_db_config_ip\"] = function() {\n  return (_sqlite3_wasm_db_config_ip = Module[\"_sqlite3_wasm_db_config_ip\"] = Module[\"asm\"][\"sqlite3_wasm_db_config_ip\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_db_config_pii = Module[\"_sqlite3_wasm_db_config_pii\"] = function() {\n  return (_sqlite3_wasm_db_config_pii = Module[\"_sqlite3_wasm_db_config_pii\"] = Module[\"asm\"][\"sqlite3_wasm_db_config_pii\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_db_config_s = Module[\"_sqlite3_wasm_db_config_s\"] = function() {\n  return (_sqlite3_wasm_db_config_s = Module[\"_sqlite3_wasm_db_config_s\"] = Module[\"asm\"][\"sqlite3_wasm_db_config_s\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_config_i = Module[\"_sqlite3_wasm_config_i\"] = function() {\n  return (_sqlite3_wasm_config_i = Module[\"_sqlite3_wasm_config_i\"] = Module[\"asm\"][\"sqlite3_wasm_config_i\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_config_ii = Module[\"_sqlite3_wasm_config_ii\"] = function() {\n  return (_sqlite3_wasm_config_ii = Module[\"_sqlite3_wasm_config_ii\"] = Module[\"asm\"][\"sqlite3_wasm_config_ii\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_config_j = Module[\"_sqlite3_wasm_config_j\"] = function() {\n  return (_sqlite3_wasm_config_j = Module[\"_sqlite3_wasm_config_j\"] = Module[\"asm\"][\"sqlite3_wasm_config_j\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_init_wasmfs = Module[\"_sqlite3_wasm_init_wasmfs\"] = function() {\n  return (_sqlite3_wasm_init_wasmfs = Module[\"_sqlite3_wasm_init_wasmfs\"] = Module[\"asm\"][\"sqlite3_wasm_init_wasmfs\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_test_intptr = Module[\"_sqlite3_wasm_test_intptr\"] = function() {\n  return (_sqlite3_wasm_test_intptr = Module[\"_sqlite3_wasm_test_intptr\"] = Module[\"asm\"][\"sqlite3_wasm_test_intptr\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_test_voidptr = Module[\"_sqlite3_wasm_test_voidptr\"] = function() {\n  return (_sqlite3_wasm_test_voidptr = Module[\"_sqlite3_wasm_test_voidptr\"] = Module[\"asm\"][\"sqlite3_wasm_test_voidptr\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_test_int64_max = Module[\"_sqlite3_wasm_test_int64_max\"] = function() {\n  return (_sqlite3_wasm_test_int64_max = Module[\"_sqlite3_wasm_test_int64_max\"] = Module[\"asm\"][\"sqlite3_wasm_test_int64_max\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_test_int64_min = Module[\"_sqlite3_wasm_test_int64_min\"] = function() {\n  return (_sqlite3_wasm_test_int64_min = Module[\"_sqlite3_wasm_test_int64_min\"] = Module[\"asm\"][\"sqlite3_wasm_test_int64_min\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_test_int64_times2 = Module[\"_sqlite3_wasm_test_int64_times2\"] = function() {\n  return (_sqlite3_wasm_test_int64_times2 = Module[\"_sqlite3_wasm_test_int64_times2\"] = Module[\"asm\"][\"sqlite3_wasm_test_int64_times2\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_test_int64_minmax = Module[\"_sqlite3_wasm_test_int64_minmax\"] = function() {\n  return (_sqlite3_wasm_test_int64_minmax = Module[\"_sqlite3_wasm_test_int64_minmax\"] = Module[\"asm\"][\"sqlite3_wasm_test_int64_minmax\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_test_int64ptr = Module[\"_sqlite3_wasm_test_int64ptr\"] = function() {\n  return (_sqlite3_wasm_test_int64ptr = Module[\"_sqlite3_wasm_test_int64ptr\"] = Module[\"asm\"][\"sqlite3_wasm_test_int64ptr\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_test_stack_overflow = Module[\"_sqlite3_wasm_test_stack_overflow\"] = function() {\n  return (_sqlite3_wasm_test_stack_overflow = Module[\"_sqlite3_wasm_test_stack_overflow\"] = Module[\"asm\"][\"sqlite3_wasm_test_stack_overflow\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _sqlite3_wasm_test_str_hello = Module[\"_sqlite3_wasm_test_str_hello\"] = function() {\n  return (_sqlite3_wasm_test_str_hello = Module[\"_sqlite3_wasm_test_str_hello\"] = Module[\"asm\"][\"sqlite3_wasm_test_str_hello\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _malloc = Module[\"_malloc\"] = function() {\n  return (_malloc = Module[\"_malloc\"] = Module[\"asm\"][\"malloc\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _free = Module[\"_free\"] = function() {\n  return (_free = Module[\"_free\"] = Module[\"asm\"][\"free\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _realloc = Module[\"_realloc\"] = function() {\n  return (_realloc = Module[\"_realloc\"] = Module[\"asm\"][\"realloc\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar stackSave = function() {\n  return (stackSave = Module[\"asm\"][\"stackSave\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar stackRestore = function() {\n  return (stackRestore = Module[\"asm\"][\"stackRestore\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar stackAlloc = function() {\n  return (stackAlloc = Module[\"asm\"][\"stackAlloc\"]).apply(null, arguments);\n};\n\n\n\n// include: postamble.js\n// === Auto-generated postamble setup entry stuff ===\n\nModule[\"wasmMemory\"] = wasmMemory;\n\n\nvar calledRun;\n\ndependenciesFulfilled = function runCaller() {\n  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)\n  if (!calledRun) run();\n  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled\n};\n\nfunction run() {\n\n  if (runDependencies > 0) {\n    return;\n  }\n\n  preRun();\n\n  // a preRun added a dependency, run will be called later\n  if (runDependencies > 0) {\n    return;\n  }\n\n  function doRun() {\n    // run may have just been called through dependencies being fulfilled just in this very frame,\n    // or while the async setStatus time below was happening\n    if (calledRun) return;\n    calledRun = true;\n    Module['calledRun'] = true;\n\n    if (ABORT) return;\n\n    initRuntime();\n\n    readyPromiseResolve(Module);\n    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();\n\n    postRun();\n  }\n\n  if (Module['setStatus']) {\n    Module['setStatus']('Running...');\n    setTimeout(function() {\n      setTimeout(function() {\n        Module['setStatus']('');\n      }, 1);\n      doRun();\n    }, 1);\n  } else\n  {\n    doRun();\n  }\n}\n\nif (Module['preInit']) {\n  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];\n  while (Module['preInit'].length > 0) {\n    Module['preInit'].pop()();\n  }\n}\n\nrun();\n\n\n// end include: postamble.js\n// include: /home/mmom/src/sqlite-wasm-http/deps/sqlite/ext/wasm/bld/post-js.bundler-friendly.js\n/* BEGIN FILE: api/post-js-header.js */\n/**\n   post-js-header.js is to be prepended to other code to create\n   post-js.js for use with Emscripten's --post-js flag. This code\n   requires that it be running in that context. The Emscripten\n   environment must have been set up already but it will not have\n   loaded its WASM when the code in this file is run. The function it\n   installs will be run after the WASM module is loaded, at which\n   point the sqlite3 JS API bits will get set up.\n*/\nif(!Module.postRun) Module.postRun = [];\nModule.postRun.push(function(Module/*the Emscripten-style module object*/){\n  'use strict';\n  /* This function will contain at least the following:\n\n     - post-js-header.js (this file)\n     - sqlite3-api-prologue.js  => Bootstrapping bits to attach the rest to\n     - common/whwasmutil.js     => Replacements for much of Emscripten's glue\n     - jaccwaby/jaccwabyt.js    => Jaccwabyt (C/JS struct binding)\n     - sqlite3-api-glue.js      => glues previous parts together\n     - sqlite3-api-oo.js        => SQLite3 OO API #1\n     - sqlite3-api-worker1.js   => Worker-based API\n     - sqlite3-vfs-helper.js    => Internal-use utilities for...\n     - sqlite3-vfs-opfs.js      => OPFS VFS\n     - sqlite3-api-cleanup.js   => final API cleanup\n     - post-js-footer.js        => closes this postRun() function\n  */\n/* END FILE: api/post-js-header.js */\n/* BEGIN FILE: ./bld/sqlite3-api.c-pp.js */\n/* BEGIN FILE: ./bld/sqlite3-license-version.js */\n/*\n** LICENSE for the sqlite3 WebAssembly/JavaScript APIs.\n**\n** This bundle (typically released as sqlite3.js or sqlite3.mjs)\n** is an amalgamation of JavaScript source code from two projects:\n**\n** 1) https://emscripten.org: the Emscripten \"glue code\" is covered by\n**    the terms of the MIT license and University of Illinois/NCSA\n**    Open Source License, as described at:\n**\n**    https://emscripten.org/docs/introducing_emscripten/emscripten_license.html\n**\n** 2) https://sqlite.org: all code and documentation labeled as being\n**    from this source are released under the same terms as the sqlite3\n**    C library:\n**\n** 2022-10-16\n**\n** The author disclaims copyright to this source code.  In place of a\n** legal notice, here is a blessing:\n**\n** *   May you do good and not evil.\n** *   May you find forgiveness for yourself and forgive others.\n** *   May you share freely, never taking more than you give.\n*/\n/*\n** This code was built from sqlite3 version...\n**\n** SQLITE_VERSION \"3.42.0\"\n** SQLITE_VERSION_NUMBER 3042000\n** SQLITE_SOURCE_ID \"2023-03-30 12:19:38 8724fe7426da55d19dba7b30e09321ba30c73286513864cb05de32f72e50ee31\"\n**\n** Using the Emscripten SDK version 3.1.32.\n*/\n/* END FILE: ./bld/sqlite3-license-version.js */\n/* BEGIN FILE: api/sqlite3-api-prologue.js */\n/*\n  2022-05-22\n\n  The author disclaims copyright to this source code.  In place of a\n  legal notice, here is a blessing:\n\n  *   May you do good and not evil.\n  *   May you find forgiveness for yourself and forgive others.\n  *   May you share freely, never taking more than you give.\n\n  ***********************************************************************\n\n  This file is intended to be combined at build-time with other\n  related code, most notably a header and footer which wraps this\n  whole file into an Emscripten Module.postRun() handler. The sqlite3\n  JS API has no hard requirements on Emscripten and does not expose\n  any Emscripten APIs to clients. It is structured such that its build\n  can be tweaked to include it in arbitrary WASM environments which\n  can supply the necessary underlying features (e.g. a POSIX file I/O\n  layer).\n\n  Main project home page: https://sqlite.org\n\n  Documentation home page: https://sqlite.org/wasm\n*/\n\n/**\n   sqlite3ApiBootstrap() is the only global symbol persistently\n   exposed by this API. It is intended to be called one time at the\n   end of the API amalgamation process, passed configuration details\n   for the current environment, and then optionally be removed from\n   the global object using `delete globalThis.sqlite3ApiBootstrap`.\n\n   This function is not intended for client-level use. It is intended\n   for use in creating bundles configured for specific WASM\n   environments.\n\n   This function expects a configuration object, intended to abstract\n   away details specific to any given WASM environment, primarily so\n   that it can be used without any _direct_ dependency on\n   Emscripten. (Note the default values for the config object!) The\n   config object is only honored the first time this is\n   called. Subsequent calls ignore the argument and return the same\n   (configured) object which gets initialized by the first call.  This\n   function will throw if any of the required config options are\n   missing.\n\n   The config object properties include:\n\n   - `exports`[^1]: the \"exports\" object for the current WASM\n     environment. In an Emscripten-based build, this should be set to\n     `Module['asm']`.\n\n   - `memory`[^1]: optional WebAssembly.Memory object, defaulting to\n     `exports.memory`. In Emscripten environments this should be set\n     to `Module.wasmMemory` if the build uses `-sIMPORT_MEMORY`, or be\n     left undefined/falsy to default to `exports.memory` when using\n     WASM-exported memory.\n\n   - `bigIntEnabled`: true if BigInt support is enabled. Defaults to\n     true if `globalThis.BigInt64Array` is available, else false. Some APIs\n     will throw exceptions if called without BigInt support, as BigInt\n     is required for marshalling C-side int64 into and out of JS.\n     (Sidebar: it is technically possible to add int64 support via\n     marshalling of int32 pairs, but doing so is unduly invasive.)\n\n   - `allocExportName`: the name of the function, in `exports`, of the\n     `malloc(3)`-compatible routine for the WASM environment. Defaults\n     to `\"sqlite3_malloc\"`. Beware that using any allocator other than\n     sqlite3_malloc() may require care in certain client-side code\n     regarding which allocator is uses. Notably, sqlite3_deserialize()\n     and sqlite3_serialize() can only safely use memory from different\n     allocators under very specific conditions. The canonical builds\n     of this API guaranty that `sqlite3_malloc()` is the JS-side\n     allocator implementation.\n\n   - `deallocExportName`: the name of the function, in `exports`, of\n     the `free(3)`-compatible routine for the WASM\n     environment. Defaults to `\"sqlite3_free\"`.\n\n   - `reallocExportName`: the name of the function, in `exports`, of\n     the `realloc(3)`-compatible routine for the WASM\n     environment. Defaults to `\"sqlite3_realloc\"`.\n\n   - `debug`, `log`, `warn`, and `error` may be functions equivalent\n     to the like-named methods of the global `console` object. By\n     default, these map directly to their `console` counterparts, but\n     can be replaced with (e.g.) empty functions to squelch all such\n     output.\n\n   - `wasmfsOpfsDir`[^1]: As of 2022-12-17, this feature does not\n     currently work due to incompatible Emscripten-side changes made\n     in the WASMFS+OPFS combination. This option is currently ignored.\n\n   [^1] = This property may optionally be a function, in which case this\n          function re-assigns calls that function to fetch the value,\n          enabling delayed evaluation.\n\n   The returned object is the top-level sqlite3 namespace object.\n\n*/\n'use strict';\nglobalThis.sqlite3ApiBootstrap = function sqlite3ApiBootstrap(\n  apiConfig = (globalThis.sqlite3ApiConfig || sqlite3ApiBootstrap.defaultConfig)\n){\n  if(sqlite3ApiBootstrap.sqlite3){ /* already initalized */\n    console.warn(\"sqlite3ApiBootstrap() called multiple times.\",\n                 \"Config and external initializers are ignored on calls after the first.\");\n    return sqlite3ApiBootstrap.sqlite3;\n  }\n  const config = Object.assign(Object.create(null),{\n    exports: undefined,\n    memory: undefined,\n    bigIntEnabled: (()=>{\n      if('undefined'!==typeof Module){\n        /* Emscripten module will contain HEAPU64 when built with\n           -sWASM_BIGINT=1, else it will not. */\n        return !!Module.HEAPU64;\n      }\n      return !!globalThis.BigInt64Array;\n    })(),\n    debug: console.debug.bind(console),\n    warn: console.warn.bind(console),\n    error: console.error.bind(console),\n    log: console.log.bind(console),\n    wasmfsOpfsDir: '/opfs',\n    /**\n       useStdAlloc is just for testing an allocator discrepancy. The\n       docs guarantee that this is false in the canonical builds. For\n       99% of purposes it doesn't matter which allocators we use, but\n       it becomes significant with, e.g., sqlite3_deserialize()\n       and certain wasm.xWrap.resultAdapter()s.\n    */\n    useStdAlloc: false\n  }, apiConfig || {});\n\n  Object.assign(config, {\n    allocExportName: config.useStdAlloc ? 'malloc' : 'sqlite3_malloc',\n    deallocExportName: config.useStdAlloc ? 'free' : 'sqlite3_free',\n    reallocExportName: config.useStdAlloc ? 'realloc' : 'sqlite3_realloc'\n  }, config);\n\n  [\n    // If any of these config options are functions, replace them with\n    // the result of calling that function...\n    'exports', 'memory', 'wasmfsOpfsDir'\n  ].forEach((k)=>{\n    if('function' === typeof config[k]){\n      config[k] = config[k]();\n    }\n  });\n  config.wasmOpfsDir =\n    /* 2022-12-17: WASMFS+OPFS can no longer be activated from the\n       main thread (aborts via a failed assert() if it's attempted),\n       which eliminates any(?) benefit to supporting it. */  false;\n\n  /**\n      The main sqlite3 binding API gets installed into this object,\n      mimicking the C API as closely as we can. The numerous members\n      names with prefixes 'sqlite3_' and 'SQLITE_' behave, insofar as\n      possible, identically to the C-native counterparts, as documented at:\n\n      https://www.sqlite.org/c3ref/intro.html\n\n      A very few exceptions require an additional level of proxy\n      function or may otherwise require special attention in the WASM\n      environment, and all such cases are documented somewhere below\n      in this file or in sqlite3-api-glue.js. capi members which are\n      not documented are installed as 1-to-1 proxies for their\n      C-side counterparts.\n  */\n  const capi = Object.create(null);\n  /**\n     Holds state which are specific to the WASM-related\n     infrastructure and glue code.\n\n     Note that a number of members of this object are injected\n     dynamically after the api object is fully constructed, so\n     not all are documented in this file.\n  */\n  const wasm = Object.create(null);\n\n  /** Internal helper for SQLite3Error ctor. */\n  const __rcStr = (rc)=>{\n    return (capi.sqlite3_js_rc_str && capi.sqlite3_js_rc_str(rc))\n           || (\"Unknown result code #\"+rc);\n  };\n\n  /** Internal helper for SQLite3Error ctor. */\n  const __isInt = (n)=>'number'===typeof n && n===(n | 0);\n\n  /**\n     An Error subclass specifically for reporting DB-level errors and\n     enabling clients to unambiguously identify such exceptions.\n     The C-level APIs never throw, but some of the higher-level\n     C-style APIs do and the object-oriented APIs use exceptions\n     exclusively to report errors.\n  */\n  class SQLite3Error extends Error {\n    /**\n       Constructs this object with a message depending on its arguments:\n\n       If its first argument is an integer, it is assumed to be\n       an SQLITE_... result code and it is passed to\n       sqlite3.capi.sqlite3_js_rc_str() to stringify it.\n\n       If called with exactly 2 arguments and the 2nd is an object,\n       that object is treated as the 2nd argument to the parent\n       constructor.\n\n       The exception's message is created by concatenating its\n       arguments with a space between each, except for the\n       two-args-with-an-objec form and that the first argument will\n       get coerced to a string, as described above, if it's an\n       integer.\n\n       If passed an integer first argument, the error object's\n       `resultCode` member will be set to the given integer value,\n       else it will be set to capi.SQLITE_ERROR.\n    */\n    constructor(...args){\n      let rc;\n      if(args.length){\n        if(__isInt(args[0])){\n          rc = args[0];\n          if(1===args.length){\n            super(__rcStr(args[0]));\n          }else{\n            const rcStr = __rcStr(rc);\n            if('object'===typeof args[1]){\n              super(rcStr,args[1]);\n            }else{\n              args[0] = rcStr+':';\n              super(args.join(' '));\n            }\n          }\n        }else{\n          if(2===args.length && 'object'===typeof args[1]){\n            super(...args);\n          }else{\n            super(args.join(' '));\n          }\n        }\n      }\n      this.resultCode = rc || capi.SQLITE_ERROR;\n      this.name = 'SQLite3Error';\n    }\n  };\n\n  /**\n     Functionally equivalent to the SQLite3Error constructor but may\n     be used as part of an expression, e.g.:\n\n     ```\n     return someFunction(x) || SQLite3Error.toss(...);\n     ```\n  */\n  SQLite3Error.toss = (...args)=>{\n    throw new SQLite3Error(...args);\n  };\n  const toss3 = SQLite3Error.toss;\n\n  if(config.wasmfsOpfsDir && !/^\\/[^/]+$/.test(config.wasmfsOpfsDir)){\n    toss3(\"config.wasmfsOpfsDir must be falsy or in the form '/dir-name'.\");\n  }\n\n  /**\n     Returns true if n is a 32-bit (signed) integer, else\n     false. This is used for determining when we need to switch to\n     double-type DB operations for integer values in order to keep\n     more precision.\n  */\n  const isInt32 = (n)=>{\n    return ('bigint'!==typeof n /*TypeError: can't convert BigInt to number*/)\n      && !!(n===(n|0) && n<=2147483647 && n>=-2147483648);\n  };\n  /**\n     Returns true if the given BigInt value is small enough to fit\n     into an int64 value, else false.\n  */\n  const bigIntFits64 = function f(b){\n    if(!f._max){\n      f._max = BigInt(\"0x7fffffffffffffff\");\n      f._min = ~f._max;\n    }\n    return b >= f._min && b <= f._max;\n  };\n\n  /**\n     Returns true if the given BigInt value is small enough to fit\n     into an int32, else false.\n  */\n  const bigIntFits32 = (b)=>(b >= (-0x7fffffffn - 1n) && b <= 0x7fffffffn);\n\n  /**\n     Returns true if the given BigInt value is small enough to fit\n     into a double value without loss of precision, else false.\n  */\n  const bigIntFitsDouble = function f(b){\n    if(!f._min){\n      f._min = Number.MIN_SAFE_INTEGER;\n      f._max = Number.MAX_SAFE_INTEGER;\n    }\n    return b >= f._min && b <= f._max;\n  };\n\n  /** Returns v if v appears to be a TypedArray, else false. */\n  const isTypedArray = (v)=>{\n    return (v && v.constructor && isInt32(v.constructor.BYTES_PER_ELEMENT)) ? v : false;\n  };\n\n  /** Internal helper to use in operations which need to distinguish\n      between TypedArrays which are backed by a SharedArrayBuffer\n      from those which are not. */\n  const __SAB = ('undefined'===typeof SharedArrayBuffer)\n        ? function(){} : SharedArrayBuffer;\n  /** Returns true if the given TypedArray object is backed by a\n      SharedArrayBuffer, else false. */\n  const isSharedTypedArray = (aTypedArray)=>(aTypedArray.buffer instanceof __SAB);\n\n  /**\n     Returns either aTypedArray.slice(begin,end) (if\n     aTypedArray.buffer is a SharedArrayBuffer) or\n     aTypedArray.subarray(begin,end) (if it's not).\n\n     This distinction is important for APIs which don't like to\n     work on SABs, e.g. TextDecoder, and possibly for our\n     own APIs which work on memory ranges which \"might\" be\n     modified by other threads while they're working.\n  */\n  const typedArrayPart = (aTypedArray, begin, end)=>{\n    return isSharedTypedArray(aTypedArray)\n      ? aTypedArray.slice(begin, end)\n      : aTypedArray.subarray(begin, end);\n  };\n\n  /**\n     Returns true if v appears to be one of our bind()-able TypedArray\n     types: Uint8Array or Int8Array or ArrayBuffer. Support for\n     TypedArrays with element sizes >1 is a potential TODO just\n     waiting on a use case to justify them. Until then, their `buffer`\n     property can be used to pass them as an ArrayBuffer. If it's not\n     a bindable array type, a falsy value is returned.\n  */\n  const isBindableTypedArray = (v)=>{\n    return v && (v instanceof Uint8Array\n                 || v instanceof Int8Array\n                 || v instanceof ArrayBuffer);\n  };\n\n  /**\n     Returns true if v appears to be one of the TypedArray types\n     which is legal for holding SQL code (as opposed to binary blobs).\n\n     Currently this is the same as isBindableTypedArray() but it\n     seems likely that we'll eventually want to add Uint32Array\n     and friends to the isBindableTypedArray() list but not to the\n     isSQLableTypedArray() list.\n  */\n  const isSQLableTypedArray = (v)=>{\n    return v && (v instanceof Uint8Array\n                 || v instanceof Int8Array\n                 || v instanceof ArrayBuffer);\n  };\n\n  /** Returns true if isBindableTypedArray(v) does, else throws with a message\n      that v is not a supported TypedArray value. */\n  const affirmBindableTypedArray = (v)=>{\n    return isBindableTypedArray(v)\n      || toss3(\"Value is not of a supported TypedArray type.\");\n  };\n\n  const utf8Decoder = new TextDecoder('utf-8');\n\n  /**\n     Uses TextDecoder to decode the given half-open range of the\n     given TypedArray to a string. This differs from a simple\n     call to TextDecoder in that it accounts for whether the\n     first argument is backed by a SharedArrayBuffer or not,\n     and can work more efficiently if it's not (TextDecoder\n     refuses to act upon an SAB).\n  */\n  const typedArrayToString = function(typedArray, begin, end){\n    return utf8Decoder.decode(typedArrayPart(typedArray, begin,end));\n  };\n\n  /**\n     If v is-a Array, its join(\"\") result is returned.  If\n     isSQLableTypedArray(v) is true then typedArrayToString(v) is\n     returned. If it looks like a WASM pointer, wasm.cstrToJs(v) is\n     returned. Else v is returned as-is.\n  */\n  const flexibleString = function(v){\n    if(isSQLableTypedArray(v)){\n      return typedArrayToString(\n        (v instanceof ArrayBuffer) ? new Uint8Array(v) : v\n      );\n    }\n    else if(Array.isArray(v)) return v.join(\"\");\n    else if(wasm.isPtr(v)) v = wasm.cstrToJs(v);\n    return v;\n  };\n\n  /**\n     An Error subclass specifically for reporting Wasm-level malloc()\n     failure and enabling clients to unambiguously identify such\n     exceptions.\n  */\n  class WasmAllocError extends Error {\n    /**\n       If called with 2 arguments and the 2nd one is an object, it\n       behaves like the Error constructor, else it concatenates all\n       arguments together with a single space between each to\n       construct an error message string. As a special case, if\n       called with no arguments then it uses a default error\n       message.\n    */\n    constructor(...args){\n      if(2===args.length && 'object'===typeof args[1]){\n        super(...args);\n      }else if(args.length){\n        super(args.join(' '));\n      }else{\n        super(\"Allocation failed.\");\n      }\n      this.resultCode = capi.SQLITE_NOMEM;\n      this.name = 'WasmAllocError';\n    }\n  };\n  /**\n     Functionally equivalent to the WasmAllocError constructor but may\n     be used as part of an expression, e.g.:\n\n     ```\n     return someAllocatingFunction(x) || WasmAllocError.toss(...);\n     ```\n  */\n  WasmAllocError.toss = (...args)=>{\n    throw new WasmAllocError(...args);\n  };\n\n  Object.assign(capi, {\n    /**\n       sqlite3_bind_blob() works exactly like its C counterpart unless\n       its 3rd argument is one of:\n\n       - JS string: the 3rd argument is converted to a C string, the\n         4th argument is ignored, and the C-string's length is used\n         in its place.\n\n       - Array: converted to a string as defined for \"flexible\n         strings\" and then it's treated as a JS string.\n\n       - Int8Array or Uint8Array: wasm.allocFromTypedArray() is used to\n         conver the memory to the WASM heap. If the 4th argument is\n         0 or greater, it is used as-is, otherwise the array's byteLength\n         value is used. This is an exception to the C API's undefined\n         behavior for a negative 4th argument, but results are undefined\n         if the given 4th argument value is greater than the byteLength\n         of the input array.\n\n       - If it's an ArrayBuffer, it gets wrapped in a Uint8Array and\n         treated as that type.\n\n       In all of those cases, the final argument (destructor) is\n       ignored and capi.SQLITE_WASM_DEALLOC is assumed.\n\n       A 3rd argument of `null` is treated as if it were a WASM pointer\n       of 0.\n\n       If the 3rd argument is neither a WASM pointer nor one of the\n       above-described types, capi.SQLITE_MISUSE is returned.\n\n       The first argument may be either an `sqlite3_stmt*` WASM\n       pointer or an sqlite3.oo1.Stmt instance.\n\n       For consistency with the C API, it requires the same number of\n       arguments. It returns capi.SQLITE_MISUSE if passed any other\n       argument count.\n    */\n    sqlite3_bind_blob: undefined/*installed later*/,\n\n    /**\n       sqlite3_bind_text() works exactly like its C counterpart unless\n       its 3rd argument is one of:\n\n       - JS string: the 3rd argument is converted to a C string, the\n         4th argument is ignored, and the C-string's length is used\n         in its place.\n\n       - Array: converted to a string as defined for \"flexible\n         strings\". The 4th argument is ignored and a value of -1\n         is assumed.\n\n       - Int8Array or Uint8Array: is assumed to contain UTF-8 text, is\n         converted to a string. The 4th argument is ignored, replaced\n         by the array's byteLength value.\n\n       - If it's an ArrayBuffer, it gets wrapped in a Uint8Array and\n         treated as that type.\n\n       In each of those cases, the final argument (text destructor) is\n       ignored and capi.SQLITE_WASM_DEALLOC is assumed.\n\n       A 3rd argument of `null` is treated as if it were a WASM pointer\n       of 0.\n\n       If the 3rd argument is neither a WASM pointer nor one of the\n       above-described types, capi.SQLITE_MISUSE is returned.\n\n       The first argument may be either an `sqlite3_stmt*` WASM\n       pointer or an sqlite3.oo1.Stmt instance.\n\n       For consistency with the C API, it requires the same number of\n       arguments. It returns capi.SQLITE_MISUSE if passed any other\n       argument count.\n\n       If client code needs to bind partial strings, it needs to\n       either parcel the string up before passing it in here or it\n       must pass in a WASM pointer for the 3rd argument and a valid\n       4th-argument value, taking care not to pass a value which\n       truncates a multi-byte UTF-8 character. When passing\n       WASM-format strings, it is important that the final argument be\n       valid or unexpected content can result can result, or even a\n       crash if the application reads past the WASM heap bounds.\n    */\n    sqlite3_bind_text: undefined/*installed later*/,\n\n    /**\n       sqlite3_create_function_v2() differs from its native\n       counterpart only in the following ways:\n\n       1) The fourth argument (`eTextRep`) argument must not specify\n       any encoding other than sqlite3.SQLITE_UTF8. The JS API does not\n       currently support any other encoding and likely never\n       will. This function does not replace that argument on its own\n       because it may contain other flags. As a special case, if\n       the bottom 4 bits of that argument are 0, SQLITE_UTF8 is\n       assumed.\n\n       2) Any of the four final arguments may be either WASM pointers\n       (assumed to be function pointers) or JS Functions. In the\n       latter case, each gets bound to WASM using\n       sqlite3.capi.wasm.installFunction() and that wrapper is passed\n       on to the native implementation.\n\n       For consistency with the C API, it requires the same number of\n       arguments. It returns capi.SQLITE_MISUSE if passed any other\n       argument count.\n\n       The semantics of JS functions are:\n\n       xFunc: is passed `(pCtx, ...values)`. Its return value becomes\n       the new SQL function's result.\n\n       xStep: is passed `(pCtx, ...values)`. Its return value is\n       ignored.\n\n       xFinal: is passed `(pCtx)`. Its return value becomes the new\n       aggregate SQL function's result.\n\n       xDestroy: is passed `(void*)`. Its return value is ignored. The\n       pointer passed to it is the one from the 5th argument to\n       sqlite3_create_function_v2().\n\n       Note that:\n\n       - `pCtx` in the above descriptions is a `sqlite3_context*`. At\n         least 99 times out of a hundred, that initial argument will\n         be irrelevant for JS UDF bindings, but it needs to be there\n         so that the cases where it _is_ relevant, in particular with\n         window and aggregate functions, have full access to the\n         lower-level sqlite3 APIs.\n\n       - When wrapping JS functions, the remaining arguments are passd\n         to them as positional arguments, not as an array of\n         arguments, because that allows callback definitions to be\n         more JS-idiomatic than C-like. For example `(pCtx,a,b)=>a+b`\n         is more intuitive and legible than\n         `(pCtx,args)=>args[0]+args[1]`. For cases where an array of\n         arguments would be more convenient, the callbacks simply need\n         to be declared like `(pCtx,...args)=>{...}`, in which case\n         `args` will be an array.\n\n       - If a JS wrapper throws, it gets translated to\n         sqlite3_result_error() or sqlite3_result_error_nomem(),\n         depending on whether the exception is an\n         sqlite3.WasmAllocError object or not.\n\n       - When passing on WASM function pointers, arguments are _not_\n         converted or reformulated. They are passed on as-is in raw\n         pointer form using their native C signatures. Only JS\n         functions passed in to this routine, and thus wrapped by this\n         routine, get automatic conversions of arguments and result\n         values. The routines which perform those conversions are\n         exposed for client-side use as\n         sqlite3_create_function_v2.convertUdfArgs() and\n         sqlite3_create_function_v2.setUdfResult(). sqlite3_create_function()\n         and sqlite3_create_window_function() have those same methods.\n\n       For xFunc(), xStep(), and xFinal():\n\n       - When called from SQL, arguments to the UDF, and its result,\n         will be converted between JS and SQL with as much fidelity as\n         is feasible, triggering an exception if a type conversion\n         cannot be determined. Some freedom is afforded to numeric\n         conversions due to friction between the JS and C worlds:\n         integers which are larger than 32 bits may be treated as\n         doubles or BigInts.\n\n       If any JS-side bound functions throw, those exceptions are\n       intercepted and converted to database-side errors with the\n       exception of xDestroy(): any exception from it is ignored,\n       possibly generating a console.error() message.  Destructors\n       must not throw.\n\n       Once installed, there is currently no way to uninstall the\n       automatically-converted WASM-bound JS functions from WASM. They\n       can be uninstalled from the database as documented in the C\n       API, but this wrapper currently has no infrastructure in place\n       to also free the WASM-bound JS wrappers, effectively resulting\n       in a memory leak if the client uninstalls the UDF. Improving that\n       is a potential TODO, but removing client-installed UDFs is rare\n       in practice. If this factor is relevant for a given client,\n       they can create WASM-bound JS functions themselves, hold on to their\n       pointers, and pass the pointers in to here. Later on, they can\n       free those pointers (using `wasm.uninstallFunction()` or\n       equivalent).\n\n       C reference: https://www.sqlite.org/c3ref/create_function.html\n\n       Maintenance reminder: the ability to add new\n       WASM-accessible functions to the runtime requires that the\n       WASM build is compiled with emcc's `-sALLOW_TABLE_GROWTH`\n       flag.\n    */\n    sqlite3_create_function_v2: (\n      pDb, funcName, nArg, eTextRep, pApp,\n      xFunc, xStep, xFinal, xDestroy\n    )=>{/*installed later*/},\n    /**\n       Equivalent to passing the same arguments to\n       sqlite3_create_function_v2(), with 0 as the final argument.\n    */\n    sqlite3_create_function: (\n      pDb, funcName, nArg, eTextRep, pApp,\n      xFunc, xStep, xFinal\n    )=>{/*installed later*/},\n    /**\n       The sqlite3_create_window_function() JS wrapper differs from\n       its native implementation in the exact same way that\n       sqlite3_create_function_v2() does. The additional function,\n       xInverse(), is treated identically to xStep() by the wrapping\n       layer.\n    */\n    sqlite3_create_window_function: (\n      pDb, funcName, nArg, eTextRep, pApp,\n      xStep, xFinal, xValue, xInverse, xDestroy\n    )=>{/*installed later*/},\n    /**\n       The sqlite3_prepare_v3() binding handles two different uses\n       with differing JS/WASM semantics:\n\n       1) sqlite3_prepare_v3(pDb, sqlString, -1, prepFlags, ppStmt , null)\n\n       2) sqlite3_prepare_v3(pDb, sqlPointer, sqlByteLen, prepFlags, ppStmt, sqlPointerToPointer)\n\n       Note that the SQL length argument (the 3rd argument) must, for\n       usage (1), always be negative because it must be a byte length\n       and that value is expensive to calculate from JS (where only\n       the character length of strings is readily available). It is\n       retained in this API's interface for code/documentation\n       compatibility reasons but is currently _always_ ignored. With\n       usage (2), the 3rd argument is used as-is but is is still\n       critical that the C-style input string (2nd argument) be\n       terminated with a 0 byte.\n\n       In usage (1), the 2nd argument must be of type string,\n       Uint8Array, Int8Array, or ArrayBuffer (all of which are assumed\n       to hold SQL). If it is, this function assumes case (1) and\n       calls the underyling C function with the equivalent of:\n\n       (pDb, sqlAsString, -1, prepFlags, ppStmt, null)\n\n       The `pzTail` argument is ignored in this case because its\n       result is meaningless when a string-type value is passed\n       through: the string goes through another level of internal\n       conversion for WASM's sake and the result pointer would refer\n       to that transient conversion's memory, not the passed-in\n       string.\n\n       If the sql argument is not a string, it must be a _pointer_ to\n       a NUL-terminated string which was allocated in the WASM memory\n       (e.g. using capi.wasm.alloc() or equivalent). In that case,\n       the final argument may be 0/null/undefined or must be a pointer\n       to which the \"tail\" of the compiled SQL is written, as\n       documented for the C-side sqlite3_prepare_v3(). In case (2),\n       the underlying C function is called with the equivalent of:\n\n       (pDb, sqlAsPointer, sqlByteLen, prepFlags, ppStmt, pzTail)\n\n       It returns its result and compiled statement as documented in\n       the C API. Fetching the output pointers (5th and 6th\n       parameters) requires using `capi.wasm.peek()` (or\n       equivalent) and the `pzTail` will point to an address relative to\n       the `sqlAsPointer` value.\n\n       If passed an invalid 2nd argument type, this function will\n       return SQLITE_MISUSE and sqlite3_errmsg() will contain a string\n       describing the problem.\n\n       Side-note: if given an empty string, or one which contains only\n       comments or an empty SQL expression, 0 is returned but the result\n       output pointer will be NULL.\n    */\n    sqlite3_prepare_v3: (dbPtr, sql, sqlByteLen, prepFlags,\n                         stmtPtrPtr, strPtrPtr)=>{}/*installed later*/,\n\n    /**\n       Equivalent to calling sqlite3_prapare_v3() with 0 as its 4th argument.\n    */\n    sqlite3_prepare_v2: (dbPtr, sql, sqlByteLen,\n                         stmtPtrPtr,strPtrPtr)=>{}/*installed later*/,\n\n    /**\n       This binding enables the callback argument to be a JavaScript.\n\n       If the callback is a function, then for the duration of the\n       sqlite3_exec() call, it installs a WASM-bound function which\n       acts as a proxy for the given callback. That proxy will also\n       perform a conversion of the callback's arguments from\n       `(char**)` to JS arrays of strings. However, for API\n       consistency's sake it will still honor the C-level callback\n       parameter order and will call it like:\n\n       `callback(pVoid, colCount, listOfValues, listOfColNames)`\n\n       If the callback is not a JS function then this binding performs\n       no translation of the callback, but the sql argument is still\n       converted to a WASM string for the call using the\n       \"string:flexible\" argument converter.\n    */\n    sqlite3_exec: (pDb, sql, callback, pVoid, pErrMsg)=>{}/*installed later*/,\n\n    /**\n       If passed a single argument which appears to be a byte-oriented\n       TypedArray (Int8Array or Uint8Array), this function treats that\n       TypedArray as an output target, fetches `theArray.byteLength`\n       bytes of randomness, and populates the whole array with it. As\n       a special case, if the array's length is 0, this function\n       behaves as if it were passed (0,0). When called this way, it\n       returns its argument, else it returns the `undefined` value.\n\n       If called with any other arguments, they are passed on as-is\n       to the C API. Results are undefined if passed any incompatible\n       values.\n     */\n    sqlite3_randomness: (n, outPtr)=>{/*installed later*/},\n  }/*capi*/);\n\n  /**\n     Various internal-use utilities are added here as needed. They\n     are bound to an object only so that we have access to them in\n     the differently-scoped steps of the API bootstrapping\n     process. At the end of the API setup process, this object gets\n     removed. These are NOT part of the public API.\n  */\n  const util = {\n    affirmBindableTypedArray, flexibleString,\n    bigIntFits32, bigIntFits64, bigIntFitsDouble,\n    isBindableTypedArray,\n    isInt32, isSQLableTypedArray, isTypedArray,\n    typedArrayToString,\n    isUIThread: ()=>(globalThis.window===globalThis && !!globalThis.document),\n    // is this true for ESM?: 'undefined'===typeof WorkerGlobalScope\n    isSharedTypedArray,\n    toss: function(...args){throw new Error(args.join(' '))},\n    toss3,\n    typedArrayPart\n  };\n\n  Object.assign(wasm, {\n    /**\n       Emscripten APIs have a deep-seated assumption that all pointers\n       are 32 bits. We'll remain optimistic that that won't always be\n       the case and will use this constant in places where we might\n       otherwise use a hard-coded 4.\n    */\n    ptrSizeof: config.wasmPtrSizeof || 4,\n    /**\n       The WASM IR (Intermediate Representation) value for\n       pointer-type values. It MUST refer to a value type of the\n       size described by this.ptrSizeof.\n    */\n    ptrIR: config.wasmPtrIR || \"i32\",\n    /**\n       True if BigInt support was enabled via (e.g.) the\n       Emscripten -sWASM_BIGINT flag, else false. When\n       enabled, certain 64-bit sqlite3 APIs are enabled which\n       are not otherwise enabled due to JS/WASM int64\n       impedence mismatches.\n    */\n    bigIntEnabled: !!config.bigIntEnabled,\n    /**\n       The symbols exported by the WASM environment.\n    */\n    exports: config.exports\n      || toss3(\"Missing API config.exports (WASM module exports).\"),\n\n    /**\n       When Emscripten compiles with `-sIMPORT_MEMORY`, it\n       initalizes the heap and imports it into wasm, as opposed to\n       the other way around. In this case, the memory is not\n       available via this.exports.memory.\n    */\n    memory: config.memory || config.exports['memory']\n      || toss3(\"API config object requires a WebAssembly.Memory object\",\n              \"in either config.exports.memory (exported)\",\n              \"or config.memory (imported).\"),\n\n    /**\n       The API's primary point of access to the WASM-side memory\n       allocator.  Works like sqlite3_malloc() but throws a\n       WasmAllocError if allocation fails. It is important that any\n       code which might pass through the sqlite3 C API NOT throw and\n       must instead return SQLITE_NOMEM (or equivalent, depending on\n       the context).\n\n       Very few cases in the sqlite3 JS APIs can result in\n       client-defined functions propagating exceptions via the C-style\n       API. Most notably, this applies to WASM-bound JS functions\n       which are created directly by clients and passed on _as WASM\n       function pointers_ to functions such as\n       sqlite3_create_function_v2(). Such bindings created\n       transparently by this API will automatically use wrappers which\n       catch exceptions and convert them to appropriate error codes.\n\n       For cases where non-throwing allocation is required, use\n       this.alloc.impl(), which is direct binding of the\n       underlying C-level allocator.\n\n       Design note: this function is not named \"malloc\" primarily\n       because Emscripten uses that name and we wanted to avoid any\n       confusion early on in this code's development, when it still\n       had close ties to Emscripten's glue code.\n    */\n    alloc: undefined/*installed later*/,\n\n    /**\n       Rarely necessary in JS code, this routine works like\n       sqlite3_realloc(M,N), where M is either NULL or a pointer\n       obtained from this function or this.alloc() and N is the number\n       of bytes to reallocate the block to. Returns a pointer to the\n       reallocated block or 0 if allocation fails.\n\n       If M is NULL and N is positive, this behaves like\n       this.alloc(N). If N is 0, it behaves like this.dealloc().\n       Results are undefined if N is negative (sqlite3_realloc()\n       treats that as 0, but if this code is built with a different\n       allocator it may misbehave with negative values).\n\n       Like this.alloc.impl(), this.realloc.impl() is a direct binding\n       to the underlying realloc() implementation which does not throw\n       exceptions, instead returning 0 on allocation error.\n    */\n    realloc: undefined/*installed later*/,\n\n    /**\n       The API's primary point of access to the WASM-side memory\n       deallocator. Works like sqlite3_free().\n\n       Design note: this function is not named \"free\" for the same\n       reason that this.alloc() is not called this.malloc().\n    */\n    dealloc: undefined/*installed later*/\n\n    /* Many more wasm-related APIs get installed later on. */\n  }/*wasm*/);\n\n  /**\n     wasm.alloc()'s srcTypedArray.byteLength bytes,\n     populates them with the values from the source\n     TypedArray, and returns the pointer to that memory. The\n     returned pointer must eventually be passed to\n     wasm.dealloc() to clean it up.\n\n     The argument may be a Uint8Array, Int8Array, or ArrayBuffer,\n     and it throws if passed any other type.\n\n     As a special case, to avoid further special cases where\n     this is used, if srcTypedArray.byteLength is 0, it\n     allocates a single byte and sets it to the value\n     0. Even in such cases, calls must behave as if the\n     allocated memory has exactly srcTypedArray.byteLength\n     bytes.\n  */\n  wasm.allocFromTypedArray = function(srcTypedArray){\n    if(srcTypedArray instanceof ArrayBuffer){\n      srcTypedArray = new Uint8Array(srcTypedArray);\n    }\n    affirmBindableTypedArray(srcTypedArray);\n    const pRet = wasm.alloc(srcTypedArray.byteLength || 1);\n    wasm.heapForSize(srcTypedArray.constructor).set(\n      srcTypedArray.byteLength ? srcTypedArray : [0], pRet\n    );\n    return pRet;\n  };\n\n  {\n    // Set up allocators...\n    const keyAlloc = config.allocExportName,\n          keyDealloc = config.deallocExportName,\n          keyRealloc = config.reallocExportName;\n    for(const key of [keyAlloc, keyDealloc, keyRealloc]){\n      const f = wasm.exports[key];\n      if(!(f instanceof Function)) toss3(\"Missing required exports[\",key,\"] function.\");\n    }\n\n    wasm.alloc = function f(n){\n      return f.impl(n) || WasmAllocError.toss(\"Failed to allocate\",n,\" bytes.\");\n    };\n    wasm.alloc.impl = wasm.exports[keyAlloc];\n    wasm.realloc = function f(m,n){\n      const m2 = f.impl(m,n);\n      return n ? (m2 || WasmAllocError.toss(\"Failed to reallocate\",n,\" bytes.\")) : 0;\n    };\n    wasm.realloc.impl = wasm.exports[keyRealloc];\n    wasm.dealloc = wasm.exports[keyDealloc];\n  }\n\n  /**\n     Reports info about compile-time options using\n     sqlite3_compileoption_get() and sqlite3_compileoption_used(). It\n     has several distinct uses:\n\n     If optName is an array then it is expected to be a list of\n     compilation options and this function returns an object\n     which maps each such option to true or false, indicating\n     whether or not the given option was included in this\n     build. That object is returned.\n\n     If optName is an object, its keys are expected to be compilation\n     options and this function sets each entry to true or false,\n     indicating whether the compilation option was used or not. That\n     object is returned.\n\n     If passed no arguments then it returns an object mapping\n     all known compilation options to their compile-time values,\n     or boolean true if they are defined with no value. This\n     result, which is relatively expensive to compute, is cached\n     and returned for future no-argument calls.\n\n     In all other cases it returns true if the given option was\n     active when when compiling the sqlite3 module, else false.\n\n     Compile-time option names may optionally include their\n     \"SQLITE_\" prefix. When it returns an object of all options,\n     the prefix is elided.\n  */\n  wasm.compileOptionUsed = function f(optName){\n    if(!arguments.length){\n      if(f._result) return f._result;\n      else if(!f._opt){\n        f._rx = /^([^=]+)=(.+)/;\n        f._rxInt = /^-?\\d+$/;\n        f._opt = function(opt, rv){\n          const m = f._rx.exec(opt);\n          rv[0] = (m ? m[1] : opt);\n          rv[1] = m ? (f._rxInt.test(m[2]) ? +m[2] : m[2]) : true;\n        };\n      }\n      const rc = {}, ov = [0,0];\n      let i = 0, k;\n      while((k = capi.sqlite3_compileoption_get(i++))){\n        f._opt(k,ov);\n        rc[ov[0]] = ov[1];\n      }\n      return f._result = rc;\n    }else if(Array.isArray(optName)){\n      const rc = {};\n      optName.forEach((v)=>{\n        rc[v] = capi.sqlite3_compileoption_used(v);\n      });\n      return rc;\n    }else if('object' === typeof optName){\n      Object.keys(optName).forEach((k)=> {\n        optName[k] = capi.sqlite3_compileoption_used(k);\n      });\n      return optName;\n    }\n    return (\n      'string'===typeof optName\n    ) ? !!capi.sqlite3_compileoption_used(optName) : false;\n  }/*compileOptionUsed()*/;\n\n  /**\n     sqlite3.wasm.pstack (pseudo-stack) holds a special-case\n     stack-style allocator intended only for use with _small_ data of\n     not more than (in total) a few kb in size, managed as if it were\n     stack-based.\n\n     It has only a single intended usage:\n\n     ```\n     const stackPos = pstack.pointer;\n     try{\n       const ptr = pstack.alloc(8);\n       // ==> pstack.pointer === ptr\n       const otherPtr = pstack.alloc(8);\n       // ==> pstack.pointer === otherPtr\n       ...\n     }finally{\n       pstack.restore(stackPos);\n       // ==> pstack.pointer === stackPos\n     }\n     ```\n\n     This allocator is much faster than a general-purpose one but is\n     limited to usage patterns like the one shown above.\n\n     It operates from a static range of memory which lives outside of\n     space managed by Emscripten's stack-management, so does not\n     collide with Emscripten-provided stack allocation APIs. The\n     memory lives in the WASM heap and can be used with routines such\n     as wasm.poke() and wasm.heap8u().slice().\n  */\n  wasm.pstack = Object.assign(Object.create(null),{\n    /**\n       Sets the current pstack position to the given pointer. Results\n       are undefined if the passed-in value did not come from\n       this.pointer.\n    */\n    restore: wasm.exports.sqlite3_wasm_pstack_restore,\n    /**\n       Attempts to allocate the given number of bytes from the\n       pstack. On success, it zeroes out a block of memory of the\n       given size, adjusts the pstack pointer, and returns a pointer\n       to the memory. On error, throws a WasmAllocError. The\n       memory must eventually be released using restore().\n\n       If n is a string, it must be a WASM \"IR\" value in the set\n       accepted by wasm.sizeofIR(), which is mapped to the size of\n       that data type. If passed a string not in that set, it throws a\n       WasmAllocError.\n\n       This method always adjusts the given value to be a multiple\n       of 8 bytes because failing to do so can lead to incorrect\n       results when reading and writing 64-bit values from/to the WASM\n       heap. Similarly, the returned address is always 8-byte aligned.\n    */\n    alloc: function(n){\n      if('string'===typeof n && !(n = wasm.sizeofIR(n))){\n        WasmAllocError.toss(\"Invalid value for pstack.alloc(\",arguments[0],\")\");\n      }\n      return wasm.exports.sqlite3_wasm_pstack_alloc(n)\n        || WasmAllocError.toss(\"Could not allocate\",n,\n                               \"bytes from the pstack.\");\n    },\n    /**\n       alloc()'s n chunks, each sz bytes, as a single memory block and\n       returns the addresses as an array of n element, each holding\n       the address of one chunk.\n\n       sz may optionally be an IR string accepted by wasm.sizeofIR().\n\n       Throws a WasmAllocError if allocation fails.\n\n       Example:\n\n       ```\n       const [p1, p2, p3] = wasm.pstack.allocChunks(3,4);\n       ```\n    */\n    allocChunks: function(n,sz){\n      if('string'===typeof sz && !(sz = wasm.sizeofIR(sz))){\n        WasmAllocError.toss(\"Invalid size value for allocChunks(\",arguments[1],\")\");\n      }\n      const mem = wasm.pstack.alloc(n * sz);\n      const rc = [];\n      let i = 0, offset = 0;\n      for(; i < n; ++i, offset += sz) rc.push(mem + offset);\n      return rc;\n    },\n    /**\n       A convenience wrapper for allocChunks() which sizes each chunk\n       as either 8 bytes (safePtrSize is truthy) or wasm.ptrSizeof (if\n       safePtrSize is falsy).\n\n       How it returns its result differs depending on its first\n       argument: if it's 1, it returns a single pointer value. If it's\n       more than 1, it returns the same as allocChunks().\n\n       When a returned pointers will refer to a 64-bit value, e.g. a\n       double or int64, and that value must be written or fetched,\n       e.g. using wasm.poke() or wasm.peek(), it is\n       important that the pointer in question be aligned to an 8-byte\n       boundary or else it will not be fetched or written properly and\n       will corrupt or read neighboring memory.\n\n       However, when all pointers involved point to \"small\" data, it\n       is safe to pass a falsy value to save a tiny bit of memory.\n    */\n    allocPtr: (n=1,safePtrSize=true)=>{\n      return 1===n\n        ? wasm.pstack.alloc(safePtrSize ? 8 : wasm.ptrSizeof)\n        : wasm.pstack.allocChunks(n, safePtrSize ? 8 : wasm.ptrSizeof);\n    }\n  })/*wasm.pstack*/;\n  Object.defineProperties(wasm.pstack, {\n    /**\n       sqlite3.wasm.pstack.pointer resolves to the current pstack\n       position pointer. This value is intended _only_ to be saved\n       for passing to restore(). Writing to this memory, without\n       first reserving it via wasm.pstack.alloc() and friends, leads\n       to undefined results.\n    */\n    pointer: {\n      configurable: false, iterable: true, writeable: false,\n      get: wasm.exports.sqlite3_wasm_pstack_ptr\n      //Whether or not a setter as an alternative to restore() is\n      //clearer or would just lead to confusion is unclear.\n      //set: wasm.exports.sqlite3_wasm_pstack_restore\n    },\n    /**\n       sqlite3.wasm.pstack.quota to the total number of bytes\n       available in the pstack, including any space which is currently\n       allocated. This value is a compile-time constant.\n    */\n    quota: {\n      configurable: false, iterable: true, writeable: false,\n      get: wasm.exports.sqlite3_wasm_pstack_quota\n    },\n    /**\n       sqlite3.wasm.pstack.remaining resolves to the amount of space\n       remaining in the pstack.\n    */\n    remaining: {\n      configurable: false, iterable: true, writeable: false,\n      get: wasm.exports.sqlite3_wasm_pstack_remaining\n    }\n  })/*wasm.pstack properties*/;\n\n  capi.sqlite3_randomness = (...args)=>{\n    if(1===args.length && util.isTypedArray(args[0])\n      && 1===args[0].BYTES_PER_ELEMENT){\n      const ta = args[0];\n      if(0===ta.byteLength){\n        wasm.exports.sqlite3_randomness(0,0);\n        return ta;\n      }\n      const stack = wasm.pstack.pointer;\n      try {\n        let n = ta.byteLength, offset = 0;\n        const r = wasm.exports.sqlite3_randomness;\n        const heap = wasm.heap8u();\n        const nAlloc = n < 512 ? n : 512;\n        const ptr = wasm.pstack.alloc(nAlloc);\n        do{\n          const j = (n>nAlloc ? nAlloc : n);\n          r(j, ptr);\n          ta.set(typedArrayPart(heap, ptr, ptr+j), offset);\n          n -= j;\n          offset += j;\n        } while(n > 0);\n      }catch(e){\n        console.error(\"Highly unexpected (and ignored!) \"+\n                      \"exception in sqlite3_randomness():\",e);\n      }finally{\n        wasm.pstack.restore(stack);\n      }\n      return ta;\n    }\n    wasm.exports.sqlite3_randomness(...args);\n  };\n\n  /** State for sqlite3_wasmfs_opfs_dir(). */\n  let __wasmfsOpfsDir = undefined;\n  /**\n     2022-12-17: incompatible WASMFS changes have made WASMFS+OPFS\n     unavailable from the main thread, which eliminates the most\n     significant benefit of supporting WASMFS. This function is now a\n     no-op which always returns a falsy value. Before that change,\n     this function behaved as documented below (and how it will again\n     if we can find a compelling reason to support it).\n\n     If the wasm environment has a WASMFS/OPFS-backed persistent\n     storage directory, its path is returned by this function. If it\n     does not then it returns \"\" (noting that \"\" is a falsy value).\n\n     The first time this is called, this function inspects the current\n     environment to determine whether persistence support is available\n     and, if it is, enables it (if needed).\n\n     This function currently only recognizes the WASMFS/OPFS storage\n     combination and its path refers to storage rooted in the\n     Emscripten-managed virtual filesystem.\n  */\n  capi.sqlite3_wasmfs_opfs_dir = function(){\n    if(undefined !== __wasmfsOpfsDir) return __wasmfsOpfsDir;\n    // If we have no OPFS, there is no persistent dir\n    const pdir = config.wasmfsOpfsDir;\n    console.error(\"sqlite3_wasmfs_opfs_dir() can no longer work due \"+\n                  \"to incompatible WASMFS changes. It will be removed.\");\n    if(!pdir\n       || !globalThis.FileSystemHandle\n       || !globalThis.FileSystemDirectoryHandle\n       || !globalThis.FileSystemFileHandle){\n      return __wasmfsOpfsDir = \"\";\n    }\n    try{\n      if(pdir && 0===wasm.xCallWrapped(\n        'sqlite3_wasm_init_wasmfs', 'i32', ['string'], pdir\n      )){\n        return __wasmfsOpfsDir = pdir;\n      }else{\n        return __wasmfsOpfsDir = \"\";\n      }\n    }catch(e){\n      // sqlite3_wasm_init_wasmfs() is not available\n      return __wasmfsOpfsDir = \"\";\n    }\n  };\n\n  /**\n     Experimental and subject to change or removal.\n\n     Returns true if sqlite3.capi.sqlite3_wasmfs_opfs_dir() is a\n     non-empty string and the given name starts with (that string +\n     '/'), else returns false.\n  */\n  capi.sqlite3_wasmfs_filename_is_persistent = function(name){\n    const p = capi.sqlite3_wasmfs_opfs_dir();\n    return (p && name) ? name.startsWith(p+'/') : false;\n  };\n\n  // This bit is highly arguable and is incompatible with the fiddle shell.\n  if(false && 0===wasm.exports.sqlite3_vfs_find(0)){\n    /* Assume that sqlite3_initialize() has not yet been called.\n       This will be the case in an SQLITE_OS_KV build. */\n    wasm.exports.sqlite3_initialize();\n  }\n\n  /**\n     Given an `sqlite3*`, an sqlite3_vfs name, and an optional db name\n     (defaulting to \"main\"), returns a truthy value (see below) if\n     that db uses that VFS, else returns false. If pDb is falsy then\n     the 3rd argument is ignored and this function returns a truthy\n     value if the default VFS name matches that of the 2nd\n     argument. Results are undefined if pDb is truthy but refers to an\n     invalid pointer. The 3rd argument specifies the database name of\n     the given database connection to check, defaulting to the main\n     db.\n\n     The 2nd and 3rd arguments may either be a JS string or a WASM\n     C-string. If the 2nd argument is a NULL WASM pointer, the default\n     VFS is assumed. If the 3rd is a NULL WASM pointer, \"main\" is\n     assumed.\n\n     The truthy value it returns is a pointer to the `sqlite3_vfs`\n     object.\n\n     To permit safe use of this function from APIs which may be called\n     via the C stack (like SQL UDFs), this function does not throw: if\n     bad arguments cause a conversion error when passing into\n     wasm-space, false is returned.\n  */\n  capi.sqlite3_js_db_uses_vfs = function(pDb,vfsName,dbName=0){\n    try{\n      const pK = capi.sqlite3_vfs_find(vfsName);\n      if(!pK) return false;\n      else if(!pDb){\n        return pK===capi.sqlite3_vfs_find(0) ? pK : false;\n      }else{\n        return pK===capi.sqlite3_js_db_vfs(pDb,dbName) ? pK : false;\n      }\n    }catch(e){\n      /* Ignore - probably bad args to a wasm-bound function. */\n      return false;\n    }\n  };\n\n  /**\n     Returns an array of the names of all currently-registered sqlite3\n     VFSes.\n  */\n  capi.sqlite3_js_vfs_list = function(){\n    const rc = [];\n    let pVfs = capi.sqlite3_vfs_find(0);\n    while(pVfs){\n      const oVfs = new capi.sqlite3_vfs(pVfs);\n      rc.push(wasm.cstrToJs(oVfs.$zName));\n      pVfs = oVfs.$pNext;\n      oVfs.dispose();\n    }\n    return rc;\n  };\n\n  /**\n     A convenience wrapper around sqlite3_serialize() which serializes\n     the given `sqlite3*` pointer to a Uint8Array. The first argument\n     may be either an `sqlite3*` or an sqlite3.oo1.DB instance.\n\n     On success it returns a Uint8Array. If the schema is empty, an\n     empty array is returned.\n\n     `schema` is the schema to serialize. It may be a WASM C-string\n     pointer or a JS string. If it is falsy, it defaults to `\"main\"`.\n\n     On error it throws with a description of the problem.\n  */\n  capi.sqlite3_js_db_export = function(pDb, schema=0){\n    pDb = wasm.xWrap.testConvertArg('sqlite3*', pDb);\n    if(!pDb) toss3('Invalid sqlite3* argument.');\n    if(!wasm.bigIntEnabled) toss3('BigInt64 support is not enabled.');\n    const scope = wasm.scopedAllocPush();\n    let pOut;\n    try{\n      const pSize = wasm.scopedAlloc(8/*i64*/ + wasm.ptrSizeof);\n      const ppOut = pSize + 8;\n      /**\n         Maintenance reminder, since this cost a full hour of grief\n         and confusion: if the order of pSize/ppOut are reversed in\n         that memory block, fetching the value of pSize after the\n         export reads a garbage size because it's not on an 8-byte\n         memory boundary!\n      */\n      const zSchema = schema\n            ? (wasm.isPtr(schema) ? schema : wasm.scopedAllocCString(''+schema))\n            : 0;\n      let rc = wasm.exports.sqlite3_wasm_db_serialize(\n        pDb, zSchema, ppOut, pSize, 0\n      );\n      if(rc){\n        toss3(\"Database serialization failed with code\",\n             sqlite3.capi.sqlite3_js_rc_str(rc));\n      }\n      pOut = wasm.peekPtr(ppOut);\n      const nOut = wasm.peek(pSize, 'i64');\n      rc = nOut\n        ? wasm.heap8u().slice(pOut, pOut + Number(nOut))\n        : new Uint8Array();\n      return rc;\n    }finally{\n      if(pOut) wasm.exports.sqlite3_free(pOut);\n      wasm.scopedAllocPop(scope);\n    }\n  };\n\n  /**\n     Given a `sqlite3*` and a database name (JS string or WASM\n     C-string pointer, which may be 0), returns a pointer to the\n     sqlite3_vfs responsible for it. If the given db name is null/0,\n     or not provided, then \"main\" is assumed.\n  */\n  capi.sqlite3_js_db_vfs =\n    (dbPointer, dbName=0)=>wasm.sqlite3_wasm_db_vfs(dbPointer, dbName);\n\n  /**\n     A thin wrapper around capi.sqlite3_aggregate_context() which\n     behaves the same except that it throws a WasmAllocError if that\n     function returns 0. As a special case, if n is falsy it does\n     _not_ throw if that function returns 0. That special case is\n     intended for use with xFinal() implementations.\n  */\n  capi.sqlite3_js_aggregate_context = (pCtx, n)=>{\n    return capi.sqlite3_aggregate_context(pCtx, n)\n      || (n ? WasmAllocError.toss(\"Cannot allocate\",n,\n                                  \"bytes for sqlite3_aggregate_context()\")\n          : 0);\n  };\n\n  /**\n     Creates a file using the storage appropriate for the given\n     sqlite3_vfs.  The first argument may be a VFS name (JS string\n     only, NOT a WASM C-string), WASM-managed `sqlite3_vfs*`, or\n     a capi.sqlite3_vfs instance. Pass 0 (a NULL pointer) to use the\n     default VFS. If passed a string which does not resolve using\n     sqlite3_vfs_find(), an exception is thrown. (Note that a WASM\n     C-string is not accepted because it is impossible to\n     distinguish from a C-level `sqlite3_vfs*`.)\n\n     The second argument, the filename, must be a JS or WASM C-string.\n\n     The 3rd may either be falsy, a valid WASM memory pointer, an\n     ArrayBuffer, or a Uint8Array. The 4th must be the length, in\n     bytes, of the data array to copy. If the 3rd argument is an\n     ArrayBuffer or Uint8Array and the 4th is not a positive integer\n     then the 4th defaults to the array's byteLength value.\n\n     If data is falsy then a file is created with dataLen bytes filled\n     with uninitialized data (whatever truncate() leaves there). If\n     data is not falsy then a file is created or truncated and it is\n     filled with the first dataLen bytes of the data source.\n\n     Throws if any arguments are invalid or if creating or writing to\n     the file fails.\n\n     Note that most VFSes do _not_ automatically create directory\n     parts of filenames, nor do all VFSes have a concept of\n     directories.  If the given filename is not valid for the given\n     VFS, an exception will be thrown. This function exists primarily\n     to assist in implementing file-upload capability, with the caveat\n     that clients must have some idea of the VFS into which they want\n     to upload and that VFS must support the operation.\n\n     VFS-specific notes:\n\n     - \"memdb\": results are undefined.\n\n     - \"kvvfs\": will fail with an I/O error due to strict internal\n       requirments of that VFS's xTruncate().\n\n     - \"unix\" and related: will use the WASM build's equivalent of the\n       POSIX I/O APIs. This will work so long as neither a specific\n       VFS nor the WASM environment imposes requirements which break it.\n\n     - \"opfs\": uses OPFS storage and creates directory parts of the\n       filename.\n  */\n  capi.sqlite3_js_vfs_create_file = function(vfs, filename, data, dataLen){\n    let pData;\n    if(data){\n      if(wasm.isPtr(data)){\n        pData = data;\n      }else if(data instanceof ArrayBuffer){\n        data = new Uint8Array(data);\n      }\n      if(data instanceof Uint8Array){\n        pData = wasm.allocFromTypedArray(data);\n        if(arguments.length<4 || !util.isInt32(dataLen) || dataLen<0){\n          dataLen = data.byteLength;\n        }\n      }else{\n        SQLite3Error.toss(\"Invalid 3rd argument type for sqlite3_js_vfs_create_file().\");\n      }\n    }else{\n       pData = 0;\n    }\n    if(!util.isInt32(dataLen) || dataLen<0){\n      wasm.dealloc(pData);\n      SQLite3Error.toss(\"Invalid 4th argument for sqlite3_js_vfs_create_file().\");\n    }\n    try{\n      const rc = wasm.sqlite3_wasm_vfs_create_file(vfs, filename, pData, dataLen);\n      if(rc) SQLite3Error.toss(\"Creation of file failed with sqlite3 result code\",\n                               capi.sqlite3_js_rc_str(rc));\n    }finally{\n      wasm.dealloc(pData);\n    }\n  };\n\n  if( util.isUIThread() ){\n    /* Features specific to the main window thread... */\n\n    /**\n       Internal helper for sqlite3_js_kvvfs_clear() and friends.\n       Its argument should be one of ('local','session',\"\").\n    */\n    const __kvvfsInfo = function(which){\n      const rc = Object.create(null);\n      rc.prefix = 'kvvfs-'+which;\n      rc.stores = [];\n      if('session'===which || \"\"===which) rc.stores.push(globalThis.sessionStorage);\n      if('local'===which || \"\"===which) rc.stores.push(globalThis.localStorage);\n      return rc;\n    };\n\n    /**\n       Clears all storage used by the kvvfs DB backend, deleting any\n       DB(s) stored there. Its argument must be either 'session',\n       'local', or \"\". In the first two cases, only sessionStorage\n       resp. localStorage is cleared. If it's an empty string (the\n       default) then both are cleared. Only storage keys which match\n       the pattern used by kvvfs are cleared: any other client-side\n       data are retained.\n\n       This function is only available in the main window thread.\n\n       Returns the number of entries cleared.\n    */\n    capi.sqlite3_js_kvvfs_clear = function(which=\"\"){\n      let rc = 0;\n      const kvinfo = __kvvfsInfo(which);\n      kvinfo.stores.forEach((s)=>{\n        const toRm = [] /* keys to remove */;\n        let i;\n        for( i = 0; i < s.length; ++i ){\n          const k = s.key(i);\n          if(k.startsWith(kvinfo.prefix)) toRm.push(k);\n        }\n        toRm.forEach((kk)=>s.removeItem(kk));\n        rc += toRm.length;\n      });\n      return rc;\n    };\n\n    /**\n       This routine guesses the approximate amount of\n       window.localStorage and/or window.sessionStorage in use by the\n       kvvfs database backend. Its argument must be one of\n       ('session', 'local', \"\"). In the first two cases, only\n       sessionStorage resp. localStorage is counted. If it's an empty\n       string (the default) then both are counted. Only storage keys\n       which match the pattern used by kvvfs are counted. The returned\n       value is the \"length\" value of every matching key and value,\n       noting that JavaScript stores each character in 2 bytes.\n\n       Note that the returned size is not authoritative from the\n       perspective of how much data can fit into localStorage and\n       sessionStorage, as the precise algorithms for determining\n       those limits are unspecified and may include per-entry\n       overhead invisible to clients.\n    */\n    capi.sqlite3_js_kvvfs_size = function(which=\"\"){\n      let sz = 0;\n      const kvinfo = __kvvfsInfo(which);\n      kvinfo.stores.forEach((s)=>{\n        let i;\n        for(i = 0; i < s.length; ++i){\n          const k = s.key(i);\n          if(k.startsWith(kvinfo.prefix)){\n            sz += k.length;\n            sz += s.getItem(k).length;\n          }\n        }\n      });\n      return sz * 2 /* because JS uses 2-byte char encoding */;\n    };\n\n  }/* main-window-only bits */\n\n  /**\n     Wraps all known variants of the C-side variadic\n     sqlite3_db_config().\n\n     Full docs: https://sqlite.org/c3ref/db_config.html\n\n     Returns capi.SQLITE_MISUSE if op is not a valid operation ID.\n  */\n  capi.sqlite3_db_config = function(pDb, op, ...args){\n    if(!this.s){\n      this.s = wasm.xWrap('sqlite3_wasm_db_config_s','int',\n                          ['sqlite3*', 'int', 'string:static']\n                          /* MAINDBNAME requires a static string */);\n      this.pii = wasm.xWrap('sqlite3_wasm_db_config_pii', 'int',\n                            ['sqlite3*', 'int', '*','int', 'int']);\n      this.ip = wasm.xWrap('sqlite3_wasm_db_config_ip','int',\n                           ['sqlite3*', 'int', 'int','*']);\n    }\n    switch(op){\n        case capi.SQLITE_DBCONFIG_ENABLE_FKEY:\n        case capi.SQLITE_DBCONFIG_ENABLE_TRIGGER:\n        case capi.SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER:\n        case capi.SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION:\n        case capi.SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE:\n        case capi.SQLITE_DBCONFIG_ENABLE_QPSG:\n        case capi.SQLITE_DBCONFIG_TRIGGER_EQP:\n        case capi.SQLITE_DBCONFIG_RESET_DATABASE:\n        case capi.SQLITE_DBCONFIG_DEFENSIVE:\n        case capi.SQLITE_DBCONFIG_WRITABLE_SCHEMA:\n        case capi.SQLITE_DBCONFIG_LEGACY_ALTER_TABLE:\n        case capi.SQLITE_DBCONFIG_DQS_DML:\n        case capi.SQLITE_DBCONFIG_DQS_DDL:\n        case capi.SQLITE_DBCONFIG_ENABLE_VIEW:\n        case capi.SQLITE_DBCONFIG_LEGACY_FILE_FORMAT:\n        case capi.SQLITE_DBCONFIG_TRUSTED_SCHEMA:\n          return this.ip(pDb, op, args[0], args[1] || 0);\n        case capi.SQLITE_DBCONFIG_LOOKASIDE:\n          return this.pii(pDb, op, args[0], args[1], args[2]);\n        case capi.SQLITE_DBCONFIG_MAINDBNAME:\n          return this.s(pDb, op, args[0]);\n        default:\n          return capi.SQLITE_MISUSE;\n    }\n  }.bind(Object.create(null));\n\n  /**\n     Given a (sqlite3_value*), this function attempts to convert it\n     to an equivalent JS value with as much fidelity as feasible and\n     return it.\n\n     By default it throws if it cannot determine any sensible\n     conversion. If passed a falsy second argument, it instead returns\n     `undefined` if no suitable conversion is found.  Note that there\n     is no conversion from SQL to JS which results in the `undefined`\n     value, so `undefined` has an unambiguous meaning here.  It will\n     always throw a WasmAllocError if allocating memory for a\n     conversion fails.\n\n     Caveats:\n\n     - It does not support sqlite3_value_to_pointer() conversions\n       because those require a type name string which this function\n       does not have and cannot sensibly be given at the level of the\n       API where this is used (e.g. automatically converting UDF\n       arguments). Clients using sqlite3_value_to_pointer(), and its\n       related APIs, will need to manage those themselves.\n  */\n  capi.sqlite3_value_to_js = function(pVal,throwIfCannotConvert=true){\n    let arg;\n    const valType = capi.sqlite3_value_type(pVal);\n    switch(valType){\n        case capi.SQLITE_INTEGER:\n          if(wasm.bigIntEnabled){\n            arg = capi.sqlite3_value_int64(pVal);\n            if(util.bigIntFitsDouble(arg)) arg = Number(arg);\n          }\n          else arg = capi.sqlite3_value_double(pVal)/*yes, double, for larger integers*/;\n          break;\n        case capi.SQLITE_FLOAT:\n          arg = capi.sqlite3_value_double(pVal);\n          break;\n        case capi.SQLITE_TEXT:\n          arg = capi.sqlite3_value_text(pVal);\n          break;\n        case capi.SQLITE_BLOB:{\n          const n = capi.sqlite3_value_bytes(pVal);\n          const pBlob = capi.sqlite3_value_blob(pVal);\n          if(n && !pBlob) sqlite3.WasmAllocError.toss(\n            \"Cannot allocate memory for blob argument of\",n,\"byte(s)\"\n          );\n          arg = n ? wasm.heap8u().slice(pBlob, pBlob + Number(n)) : null;\n          break;\n        }\n        case capi.SQLITE_NULL:\n          arg = null; break;\n        default:\n          if(throwIfCannotConvert){\n            toss3(capi.SQLITE_MISMATCH,\n                  \"Unhandled sqlite3_value_type():\",valType);\n          }\n          arg = undefined;\n    }\n    return arg;\n  };\n\n  /**\n     Requires a C-style array of `sqlite3_value*` objects and the\n     number of entries in that array. Returns a JS array containing\n     the results of passing each C array entry to\n     sqlite3_value_to_js(). The 3rd argument to this function is\n     passed on as the 2nd argument to that one.\n  */\n  capi.sqlite3_values_to_js = function(argc,pArgv,throwIfCannotConvert=true){\n    let i;\n    const tgt = [];\n    for(i = 0; i < argc; ++i){\n      /**\n         Curiously: despite ostensibly requiring 8-byte\n         alignment, the pArgv array is parcelled into chunks of\n         4 bytes (1 pointer each). The values those point to\n         have 8-byte alignment but the individual argv entries\n         do not.\n      */\n      tgt.push(capi.sqlite3_value_to_js(\n        wasm.peekPtr(pArgv + (wasm.ptrSizeof * i))\n      ));\n    }\n    return tgt;\n  };\n\n  /**\n     Calls either sqlite3_result_error_nomem(), if e is-a\n     WasmAllocError, or sqlite3_result_error(). In the latter case,\n     the second arugment is coerced to a string to create the error\n     message.\n\n     The first argument is a (sqlite3_context*). Returns void.\n     Does not throw.\n  */\n  capi.sqlite3_result_error_js = function(pCtx,e){\n    if(e instanceof WasmAllocError){\n      capi.sqlite3_result_error_nomem(pCtx);\n    }else{\n      /* Maintenance reminder: ''+e, rather than e.message,\n         will prefix e.message with e.name, so it includes\n         the exception's type name in the result. */;\n      capi.sqlite3_result_error(pCtx, ''+e, -1);\n    }\n  };\n\n  /**\n     This function passes its 2nd argument to one of the\n     sqlite3_result_xyz() routines, depending on the type of that\n     argument:\n\n     - If (val instanceof Error), this function passes it to\n       sqlite3_result_error_js().\n     - `null`: `sqlite3_result_null()`\n     - `boolean`: `sqlite3_result_int()` with a value of 0 or 1.\n     - `number`: `sqlite3_result_int()`, `sqlite3_result_int64()`, or\n       `sqlite3_result_double()`, depending on the range of the number\n       and whether or not int64 support is enabled.\n     - `bigint`: similar to `number` but will trigger an error if the\n       value is too big to store in an int64.\n     - `string`: `sqlite3_result_text()`\n     - Uint8Array or Int8Array or ArrayBuffer: `sqlite3_result_blob()`\n     - `undefined`: is a no-op provided to simplify certain use cases.\n\n     Anything else triggers `sqlite3_result_error()` with a\n     description of the problem.\n\n     The first argument to this function is a `(sqlite3_context*)`.\n     Returns void. Does not throw.\n  */\n  capi.sqlite3_result_js = function(pCtx,val){\n    if(val instanceof Error){\n      capi.sqlite3_result_error_js(pCtx, val);\n      return;\n    }\n    try{\n      switch(typeof val) {\n          case 'undefined':\n            /* This is a no-op. This routine originated in the create_function()\n               family of APIs and in that context, passing in undefined indicated\n               that the caller was responsible for calling sqlite3_result_xxx()\n               (if needed). */\n            break;\n          case 'boolean':\n            capi.sqlite3_result_int(pCtx, val ? 1 : 0);\n            break;\n          case 'bigint':\n            if(util.bigIntFits32(val)){\n              capi.sqlite3_result_int(pCtx, Number(val));\n            }else if(util.bigIntFitsDouble(val)){\n              capi.sqlite3_result_double(pCtx, Number(val));\n            }else if(wasm.bigIntEnabled){\n              if(util.bigIntFits64(val)) capi.sqlite3_result_int64(pCtx, val);\n              else toss3(\"BigInt value\",val.toString(),\"is too BigInt for int64.\");\n            }else{\n              toss3(\"BigInt value\",val.toString(),\"is too BigInt.\");\n            }\n            break;\n          case 'number': {\n            let f;\n            if(util.isInt32(val)){\n              f = capi.sqlite3_result_int;\n            }else if(wasm.bigIntEnabled\n                     && Number.isInteger(val)\n                     && util.bigIntFits64(BigInt(val))){\n              f = capi.sqlite3_result_int64;\n            }else{\n              f = capi.sqlite3_result_double;\n            }\n            f(pCtx, val);\n            break;\n          }\n          case 'string': {\n            const [p, n] = wasm.allocCString(val,true);\n            capi.sqlite3_result_text(pCtx, p, n, capi.SQLITE_WASM_DEALLOC);\n            break;\n          }\n          case 'object':\n            if(null===val/*yes, typeof null === 'object'*/) {\n              capi.sqlite3_result_null(pCtx);\n              break;\n            }else if(util.isBindableTypedArray(val)){\n              const pBlob = wasm.allocFromTypedArray(val);\n              capi.sqlite3_result_blob(\n                pCtx, pBlob, val.byteLength,\n                capi.SQLITE_WASM_DEALLOC\n              );\n              break;\n            }\n            // else fall through\n          default:\n            toss3(\"Don't not how to handle this UDF result value:\",(typeof val), val);\n      }\n    }catch(e){\n      capi.sqlite3_result_error_js(pCtx, e);\n    }\n  };\n\n  /**\n     Returns the result sqlite3_column_value(pStmt,iCol) passed to\n     sqlite3_value_to_js(). The 3rd argument of this function is\n     ignored by this function except to pass it on as the second\n     argument of sqlite3_value_to_js(). If the sqlite3_column_value()\n     returns NULL (e.g. because the column index is out of range),\n     this function returns `undefined`, regardless of the 3rd\n     argument. If the 3rd argument is falsy and conversion fails,\n     `undefined` will be returned.\n\n     Note that sqlite3_column_value() returns an \"unprotected\" value\n     object, but in a single-threaded environment (like this one)\n     there is no distinction between protected and unprotected values.\n  */\n  capi.sqlite3_column_js = function(pStmt, iCol, throwIfCannotConvert=true){\n    const v = capi.sqlite3_column_value(pStmt, iCol);\n    return (0===v) ? undefined : capi.sqlite3_value_to_js(v, throwIfCannotConvert);\n  };\n\n  /**\n     Internal impl of sqlite3_preupdate_new/old_js() and\n     sqlite3changeset_new/old_js().\n  */\n  const __newOldValue = function(pObj, iCol, impl){\n    impl = capi[impl];\n    if(!this.ptr) this.ptr = wasm.allocPtr();\n    else wasm.pokePtr(this.ptr, 0);\n    const rc = impl(pObj, iCol, this.ptr);\n    if(rc) return SQLite3Error.toss(rc,arguments[2]+\"() failed with code \"+rc);\n    const pv = wasm.peekPtr(this.ptr);\n    return pv ? capi.sqlite3_value_to_js( pv, true ) : undefined;\n  }.bind(Object.create(null));\n\n  /**\n     A wrapper around sqlite3_preupdate_new() which fetches the\n     sqlite3_value at the given index and returns the result of\n     passing it to sqlite3_value_to_js(). Throws on error.\n  */\n  capi.sqlite3_preupdate_new_js =\n    (pDb, iCol)=>__newOldValue(pDb, iCol, 'sqlite3_preupdate_new');\n\n  /**\n     The sqlite3_preupdate_old() counterpart of\n     sqlite3_preupdate_new_js(), with an identical interface.\n  */\n  capi.sqlite3_preupdate_old_js =\n    (pDb, iCol)=>__newOldValue(pDb, iCol, 'sqlite3_preupdate_old');\n\n  /**\n     A wrapper around sqlite3changeset_new() which fetches the\n     sqlite3_value at the given index and returns the result of\n     passing it to sqlite3_value_to_js(). Throws on error.\n\n     If sqlite3changeset_new() succeeds but has no value to report,\n     this function returns the undefined value, noting that undefined\n     is a valid conversion from an `sqlite3_value`, so is unambiguous.\n  */\n  capi.sqlite3changeset_new_js =\n    (pChangesetIter, iCol) => __newOldValue(pChangesetIter, iCol,\n                                            'sqlite3changeset_new');\n\n  /**\n     The sqlite3changeset_old() counterpart of\n     sqlite3changeset_new_js(), with an identical interface.\n  */\n  capi.sqlite3changeset_old_js =\n    (pChangesetIter, iCol)=>__newOldValue(pChangesetIter, iCol,\n                                          'sqlite3changeset_old');\n\n  /* The remainder of the API will be set up in later steps. */\n  const sqlite3 = {\n    WasmAllocError: WasmAllocError,\n    SQLite3Error: SQLite3Error,\n    capi,\n    util,\n    wasm,\n    config,\n    /**\n       Holds the version info of the sqlite3 source tree from which\n       the generated sqlite3-api.js gets built. Note that its version\n       may well differ from that reported by sqlite3_libversion(), but\n       that should be considered a source file mismatch, as the JS and\n       WASM files are intended to be built and distributed together.\n\n       This object is initially a placeholder which gets replaced by a\n       build-generated object.\n    */\n    version: Object.create(null),\n\n    /**\n       The library reserves the 'client' property for client-side use\n       and promises to never define a property with this name nor to\n       ever rely on specific contents of it. It makes no such guarantees\n       for other properties.\n    */\n    client: undefined,\n\n    /**\n       Performs any optional asynchronous library-level initialization\n       which might be required. This function returns a Promise which\n       resolves to the sqlite3 namespace object. Any error in the\n       async init will be fatal to the init as a whole, but init\n       routines are themselves welcome to install dummy catch()\n       handlers which are not fatal if their failure should be\n       considered non-fatal. If called more than once, the second and\n       subsequent calls are no-ops which return a pre-resolved\n       Promise.\n\n       Ideally this function is called as part of the Promise chain\n       which handles the loading and bootstrapping of the API.  If not\n       then it must be called by client-level code, which must not use\n       the library until the returned promise resolves.\n\n       Bug: if called while a prior call is still resolving, the 2nd\n       call will resolve prematurely, before the 1st call has finished\n       resolving. The current build setup precludes that possibility,\n       so it's only a hypothetical problem if/when this function\n       ever needs to be invoked by clients.\n\n       In Emscripten-based builds, this function is called\n       automatically and deleted from this object.\n    */\n    asyncPostInit: async function(){\n      let lip = sqlite3ApiBootstrap.initializersAsync;\n      delete sqlite3ApiBootstrap.initializersAsync;\n      if(!lip || !lip.length) return Promise.resolve(sqlite3);\n      lip = lip.map((f)=>{\n        const p = (f instanceof Promise) ? f : f(sqlite3);\n        return p.catch((e)=>{\n          console.error(\"an async sqlite3 initializer failed:\",e);\n          throw e;\n        });\n      });\n      const postInit = ()=>{\n        if(!sqlite3.__isUnderTest){\n          /* Delete references to internal-only APIs which are used by\n             some initializers. Retain them when running in test mode\n             so that we can add tests for them. */\n          delete sqlite3.util;\n          /* It's conceivable that we might want to expose\n             StructBinder to client-side code, but it's only useful if\n             clients build their own sqlite3.wasm which contains their\n             one C struct types. */\n          delete sqlite3.StructBinder;\n        }\n        return sqlite3;\n      };\n      if(1){\n        /* Run all initializers in sequence. The advantage is that it\n           allows us to have post-init cleanup defined outside of this\n           routine at the end of the list and have it run at a\n           well-defined time. */\n        let p = lip.shift();\n        while(lip.length) p = p.then(lip.shift());\n        return p.then(postInit);\n      }else{\n        /* Run them in an arbitrary order. */\n        return Promise.all(lip).then(postInit);\n      }\n    },\n    /**\n       scriptInfo ideally gets injected into this object by the\n       infrastructure which assembles the JS/WASM module. It contains\n       state which must be collected before sqlite3ApiBootstrap() can\n       be declared. It is not necessarily available to any\n       sqlite3ApiBootstrap.initializers but \"should\" be in place (if\n       it's added at all) by the time that\n       sqlite3ApiBootstrap.initializersAsync is processed.\n\n       This state is not part of the public API, only intended for use\n       with the sqlite3 API bootstrapping and wasm-loading process.\n    */\n    scriptInfo: undefined\n  };\n  try{\n    sqlite3ApiBootstrap.initializers.forEach((f)=>{\n      f(sqlite3);\n    });\n  }catch(e){\n    /* If we don't report this here, it can get completely swallowed\n       up and disappear into the abyss of Promises and Workers. */\n    console.error(\"sqlite3 bootstrap initializer threw:\",e);\n    throw e;\n  }\n  delete sqlite3ApiBootstrap.initializers;\n  sqlite3ApiBootstrap.sqlite3 = sqlite3;\n  return sqlite3;\n}/*sqlite3ApiBootstrap()*/;\n/**\n  globalThis.sqlite3ApiBootstrap.initializers is an internal detail used by\n  the various pieces of the sqlite3 API's amalgamation process. It\n  must not be modified by client code except when plugging such code\n  into the amalgamation process.\n\n  Each component of the amalgamation is expected to append a function\n  to this array. When sqlite3ApiBootstrap() is called for the first\n  time, each such function will be called (in their appended order)\n  and passed the sqlite3 namespace object, into which they can install\n  their features (noting that most will also require that certain\n  features alread have been installed).  At the end of that process,\n  this array is deleted.\n\n  Note that the order of insertion into this array is significant for\n  some pieces. e.g. sqlite3.capi and sqlite3.wasm cannot be fully\n  utilized until the whwasmutil.js part is plugged in via\n  sqlite3-api-glue.js.\n*/\nglobalThis.sqlite3ApiBootstrap.initializers = [];\n/**\n  globalThis.sqlite3ApiBootstrap.initializersAsync is an internal detail\n  used by the sqlite3 API's amalgamation process. It must not be\n  modified by client code except when plugging such code into the\n  amalgamation process.\n\n  The counterpart of globalThis.sqlite3ApiBootstrap.initializers,\n  specifically for initializers which are asynchronous. All entries in\n  this list must be either async functions, non-async functions which\n  return a Promise, or a Promise. Each function in the list is called\n  with the sqlite3 ojbect as its only argument.\n\n  The resolved value of any Promise is ignored and rejection will kill\n  the asyncPostInit() process (at an indeterminate point because all\n  of them are run asynchronously in parallel).\n\n  This list is not processed until the client calls\n  sqlite3.asyncPostInit(). This means, for example, that intializers\n  added to globalThis.sqlite3ApiBootstrap.initializers may push entries to\n  this list.\n*/\nglobalThis.sqlite3ApiBootstrap.initializersAsync = [];\n/**\n   Client code may assign sqlite3ApiBootstrap.defaultConfig an\n   object-type value before calling sqlite3ApiBootstrap() (without\n   arguments) in order to tell that call to use this object as its\n   default config value. The intention of this is to provide\n   downstream clients with a reasonably flexible approach for plugging in\n   an environment-suitable configuration without having to define a new\n   global-scope symbol.\n*/\nglobalThis.sqlite3ApiBootstrap.defaultConfig = Object.create(null);\n/**\n   Placeholder: gets installed by the first call to\n   globalThis.sqlite3ApiBootstrap(). However, it is recommended that the\n   caller of sqlite3ApiBootstrap() capture its return value and delete\n   globalThis.sqlite3ApiBootstrap after calling it. It returns the same\n   value which will be stored here.\n*/\nglobalThis.sqlite3ApiBootstrap.sqlite3 = undefined;\n/* END FILE: api/sqlite3-api-prologue.js */\n/* BEGIN FILE: common/whwasmutil.js */\n/**\n  2022-07-08\n\n  The author disclaims copyright to this source code.  In place of a\n  legal notice, here is a blessing:\n\n  *   May you do good and not evil.\n  *   May you find forgiveness for yourself and forgive others.\n  *   May you share freely, never taking more than you give.\n\n  ***********************************************************************\n\n  The whwasmutil is developed in conjunction with the Jaccwabyt\n  project:\n\n  https://fossil.wanderinghorse.net/r/jaccwabyt\n\n  and sqlite3:\n\n  https://sqlite.org\n\n  This file is kept in sync between both of those trees.\n\n  Maintenance reminder: If you're reading this in a tree other than\n  one of those listed above, note that this copy may be replaced with\n  upstream copies of that one from time to time. Thus the code\n  installed by this function \"should not\" be edited outside of those\n  projects, else it risks getting overwritten.\n*/\n/**\n   This function is intended to simplify porting around various bits\n   of WASM-related utility code from project to project.\n\n   The primary goal of this code is to replace, where possible,\n   Emscripten-generated glue code with equivalent utility code which\n   can be used in arbitrary WASM environments built with toolchains\n   other than Emscripten. As of this writing, this code is capable of\n   acting as a replacement for Emscripten's generated glue code\n   _except_ that the latter installs handlers for Emscripten-provided\n   APIs such as its \"FS\" (virtual filesystem) API. Loading of such\n   things still requires using Emscripten's glue, but the post-load\n   utility APIs provided by this code are still usable as replacements\n   for their sub-optimally-documented Emscripten counterparts.\n\n   Intended usage:\n\n   ```\n   globalThis.WhWasmUtilInstaller(appObject);\n   delete globalThis.WhWasmUtilInstaller;\n   ```\n\n   Its global-scope symbol is intended only to provide an easy way to\n   make it available to 3rd-party scripts and \"should\" be deleted\n   after calling it. That symbols is _not_ used within the library.\n\n   Forewarning: this API explicitly targets only browser\n   environments. If a given non-browser environment has the\n   capabilities needed for a given feature (e.g. TextEncoder), great,\n   but it does not go out of its way to account for them and does not\n   provide compatibility crutches for them.\n\n   It currently offers alternatives to the following\n   Emscripten-generated APIs:\n\n   - OPTIONALLY memory allocation, but how this gets imported is\n     environment-specific.  Most of the following features only work\n     if allocation is available.\n\n   - WASM-exported \"indirect function table\" access and\n     manipulation. e.g.  creating new WASM-side functions using JS\n     functions, analog to Emscripten's addFunction() and\n     uninstallFunction() but slightly different.\n\n   - Get/set specific heap memory values, analog to Emscripten's\n     getValue() and setValue().\n\n   - String length counting in UTF-8 bytes (C-style and JS strings).\n\n   - JS string to C-string conversion and vice versa, analog to\n     Emscripten's stringToUTF8Array() and friends, but with slighter\n     different interfaces.\n\n   - JS string to Uint8Array conversion, noting that browsers actually\n     already have this built in via TextEncoder.\n\n   - \"Scoped\" allocation, such that allocations made inside of a given\n     explicit scope will be automatically cleaned up when the scope is\n     closed. This is fundamentally similar to Emscripten's\n     stackAlloc() and friends but uses the heap instead of the stack\n     because access to the stack requires C code.\n\n   - Create JS wrappers for WASM functions, analog to Emscripten's\n     ccall() and cwrap() functions, except that the automatic\n     conversions for function arguments and return values can be\n     easily customized by the client by assigning custom function\n     signature type names to conversion functions. Essentially,\n     it's ccall() and cwrap() on steroids.\n\n   How to install...\n\n   Passing an object to this function will install the functionality\n   into that object. Afterwards, client code \"should\" delete the global\n   symbol.\n\n   This code requires that the target object have the following\n   properties, noting that they needn't be available until the first\n   time one of the installed APIs is used (as opposed to when this\n   function is called) except where explicitly noted:\n\n   - `exports` must be a property of the target object OR a property\n     of `target.instance` (a WebAssembly.Module instance) and it must\n     contain the symbols exported by the WASM module associated with\n     this code. In an Enscripten environment it must be set to\n     `Module['asm']`. The exports object must contain a minimum of the\n     following symbols:\n\n     - `memory`: a WebAssembly.Memory object representing the WASM\n       memory. _Alternately_, the `memory` property can be set as\n       `target.memory`, in particular if the WASM heap memory is\n       initialized in JS an _imported_ into WASM, as opposed to being\n       initialized in WASM and exported to JS.\n\n     - `__indirect_function_table`: the WebAssembly.Table object which\n       holds WASM-exported functions. This API does not strictly\n       require that the table be able to grow but it will throw if its\n       `installFunction()` is called and the table cannot grow.\n\n   In order to simplify downstream usage, if `target.exports` is not\n   set when this is called then a property access interceptor\n   (read-only, configurable, enumerable) gets installed as `exports`\n   which resolves to `target.instance.exports`, noting that the latter\n   property need not exist until the first time `target.exports` is\n   accessed.\n\n   Some APIs _optionally_ make use of the `bigIntEnabled` property of\n   the target object. It \"should\" be set to true if the WASM\n   environment is compiled with BigInt support, else it must be\n   false. If it is false, certain BigInt-related features will trigger\n   an exception if invoked. This property, if not set when this is\n   called, will get a default value of true only if the BigInt64Array\n   constructor is available, else it will default to false. Note that\n   having the BigInt type is not sufficient for full int64 integration\n   with WASM: the target WASM file must also have been built with\n   that support. In Emscripten that's done using the `-sWASM_BIGINT`\n   flag.\n\n   Some optional APIs require that the target have the following\n   methods:\n\n   - 'alloc()` must behave like C's `malloc()`, allocating N bytes of\n     memory and returning its pointer. In Emscripten this is\n     conventionally made available via `Module['_malloc']`. This API\n     requires that the alloc routine throw on allocation error, as\n     opposed to returning null or 0.\n\n   - 'dealloc()` must behave like C's `free()`, accepting either a\n     pointer returned from its allocation counterpart or the values\n     null/0 (for which it must be a no-op). allocating N bytes of\n     memory and returning its pointer. In Emscripten this is\n     conventionally made available via `Module['_free']`.\n\n   APIs which require allocation routines are explicitly documented as\n   such and/or have \"alloc\" in their names.\n\n   This code is developed and maintained in conjunction with the\n   Jaccwabyt project:\n\n   https://fossil.wanderinghorse.net/r/jaccwabbyt\n\n   More specifically:\n\n   https://fossil.wanderinghorse.net/r/jaccwabbyt/file/common/whwasmutil.js\n*/\nglobalThis.WhWasmUtilInstaller = function(target){\n  'use strict';\n  if(undefined===target.bigIntEnabled){\n    target.bigIntEnabled = !!self['BigInt64Array'];\n  }\n\n  /** Throws a new Error, the message of which is the concatenation of\n      all args with a space between each. */\n  const toss = (...args)=>{throw new Error(args.join(' '))};\n\n  if(!target.exports){\n    Object.defineProperty(target, 'exports', {\n      enumerable: true, configurable: true,\n      get: ()=>(target.instance && target.instance.exports)\n    });\n  }\n\n  /*********\n    alloc()/dealloc() auto-install...\n\n    This would be convenient but it can also cause us to pick up\n    malloc() even when the client code is using a different exported\n    allocator (who, me?), which is bad. malloc() may be exported even\n    if we're not explicitly using it and overriding the malloc()\n    function, linking ours first, is not always feasible when using a\n    malloc() proxy, as it can lead to recursion and stack overflow\n    (who, me?). So... we really need the downstream code to set up\n    target.alloc/dealloc() itself.\n  ******/\n  /******\n  if(target.exports){\n    //Maybe auto-install alloc()/dealloc()...\n    if(!target.alloc && target.exports.malloc){\n      target.alloc = function(n){\n        const m = this(n);\n        return m || toss(\"Allocation of\",n,\"byte(s) failed.\");\n      }.bind(target.exports.malloc);\n    }\n\n    if(!target.dealloc && target.exports.free){\n      target.dealloc = function(ptr){\n        if(ptr) this(ptr);\n      }.bind(target.exports.free);\n    }\n  }*******/\n\n  /**\n     Pointers in WASM are currently assumed to be 32-bit, but someday\n     that will certainly change.\n  */\n  const ptrIR = target.pointerIR || 'i32';\n  const ptrSizeof = target.ptrSizeof =\n        ('i32'===ptrIR ? 4\n         : ('i64'===ptrIR\n            ? 8 : toss(\"Unhandled ptrSizeof:\",ptrIR)));\n  /** Stores various cached state. */\n  const cache = Object.create(null);\n  /** Previously-recorded size of cache.memory.buffer, noted so that\n      we can recreate the view objects if the heap grows. */\n  cache.heapSize = 0;\n  /** WebAssembly.Memory object extracted from target.memory or\n      target.exports.memory the first time heapWrappers() is\n      called. */\n  cache.memory = null;\n  /** uninstallFunction() puts table indexes in here for reuse and\n      installFunction() extracts them. */\n  cache.freeFuncIndexes = [];\n  /**\n     Used by scopedAlloc() and friends.\n  */\n  cache.scopedAlloc = [];\n\n  cache.utf8Decoder = new TextDecoder();\n  cache.utf8Encoder = new TextEncoder('utf-8');\n\n  /**\n     For the given IR-like string in the set ('i8', 'i16', 'i32',\n     'f32', 'float', 'i64', 'f64', 'double', '*'), or any string value\n     ending in '*', returns the sizeof for that value\n     (target.ptrSizeof in the latter case). For any other value, it\n     returns the undefined value.\n  */\n  target.sizeofIR = (n)=>{\n    switch(n){\n        case 'i8': return 1;\n        case 'i16': return 2;\n        case 'i32': case 'f32': case 'float': return 4;\n        case 'i64': case 'f64': case 'double': return 8;\n        case '*': return ptrSizeof;\n        default:\n          return (''+n).endsWith('*') ? ptrSizeof : undefined;\n    }\n  };\n\n  /**\n     If (cache.heapSize !== cache.memory.buffer.byteLength), i.e. if\n     the heap has grown since the last call, updates cache.HEAPxyz.\n     Returns the cache object.\n  */\n  const heapWrappers = function(){\n    if(!cache.memory){\n      cache.memory = (target.memory instanceof WebAssembly.Memory)\n        ? target.memory : target.exports.memory;\n    }else if(cache.heapSize === cache.memory.buffer.byteLength){\n      return cache;\n    }\n    // heap is newly-acquired or has been resized....\n    const b = cache.memory.buffer;\n    cache.HEAP8 = new Int8Array(b); cache.HEAP8U = new Uint8Array(b);\n    cache.HEAP16 = new Int16Array(b); cache.HEAP16U = new Uint16Array(b);\n    cache.HEAP32 = new Int32Array(b); cache.HEAP32U = new Uint32Array(b);\n    if(target.bigIntEnabled){\n      cache.HEAP64 = new BigInt64Array(b); cache.HEAP64U = new BigUint64Array(b);\n    }\n    cache.HEAP32F = new Float32Array(b); cache.HEAP64F = new Float64Array(b);\n    cache.heapSize = b.byteLength;\n    return cache;\n  };\n\n  /** Convenience equivalent of this.heapForSize(8,false). */\n  target.heap8 = ()=>heapWrappers().HEAP8;\n\n  /** Convenience equivalent of this.heapForSize(8,true). */\n  target.heap8u = ()=>heapWrappers().HEAP8U;\n\n  /** Convenience equivalent of this.heapForSize(16,false). */\n  target.heap16 = ()=>heapWrappers().HEAP16;\n\n  /** Convenience equivalent of this.heapForSize(16,true). */\n  target.heap16u = ()=>heapWrappers().HEAP16U;\n\n  /** Convenience equivalent of this.heapForSize(32,false). */\n  target.heap32 = ()=>heapWrappers().HEAP32;\n\n  /** Convenience equivalent of this.heapForSize(32,true). */\n  target.heap32u = ()=>heapWrappers().HEAP32U;\n\n  /**\n     Requires n to be one of:\n\n     - integer 8, 16, or 32.\n     - A integer-type TypedArray constructor: Int8Array, Int16Array,\n     Int32Array, or their Uint counterparts.\n\n     If this.bigIntEnabled is true, it also accepts the value 64 or a\n     BigInt64Array/BigUint64Array, else it throws if passed 64 or one\n     of those constructors.\n\n     Returns an integer-based TypedArray view of the WASM heap\n     memory buffer associated with the given block size. If passed\n     an integer as the first argument and unsigned is truthy then\n     the \"U\" (unsigned) variant of that view is returned, else the\n     signed variant is returned. If passed a TypedArray value, the\n     2nd argument is ignored. Note that Float32Array and\n     Float64Array views are not supported by this function.\n\n     Note that growth of the heap will invalidate any references to\n     this heap, so do not hold a reference longer than needed and do\n     not use a reference after any operation which may\n     allocate. Instead, re-fetch the reference by calling this\n     function again.\n\n     Throws if passed an invalid n.\n\n     Pedantic side note: the name \"heap\" is a bit of a misnomer. In a\n     WASM environment, the stack and heap memory are all accessed via\n     the same view(s) of the memory.\n  */\n  target.heapForSize = function(n,unsigned = true){\n    let ctor;\n    const c = (cache.memory && cache.heapSize === cache.memory.buffer.byteLength)\n          ? cache : heapWrappers();\n    switch(n){\n        case Int8Array: return c.HEAP8; case Uint8Array: return c.HEAP8U;\n        case Int16Array: return c.HEAP16; case Uint16Array: return c.HEAP16U;\n        case Int32Array: return c.HEAP32; case Uint32Array: return c.HEAP32U;\n        case 8:  return unsigned ? c.HEAP8U : c.HEAP8;\n        case 16: return unsigned ? c.HEAP16U : c.HEAP16;\n        case 32: return unsigned ? c.HEAP32U : c.HEAP32;\n        case 64:\n          if(c.HEAP64) return unsigned ? c.HEAP64U : c.HEAP64;\n          break;\n        default:\n          if(target.bigIntEnabled){\n            if(n===self['BigUint64Array']) return c.HEAP64U;\n            else if(n===self['BigInt64Array']) return c.HEAP64;\n            break;\n          }\n    }\n    toss(\"Invalid heapForSize() size: expecting 8, 16, 32,\",\n         \"or (if BigInt is enabled) 64.\");\n  };\n\n  /**\n     Returns the WASM-exported \"indirect function table.\"\n  */\n  target.functionTable = function(){\n    return target.exports.__indirect_function_table;\n    /** -----------------^^^^^ \"seems\" to be a standardized export name.\n        From Emscripten release notes from 2020-09-10:\n        - Use `__indirect_function_table` as the import name for the\n        table, which is what LLVM does.\n    */\n  };\n\n  /**\n     Given a function pointer, returns the WASM function table entry\n     if found, else returns a falsy value: undefined if fptr is out of\n     range or null if it's in range but the table entry is empty.\n  */\n  target.functionEntry = function(fptr){\n    const ft = target.functionTable();\n    return fptr < ft.length ? ft.get(fptr) : undefined;\n  };\n\n  /**\n     Creates a WASM function which wraps the given JS function and\n     returns the JS binding of that WASM function. The signature\n     string must be the Jaccwabyt-format or Emscripten\n     addFunction()-format function signature string. In short: in may\n     have one of the following formats:\n\n     - Emscripten: `\"x...\"`, where the first x is a letter representing\n       the result type and subsequent letters represent the argument\n       types. Functions with no arguments have only a single\n       letter. See below.\n\n     - Jaccwabyt: `\"x(...)\"` where `x` is the letter representing the\n       result type and letters in the parens (if any) represent the\n       argument types. Functions with no arguments use `x()`. See\n       below.\n\n     Supported letters:\n\n     - `i` = int32\n     - `p` = int32 (\"pointer\")\n     - `j` = int64\n     - `f` = float32\n     - `d` = float64\n     - `v` = void, only legal for use as the result type\n\n     It throws if an invalid signature letter is used.\n\n     Jaccwabyt-format signatures support some additional letters which\n     have no special meaning here but (in this context) act as aliases\n     for other letters:\n\n     - `s`, `P`: same as `p`\n\n     Sidebar: this code is developed together with Jaccwabyt, thus the\n     support for its signature format.\n\n     The arguments may be supplied in either order: (func,sig) or\n     (sig,func).\n  */\n  target.jsFuncToWasm = function f(func, sig){\n    /** Attribution: adapted up from Emscripten-generated glue code,\n        refactored primarily for efficiency's sake, eliminating\n        call-local functions and superfluous temporary arrays. */\n    if(!f._){/*static init...*/\n      f._ = {\n        // Map of signature letters to type IR values\n        sigTypes: Object.assign(Object.create(null),{\n          i: 'i32', p: 'i32', P: 'i32', s: 'i32',\n          j: 'i64', f: 'f32', d: 'f64'\n        }),\n        // Map of type IR values to WASM type code values\n        typeCodes: Object.assign(Object.create(null),{\n          f64: 0x7c, f32: 0x7d, i64: 0x7e, i32: 0x7f\n        }),\n        /** Encodes n, which must be <2^14 (16384), into target array\n            tgt, as a little-endian value, using the given method\n            ('push' or 'unshift'). */\n        uleb128Encode: function(tgt, method, n){\n          if(n<128) tgt[method](n);\n          else tgt[method]( (n % 128) | 128, n>>7);\n        },\n        /** Intentionally-lax pattern for Jaccwabyt-format function\n            pointer signatures, the intent of which is simply to\n            distinguish them from Emscripten-format signatures. The\n            downstream checks are less lax. */\n        rxJSig: /^(\\w)\\((\\w*)\\)$/,\n        /** Returns the parameter-value part of the given signature\n            string. */\n        sigParams: function(sig){\n          const m = f._.rxJSig.exec(sig);\n          return m ? m[2] : sig.substr(1);\n        },\n        /** Returns the IR value for the given letter or throws\n            if the letter is invalid. */\n        letterType: (x)=>f._.sigTypes[x] || toss(\"Invalid signature letter:\",x),\n        /** Returns an object describing the result type and parameter\n            type(s) of the given function signature, or throws if the\n            signature is invalid. */\n        /******** // only valid for use with the WebAssembly.Function ctor, which\n                  // is not yet documented on MDN.\n        sigToWasm: function(sig){\n          const rc = {parameters:[], results: []};\n          if('v'!==sig[0]) rc.results.push(f.sigTypes(sig[0]));\n          for(const x of f._.sigParams(sig)){\n            rc.parameters.push(f._.typeCodes(x));\n          }\n          return rc;\n        },************/\n        /** Pushes the WASM data type code for the given signature\n            letter to the given target array. Throws if letter is\n            invalid. */\n        pushSigType: (dest, letter)=>dest.push(f._.typeCodes[f._.letterType(letter)])\n      };\n    }/*static init*/\n    if('string'===typeof func){\n      const x = sig;\n      sig = func;\n      func = x;\n    }\n    const sigParams = f._.sigParams(sig);\n    const wasmCode = [0x01/*count: 1*/, 0x60/*function*/];\n    f._.uleb128Encode(wasmCode, 'push', sigParams.length);\n    for(const x of sigParams) f._.pushSigType(wasmCode, x);\n    if('v'===sig[0]) wasmCode.push(0);\n    else{\n      wasmCode.push(1);\n      f._.pushSigType(wasmCode, sig[0]);\n    }\n    f._.uleb128Encode(wasmCode, 'unshift', wasmCode.length)/* type section length */;\n    wasmCode.unshift(\n      0x00, 0x61, 0x73, 0x6d, /* magic: \"\\0asm\" */\n      0x01, 0x00, 0x00, 0x00, /* version: 1 */\n      0x01 /* type section code */\n    );\n    wasmCode.push(\n      /* import section: */ 0x02, 0x07,\n      /* (import \"e\" \"f\" (func 0 (type 0))): */\n      0x01, 0x01, 0x65, 0x01, 0x66, 0x00, 0x00,\n      /* export section: */ 0x07, 0x05,\n      /* (export \"f\" (func 0 (type 0))): */\n      0x01, 0x01, 0x66, 0x00, 0x00\n    );\n    return (new WebAssembly.Instance(\n      new WebAssembly.Module(new Uint8Array(wasmCode)), {\n        e: { f: func }\n      })).exports['f'];\n  }/*jsFuncToWasm()*/;\n\n  /**\n     Documented as target.installFunction() except for the 3rd\n     argument: if truthy, the newly-created function pointer\n     is stashed in the current scoped-alloc scope and will be\n     cleaned up at the matching scopedAllocPop(), else it\n     is not stashed there.\n   */\n  const __installFunction = function f(func, sig, scoped){\n    if(scoped && !cache.scopedAlloc.length){\n      toss(\"No scopedAllocPush() scope is active.\");\n    }\n    if('string'===typeof func){\n      const x = sig;\n      sig = func;\n      func = x;\n    }\n    if('string'!==typeof sig || !(func instanceof Function)){\n      toss(\"Invalid arguments: expecting (function,signature) \"+\n           \"or (signature,function).\");\n    }\n    const ft = target.functionTable();\n    const oldLen = ft.length;\n    let ptr;\n    while(cache.freeFuncIndexes.length){\n      ptr = cache.freeFuncIndexes.pop();\n      if(ft.get(ptr)){ /* Table was modified via a different API */\n        ptr = null;\n        continue;\n      }else{\n        break;\n      }\n    }\n    if(!ptr){\n      ptr = oldLen;\n      ft.grow(1);\n    }\n    try{\n      /*this will only work if func is a WASM-exported function*/\n      ft.set(ptr, func);\n      if(scoped){\n        cache.scopedAlloc[cache.scopedAlloc.length-1].push(ptr);\n      }\n      return ptr;\n    }catch(e){\n      if(!(e instanceof TypeError)){\n        if(ptr===oldLen) cache.freeFuncIndexes.push(oldLen);\n        throw e;\n      }\n    }\n    // It's not a WASM-exported function, so compile one...\n    try {\n      const fptr = target.jsFuncToWasm(func, sig);\n      ft.set(ptr, fptr);\n      if(scoped){\n        cache.scopedAlloc[cache.scopedAlloc.length-1].push(ptr);\n      }\n    }catch(e){\n      if(ptr===oldLen) cache.freeFuncIndexes.push(oldLen);\n      throw e;\n    }\n    return ptr;\n  };\n\n  /**\n     Expects a JS function and signature, exactly as for\n     this.jsFuncToWasm(). It uses that function to create a\n     WASM-exported function, installs that function to the next\n     available slot of this.functionTable(), and returns the\n     function's index in that table (which acts as a pointer to that\n     function). The returned pointer can be passed to\n     uninstallFunction() to uninstall it and free up the table slot for\n     reuse.\n\n     If passed (string,function) arguments then it treats the first\n     argument as the signature and second as the function.\n\n     As a special case, if the passed-in function is a WASM-exported\n     function then the signature argument is ignored and func is\n     installed as-is, without requiring re-compilation/re-wrapping.\n\n     This function will propagate an exception if\n     WebAssembly.Table.grow() throws or this.jsFuncToWasm() throws.\n     The former case can happen in an Emscripten-compiled\n     environment when building without Emscripten's\n     `-sALLOW_TABLE_GROWTH` flag.\n\n     Sidebar: this function differs from Emscripten's addFunction()\n     _primarily_ in that it does not share that function's\n     undocumented behavior of reusing a function if it's passed to\n     addFunction() more than once, which leads to uninstallFunction()\n     breaking clients which do not take care to avoid that case:\n\n     https://github.com/emscripten-core/emscripten/issues/17323\n  */\n  target.installFunction = (func, sig)=>__installFunction(func, sig, false);\n\n  /**\n     EXPERIMENTAL! DO NOT USE IN CLIENT CODE!\n\n     Works exactly like installFunction() but requires that a\n     scopedAllocPush() is active and uninstalls the given function\n     when that alloc scope is popped via scopedAllocPop().\n     This is used for implementing JS/WASM function bindings which\n     should only persist for the life of a call into a single\n     C-side function.\n  */\n  target.scopedInstallFunction = (func, sig)=>__installFunction(func, sig, true);\n\n  /**\n     Requires a pointer value previously returned from\n     this.installFunction(). Removes that function from the WASM\n     function table, marks its table slot as free for re-use, and\n     returns that function. It is illegal to call this before\n     installFunction() has been called and results are undefined if\n     ptr was not returned by that function. The returned function\n     may be passed back to installFunction() to reinstall it.\n\n     To simplify certain use cases, if passed a falsy non-0 value\n     (noting that 0 is a valid function table index), this function\n     has no side effects and returns undefined.\n  */\n  target.uninstallFunction = function(ptr){\n    if(!ptr && 0!==ptr) return undefined;\n    const fi = cache.freeFuncIndexes;\n    const ft = target.functionTable();\n    fi.push(ptr);\n    const rc = ft.get(ptr);\n    ft.set(ptr, null);\n    return rc;\n  };\n\n  /**\n     Given a WASM heap memory address and a data type name in the form\n     (i8, i16, i32, i64, float (or f32), double (or f64)), this\n     fetches the numeric value from that address and returns it as a\n     number or, for the case of type='i64', a BigInt (noting that that\n     type triggers an exception if this.bigIntEnabled is\n     falsy). Throws if given an invalid type.\n\n     If the first argument is an array, it is treated as an array of\n     addresses and the result is an array of the values from each of\n     those address, using the same 2nd argument for determining the\n     value type to fetch.\n\n     As a special case, if type ends with a `*`, it is considered to\n     be a pointer type and is treated as the WASM numeric type\n     appropriate for the pointer size (`i32`).\n\n     While likely not obvious, this routine and its poke()\n     counterpart are how pointer-to-value _output_ parameters\n     in WASM-compiled C code can be interacted with:\n\n     ```\n     const ptr = alloc(4);\n     poke(ptr, 0, 'i32'); // clear the ptr's value\n     aCFuncWithOutputPtrToInt32Arg( ptr ); // e.g. void foo(int *x);\n     const result = peek(ptr, 'i32'); // fetch ptr's value\n     dealloc(ptr);\n     ```\n\n     scopedAlloc() and friends can be used to make handling of\n     `ptr` safe against leaks in the case of an exception:\n\n     ```\n     let result;\n     const scope = scopedAllocPush();\n     try{\n       const ptr = scopedAlloc(4);\n       poke(ptr, 0, 'i32');\n       aCFuncWithOutputPtrArg( ptr );\n       result = peek(ptr, 'i32');\n     }finally{\n       scopedAllocPop(scope);\n     }\n     ```\n\n     As a rule poke() must be called to set (typically zero\n     out) the pointer's value, else it will contain an essentially\n     random value.\n\n     ACHTUNG: calling this often, e.g. in a loop, can have a noticably\n     painful impact on performance. Rather than doing so, use\n     heapForSize() to fetch the heap object and read directly from it.\n\n     See: poke()\n  */\n  target.peek = function f(ptr, type='i8'){\n    if(type.endsWith('*')) type = ptrIR;\n    const c = (cache.memory && cache.heapSize === cache.memory.buffer.byteLength)\n          ? cache : heapWrappers();\n    const list = Array.isArray(ptr) ? [] : undefined;\n    let rc;\n    do{\n      if(list) ptr = arguments[0].shift();\n      switch(type){\n          case 'i1':\n          case 'i8': rc = c.HEAP8[ptr>>0]; break;\n          case 'i16': rc = c.HEAP16[ptr>>1]; break;\n          case 'i32': rc = c.HEAP32[ptr>>2]; break;\n          case 'float': case 'f32': rc = c.HEAP32F[ptr>>2]; break;\n          case 'double': case 'f64': rc = Number(c.HEAP64F[ptr>>3]); break;\n          case 'i64':\n            if(target.bigIntEnabled){\n              rc = BigInt(c.HEAP64[ptr>>3]);\n              break;\n            }\n            /* fallthru */\n          default:\n            toss('Invalid type for peek():',type);\n      }\n      if(list) list.push(rc);\n    }while(list && arguments[0].length);\n    return list || rc;\n  };\n\n  /**\n     The counterpart of peek(), this sets a numeric value at\n     the given WASM heap address, using the type to define how many\n     bytes are written. Throws if given an invalid type. See\n     peek() for details about the type argument. If the 3rd\n     argument ends with `*` then it is treated as a pointer type and\n     this function behaves as if the 3rd argument were `i32`.\n\n     If the first argument is an array, it is treated like a list\n     of pointers and the given value is written to each one.\n\n     Returns `this`. (Prior to 2022-12-09 it returns this function.)\n\n     ACHTUNG: calling this often, e.g. in a loop, can have a noticably\n     painful impact on performance. Rather than doing so, use\n     heapForSize() to fetch the heap object and assign directly to it\n     or use the heap's set() method.\n  */\n  target.poke = function(ptr, value, type='i8'){\n    if (type.endsWith('*')) type = ptrIR;\n    const c = (cache.memory && cache.heapSize === cache.memory.buffer.byteLength)\n          ? cache : heapWrappers();\n    for(const p of (Array.isArray(ptr) ? ptr : [ptr])){\n      switch (type) {\n          case 'i1':\n          case 'i8': c.HEAP8[p>>0] = value; continue;\n          case 'i16': c.HEAP16[p>>1] = value; continue;\n          case 'i32': c.HEAP32[p>>2] = value; continue;\n          case 'float': case 'f32': c.HEAP32F[p>>2] = value; continue;\n          case 'double': case 'f64': c.HEAP64F[p>>3] = value; continue;\n          case 'i64':\n            if(c.HEAP64){\n              c.HEAP64[p>>3] = BigInt(value);\n              continue;\n            }\n            /* fallthru */\n          default:\n            toss('Invalid type for poke(): ' + type);\n      }\n    }\n    return this;\n  };\n\n  /**\n     Convenience form of peek() intended for fetching\n     pointer-to-pointer values. If passed a single non-array argument\n     it returns the value of that one pointer address. If passed\n     multiple arguments, or a single array of arguments, it returns an\n     array of their values.\n  */\n  target.peekPtr = (...ptr)=>target.peek( (1===ptr.length ? ptr[0] : ptr), ptrIR );\n\n  /**\n     A variant of poke() intended for setting pointer-to-pointer\n     values. Its differences from poke() are that (1) it defaults to a\n     value of 0 and (2) it always writes to the pointer-sized heap\n     view.\n  */\n  target.pokePtr = (ptr, value=0)=>target.poke(ptr, value, ptrIR);\n\n  /**\n     Convenience form of peek() intended for fetching i8 values. If\n     passed a single non-array argument it returns the value of that\n     one pointer address. If passed multiple arguments, or a single\n     array of arguments, it returns an array of their values.\n  */\n  target.peek8 = (...ptr)=>target.peek( (1===ptr.length ? ptr[0] : ptr), 'i8' );\n  /**\n     Convience form of poke() intended for setting individual bytes.\n     Its difference from poke() is that it always writes to the\n     i8-sized heap view.\n  */\n  target.poke8 = (ptr, value)=>target.poke(ptr, value, 'i8');\n  /** i16 variant of peek8(). */\n  target.peek16 = (...ptr)=>target.peek( (1===ptr.length ? ptr[0] : ptr), 'i16' );\n  /** i16 variant of poke8(). */\n  target.poke16 = (ptr, value)=>target.poke(ptr, value, 'i16');\n  /** i32 variant of peek8(). */\n  target.peek32 = (...ptr)=>target.peek( (1===ptr.length ? ptr[0] : ptr), 'i32' );\n  /** i32 variant of poke8(). */\n  target.poke32 = (ptr, value)=>target.poke(ptr, value, 'i32');\n  /** i64 variant of peek8(). Will throw if this build is not\n      configured for BigInt support. */\n  target.peek64 = (...ptr)=>target.peek( (1===ptr.length ? ptr[0] : ptr), 'i64' );\n  /** i64 variant of poke8(). Will throw if this build is not\n      configured for BigInt support. Note that this returns\n      a BigInt-type value, not a Number-type value. */\n  target.poke64 = (ptr, value)=>target.poke(ptr, value, 'i64');\n  /** f32 variant of peek8(). */\n  target.peek32f = (...ptr)=>target.peek( (1===ptr.length ? ptr[0] : ptr), 'f32' );\n  /** f32 variant of poke8(). */\n  target.poke32f = (ptr, value)=>target.poke(ptr, value, 'f32');\n  /** f64 variant of peek8(). */\n  target.peek64f = (...ptr)=>target.peek( (1===ptr.length ? ptr[0] : ptr), 'f64' );\n  /** f64 variant of poke8(). */\n  target.poke64f = (ptr, value)=>target.poke(ptr, value, 'f64');\n\n  /** Deprecated alias for getMemValue() */\n  target.getMemValue = target.peek;\n  /** Deprecated alias for peekPtr() */\n  target.getPtrValue = target.peekPtr;\n  /** Deprecated alias for poke() */\n  target.setMemValue = target.poke;\n  /** Deprecated alias for pokePtr() */\n  target.setPtrValue = target.pokePtr;\n\n  /**\n     Returns true if the given value appears to be legal for use as\n     a WASM pointer value. Its _range_ of values is not (cannot be)\n     validated except to ensure that it is a 32-bit integer with a\n     value of 0 or greater. Likewise, it cannot verify whether the\n     value actually refers to allocated memory in the WASM heap.\n  */\n  target.isPtr32 = (ptr)=>('number'===typeof ptr && (ptr===(ptr|0)) && ptr>=0);\n\n  /**\n     isPtr() is an alias for isPtr32(). If/when 64-bit WASM pointer\n     support becomes widespread, it will become an alias for either\n     isPtr32() or the as-yet-hypothetical isPtr64(), depending on a\n     configuration option.\n  */\n  target.isPtr = target.isPtr32;\n\n  /**\n     Expects ptr to be a pointer into the WASM heap memory which\n     refers to a NUL-terminated C-style string encoded as UTF-8.\n     Returns the length, in bytes, of the string, as for `strlen(3)`.\n     As a special case, if !ptr or if it's not a pointer then it\n     returns `null`. Throws if ptr is out of range for\n     target.heap8u().\n  */\n  target.cstrlen = function(ptr){\n    if(!ptr || !target.isPtr(ptr)) return null;\n    const h = heapWrappers().HEAP8U;\n    let pos = ptr;\n    for( ; h[pos] !== 0; ++pos ){}\n    return pos - ptr;\n  };\n\n  /** Internal helper to use in operations which need to distinguish\n      between SharedArrayBuffer heap memory and non-shared heap. */\n  const __SAB = ('undefined'===typeof SharedArrayBuffer)\n        ? function(){} : SharedArrayBuffer;\n  const __utf8Decode = function(arrayBuffer, begin, end){\n    return cache.utf8Decoder.decode(\n      (arrayBuffer.buffer instanceof __SAB)\n        ? arrayBuffer.slice(begin, end)\n        : arrayBuffer.subarray(begin, end)\n    );\n  };\n\n  /**\n     Expects ptr to be a pointer into the WASM heap memory which\n     refers to a NUL-terminated C-style string encoded as UTF-8. This\n     function counts its byte length using cstrlen() then returns a\n     JS-format string representing its contents. As a special case, if\n     ptr is falsy or not a pointer, `null` is returned.\n  */\n  target.cstrToJs = function(ptr){\n    const n = target.cstrlen(ptr);\n    return n ? __utf8Decode(heapWrappers().HEAP8U, ptr, ptr+n) : (null===n ? n : \"\");\n  };\n\n  /**\n     Given a JS string, this function returns its UTF-8 length in\n     bytes. Returns null if str is not a string.\n  */\n  target.jstrlen = function(str){\n    /** Attribution: derived from Emscripten's lengthBytesUTF8() */\n    if('string'!==typeof str) return null;\n    const n = str.length;\n    let len = 0;\n    for(let i = 0; i < n; ++i){\n      let u = str.charCodeAt(i);\n      if(u>=0xd800 && u<=0xdfff){\n        u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n      }\n      if(u<=0x7f) ++len;\n      else if(u<=0x7ff) len += 2;\n      else if(u<=0xffff) len += 3;\n      else len += 4;\n    }\n    return len;\n  };\n\n  /**\n     Encodes the given JS string as UTF8 into the given TypedArray\n     tgt, starting at the given offset and writing, at most, maxBytes\n     bytes (including the NUL terminator if addNul is true, else no\n     NUL is added). If it writes any bytes at all and addNul is true,\n     it always NUL-terminates the output, even if doing so means that\n     the NUL byte is all that it writes.\n\n     If maxBytes is negative (the default) then it is treated as the\n     remaining length of tgt, starting at the given offset.\n\n     If writing the last character would surpass the maxBytes count\n     because the character is multi-byte, that character will not be\n     written (as opposed to writing a truncated multi-byte character).\n     This can lead to it writing as many as 3 fewer bytes than\n     maxBytes specifies.\n\n     Returns the number of bytes written to the target, _including_\n     the NUL terminator (if any). If it returns 0, it wrote nothing at\n     all, which can happen if:\n\n     - str is empty and addNul is false.\n     - offset < 0.\n     - maxBytes == 0.\n     - maxBytes is less than the byte length of a multi-byte str[0].\n\n     Throws if tgt is not an Int8Array or Uint8Array.\n\n     Design notes:\n\n     - In C's strcpy(), the destination pointer is the first\n       argument. That is not the case here primarily because the 3rd+\n       arguments are all referring to the destination, so it seems to\n       make sense to have them grouped with it.\n\n     - Emscripten's counterpart of this function (stringToUTF8Array())\n       returns the number of bytes written sans NUL terminator. That\n       is, however, ambiguous: str.length===0 or maxBytes===(0 or 1)\n       all cause 0 to be returned.\n  */\n  target.jstrcpy = function(jstr, tgt, offset = 0, maxBytes = -1, addNul = true){\n    /** Attribution: the encoding bits are taken from Emscripten's\n        stringToUTF8Array(). */\n    if(!tgt || (!(tgt instanceof Int8Array) && !(tgt instanceof Uint8Array))){\n      toss(\"jstrcpy() target must be an Int8Array or Uint8Array.\");\n    }\n    if(maxBytes<0) maxBytes = tgt.length - offset;\n    if(!(maxBytes>0) || !(offset>=0)) return 0;\n    let i = 0, max = jstr.length;\n    const begin = offset, end = offset + maxBytes - (addNul ? 1 : 0);\n    for(; i < max && offset < end; ++i){\n      let u = jstr.charCodeAt(i);\n      if(u>=0xd800 && u<=0xdfff){\n        u = 0x10000 + ((u & 0x3FF) << 10) | (jstr.charCodeAt(++i) & 0x3FF);\n      }\n      if(u<=0x7f){\n        if(offset >= end) break;\n        tgt[offset++] = u;\n      }else if(u<=0x7ff){\n        if(offset + 1 >= end) break;\n        tgt[offset++] = 0xC0 | (u >> 6);\n        tgt[offset++] = 0x80 | (u & 0x3f);\n      }else if(u<=0xffff){\n        if(offset + 2 >= end) break;\n        tgt[offset++] = 0xe0 | (u >> 12);\n        tgt[offset++] = 0x80 | ((u >> 6) & 0x3f);\n        tgt[offset++] = 0x80 | (u & 0x3f);\n      }else{\n        if(offset + 3 >= end) break;\n        tgt[offset++] = 0xf0 | (u >> 18);\n        tgt[offset++] = 0x80 | ((u >> 12) & 0x3f);\n        tgt[offset++] = 0x80 | ((u >> 6) & 0x3f);\n        tgt[offset++] = 0x80 | (u & 0x3f);\n      }\n    }\n    if(addNul) tgt[offset++] = 0;\n    return offset - begin;\n  };\n\n  /**\n     Works similarly to C's strncpy(), copying, at most, n bytes (not\n     characters) from srcPtr to tgtPtr. It copies until n bytes have\n     been copied or a 0 byte is reached in src. _Unlike_ strncpy(), it\n     returns the number of bytes it assigns in tgtPtr, _including_ the\n     NUL byte (if any). If n is reached before a NUL byte in srcPtr,\n     tgtPtr will _not_ be NULL-terminated. If a NUL byte is reached\n     before n bytes are copied, tgtPtr will be NUL-terminated.\n\n     If n is negative, cstrlen(srcPtr)+1 is used to calculate it, the\n     +1 being for the NUL byte.\n\n     Throws if tgtPtr or srcPtr are falsy. Results are undefined if:\n\n     - either is not a pointer into the WASM heap or\n\n     - srcPtr is not NUL-terminated AND n is less than srcPtr's\n       logical length.\n\n     ACHTUNG: it is possible to copy partial multi-byte characters\n     this way, and converting such strings back to JS strings will\n     have undefined results.\n  */\n  target.cstrncpy = function(tgtPtr, srcPtr, n){\n    if(!tgtPtr || !srcPtr) toss(\"cstrncpy() does not accept NULL strings.\");\n    if(n<0) n = target.cstrlen(strPtr)+1;\n    else if(!(n>0)) return 0;\n    const heap = target.heap8u();\n    let i = 0, ch;\n    for(; i < n && (ch = heap[srcPtr+i]); ++i){\n      heap[tgtPtr+i] = ch;\n    }\n    if(i<n) heap[tgtPtr + i++] = 0;\n    return i;\n  };\n\n  /**\n     For the given JS string, returns a Uint8Array of its contents\n     encoded as UTF-8. If addNul is true, the returned array will have\n     a trailing 0 entry, else it will not.\n  */\n  target.jstrToUintArray = (str, addNul=false)=>{\n    return cache.utf8Encoder.encode(addNul ? (str+\"\\0\") : str);\n    // Or the hard way...\n    /** Attribution: derived from Emscripten's stringToUTF8Array() */\n    //const a = [], max = str.length;\n    //let i = 0, pos = 0;\n    //for(; i < max; ++i){\n    //  let u = str.charCodeAt(i);\n    //  if(u>=0xd800 && u<=0xdfff){\n    //    u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    //  }\n    //  if(u<=0x7f) a[pos++] = u;\n    //  else if(u<=0x7ff){\n    //    a[pos++] = 0xC0 | (u >> 6);\n    //    a[pos++] = 0x80 | (u & 63);\n    //  }else if(u<=0xffff){\n    //    a[pos++] = 0xe0 | (u >> 12);\n    //    a[pos++] = 0x80 | ((u >> 6) & 63);\n    //    a[pos++] = 0x80 | (u & 63);\n    //  }else{\n    //    a[pos++] = 0xf0 | (u >> 18);\n    //    a[pos++] = 0x80 | ((u >> 12) & 63);\n    //    a[pos++] = 0x80 | ((u >> 6) & 63);\n    //    a[pos++] = 0x80 | (u & 63);\n    //  }\n    // }\n    // return new Uint8Array(a);\n  };\n\n  const __affirmAlloc = (obj,funcName)=>{\n    if(!(obj.alloc instanceof Function) ||\n       !(obj.dealloc instanceof Function)){\n      toss(\"Object is missing alloc() and/or dealloc() function(s)\",\n           \"required by\",funcName+\"().\");\n    }\n  };\n\n  const __allocCStr = function(jstr, returnWithLength, allocator, funcName){\n    __affirmAlloc(target, funcName);\n    if('string'!==typeof jstr) return null;\n    if(0){/* older impl, possibly more widely compatible? */\n      const n = target.jstrlen(jstr),\n            ptr = allocator(n+1);\n      target.jstrcpy(jstr, target.heap8u(), ptr, n+1, true);\n      return returnWithLength ? [ptr, n] : ptr;\n    }else{/* newer, (probably) faster and (certainly) simpler impl */\n      const u = cache.utf8Encoder.encode(jstr),\n            ptr = allocator(u.length+1),\n            heap = heapWrappers().HEAP8U;\n      heap.set(u, ptr);\n      heap[ptr + u.length] = 0;\n      return returnWithLength ? [ptr, u.length] : ptr;\n    }\n  };\n\n  /**\n     Uses target.alloc() to allocate enough memory for jstrlen(jstr)+1\n     bytes of memory, copies jstr to that memory using jstrcpy(),\n     NUL-terminates it, and returns the pointer to that C-string.\n     Ownership of the pointer is transfered to the caller, who must\n     eventually pass the pointer to dealloc() to free it.\n\n     If passed a truthy 2nd argument then its return semantics change:\n     it returns [ptr,n], where ptr is the C-string's pointer and n is\n     its cstrlen().\n\n     Throws if `target.alloc` or `target.dealloc` are not functions.\n  */\n  target.allocCString =\n    (jstr, returnWithLength=false)=>__allocCStr(jstr, returnWithLength,\n                                                target.alloc, 'allocCString()');\n\n  /**\n     Starts an \"allocation scope.\" All allocations made using\n     scopedAlloc() are recorded in this scope and are freed when the\n     value returned from this function is passed to\n     scopedAllocPop().\n\n     This family of functions requires that the API's object have both\n     `alloc()` and `dealloc()` methods, else this function will throw.\n\n     Intended usage:\n\n     ```\n     const scope = scopedAllocPush();\n     try {\n       const ptr1 = scopedAlloc(100);\n       const ptr2 = scopedAlloc(200);\n       const ptr3 = scopedAlloc(300);\n       ...\n       // Note that only allocations made via scopedAlloc()\n       // are managed by this allocation scope.\n     }finally{\n       scopedAllocPop(scope);\n     }\n     ```\n\n     The value returned by this function must be treated as opaque by\n     the caller, suitable _only_ for passing to scopedAllocPop().\n     Its type and value are not part of this function's API and may\n     change in any given version of this code.\n\n     `scopedAlloc.level` can be used to determine how many scoped\n     alloc levels are currently active.\n   */\n  target.scopedAllocPush = function(){\n    __affirmAlloc(target, 'scopedAllocPush');\n    const a = [];\n    cache.scopedAlloc.push(a);\n    return a;\n  };\n\n  /**\n     Cleans up all allocations made using scopedAlloc() in the context\n     of the given opaque state object, which must be a value returned\n     by scopedAllocPush(). See that function for an example of how to\n     use this function.\n\n     Though scoped allocations are managed like a stack, this API\n     behaves properly if allocation scopes are popped in an order\n     other than the order they were pushed.\n\n     If called with no arguments, it pops the most recent\n     scopedAllocPush() result:\n\n     ```\n     scopedAllocPush();\n     try{ ... } finally { scopedAllocPop(); }\n     ```\n\n     It's generally recommended that it be passed an explicit argument\n     to help ensure that push/push are used in matching pairs, but in\n     trivial code that may be a non-issue.\n  */\n  target.scopedAllocPop = function(state){\n    __affirmAlloc(target, 'scopedAllocPop');\n    const n = arguments.length\n          ? cache.scopedAlloc.indexOf(state)\n          : cache.scopedAlloc.length-1;\n    if(n<0) toss(\"Invalid state object for scopedAllocPop().\");\n    if(0===arguments.length) state = cache.scopedAlloc[n];\n    cache.scopedAlloc.splice(n,1);\n    for(let p; (p = state.pop()); ){\n      if(target.functionEntry(p)){\n        //console.warn(\"scopedAllocPop() uninstalling transient function\",p);\n        target.uninstallFunction(p);\n      }\n      else target.dealloc(p);\n    }\n  };\n\n  /**\n     Allocates n bytes of memory using this.alloc() and records that\n     fact in the state for the most recent call of scopedAllocPush().\n     Ownership of the memory is given to scopedAllocPop(), which\n     will clean it up when it is called. The memory _must not_ be\n     passed to this.dealloc(). Throws if this API object is missing\n     the required `alloc()` or `dealloc()` functions or no scoped\n     alloc is active.\n\n     See scopedAllocPush() for an example of how to use this function.\n\n     The `level` property of this function can be queried to query how\n     many scoped allocation levels are currently active.\n\n     See also: scopedAllocPtr(), scopedAllocCString()\n  */\n  target.scopedAlloc = function(n){\n    if(!cache.scopedAlloc.length){\n      toss(\"No scopedAllocPush() scope is active.\");\n    }\n    const p = target.alloc(n);\n    cache.scopedAlloc[cache.scopedAlloc.length-1].push(p);\n    return p;\n  };\n\n  Object.defineProperty(target.scopedAlloc, 'level', {\n    configurable: false, enumerable: false,\n    get: ()=>cache.scopedAlloc.length,\n    set: ()=>toss(\"The 'active' property is read-only.\")\n  });\n\n  /**\n     Works identically to allocCString() except that it allocates the\n     memory using scopedAlloc().\n\n     Will throw if no scopedAllocPush() call is active.\n  */\n  target.scopedAllocCString =\n    (jstr, returnWithLength=false)=>__allocCStr(jstr, returnWithLength,\n                                                target.scopedAlloc, 'scopedAllocCString()');\n\n  // impl for allocMainArgv() and scopedAllocMainArgv().\n  const __allocMainArgv = function(isScoped, list){\n    const pList = target[\n      isScoped ? 'scopedAlloc' : 'alloc'\n    ]((list.length + 1) * target.ptrSizeof);\n    let i = 0;\n    list.forEach((e)=>{\n      target.pokePtr(pList + (target.ptrSizeof * i++),\n                         target[\n                           isScoped ? 'scopedAllocCString' : 'allocCString'\n                         ](\"\"+e));\n    });\n    target.pokePtr(pList + (target.ptrSizeof * i), 0);\n    return pList;\n  };\n\n  /**\n     Creates an array, using scopedAlloc(), suitable for passing to a\n     C-level main() routine. The input is a collection with a length\n     property and a forEach() method. A block of memory\n     (list.length+1) entries long is allocated and each pointer-sized\n     block of that memory is populated with a scopedAllocCString()\n     conversion of the (\"\"+value) of each element, with the exception\n     that the final entry is a NULL pointer. Returns a pointer to the\n     start of the list, suitable for passing as the 2nd argument to a\n     C-style main() function.\n\n     Throws if scopedAllocPush() is not active.\n\n     Design note: the returned array is allocated with an extra NULL\n     pointer entry to accommodate certain APIs, but client code which\n     does not need that functionality should treat the returned array\n     as list.length entries long.\n  */\n  target.scopedAllocMainArgv = (list)=>__allocMainArgv(true, list);\n\n  /**\n     Identical to scopedAllocMainArgv() but uses alloc() instead of\n     scopedAlloc().\n  */\n  target.allocMainArgv = (list)=>__allocMainArgv(false, list);\n\n  /**\n     Expects to be given a C-style string array and its length. It\n     returns a JS array of strings and/or nulls: any entry in the\n     pArgv array which is NULL results in a null entry in the result\n     array. If argc is 0 then an empty array is returned.\n\n     Results are undefined if any entry in the first argc entries of\n     pArgv are neither 0 (NULL) nor legal UTF-format C strings.\n\n     To be clear, the expected C-style arguments to be passed to this\n     function are `(int, char **)` (optionally const-qualified).\n  */\n  target.cArgvToJs = (argc, pArgv)=>{\n    const list = [];\n    for(let i = 0; i < argc; ++i){\n      const arg = target.peekPtr(pArgv + (target.ptrSizeof * i));\n      list.push( arg ? target.cstrToJs(arg) : null );\n    }\n    return list;\n  };\n\n  /**\n     Wraps function call func() in a scopedAllocPush() and\n     scopedAllocPop() block, such that all calls to scopedAlloc() and\n     friends from within that call will have their memory freed\n     automatically when func() returns. If func throws or propagates\n     an exception, the scope is still popped, otherwise it returns the\n     result of calling func().\n  */\n  target.scopedAllocCall = function(func){\n    target.scopedAllocPush();\n    try{ return func() } finally{ target.scopedAllocPop() }\n  };\n\n  /** Internal impl for allocPtr() and scopedAllocPtr(). */\n  const __allocPtr = function(howMany, safePtrSize, method){\n    __affirmAlloc(target, method);\n    const pIr = safePtrSize ? 'i64' : ptrIR;\n    let m = target[method](howMany * (safePtrSize ? 8 : ptrSizeof));\n    target.poke(m, 0, pIr)\n    if(1===howMany){\n      return m;\n    }\n    const a = [m];\n    for(let i = 1; i < howMany; ++i){\n      m += (safePtrSize ? 8 : ptrSizeof);\n      a[i] = m;\n      target.poke(m, 0, pIr);\n    }\n    return a;\n  };\n\n  /**\n     Allocates one or more pointers as a single chunk of memory and\n     zeroes them out.\n\n     The first argument is the number of pointers to allocate. The\n     second specifies whether they should use a \"safe\" pointer size (8\n     bytes) or whether they may use the default pointer size\n     (typically 4 but also possibly 8).\n\n     How the result is returned depends on its first argument: if\n     passed 1, it returns the allocated memory address. If passed more\n     than one then an array of pointer addresses is returned, which\n     can optionally be used with \"destructuring assignment\" like this:\n\n     ```\n     const [p1, p2, p3] = allocPtr(3);\n     ```\n\n     ACHTUNG: when freeing the memory, pass only the _first_ result\n     value to dealloc(). The others are part of the same memory chunk\n     and must not be freed separately.\n\n     The reason for the 2nd argument is..\n\n     When one of the returned pointers will refer to a 64-bit value,\n     e.g. a double or int64, an that value must be written or fetched,\n     e.g. using poke() or peek(), it is important that\n     the pointer in question be aligned to an 8-byte boundary or else\n     it will not be fetched or written properly and will corrupt or\n     read neighboring memory. It is only safe to pass false when the\n     client code is certain that it will only get/fetch 4-byte values\n     (or smaller).\n  */\n  target.allocPtr =\n    (howMany=1, safePtrSize=true)=>__allocPtr(howMany, safePtrSize, 'alloc');\n\n  /**\n     Identical to allocPtr() except that it allocates using scopedAlloc()\n     instead of alloc().\n  */\n  target.scopedAllocPtr =\n    (howMany=1, safePtrSize=true)=>__allocPtr(howMany, safePtrSize, 'scopedAlloc');\n\n  /**\n     If target.exports[name] exists, it is returned, else an\n     exception is thrown.\n  */\n  target.xGet = function(name){\n    return target.exports[name] || toss(\"Cannot find exported symbol:\",name);\n  };\n\n  const __argcMismatch =\n        (f,n)=>toss(f+\"() requires\",n,\"argument(s).\");\n\n  /**\n     Looks up a WASM-exported function named fname from\n     target.exports. If found, it is called, passed all remaining\n     arguments, and its return value is returned to xCall's caller. If\n     not found, an exception is thrown. This function does no\n     conversion of argument or return types, but see xWrap() and\n     xCallWrapped() for variants which do.\n\n     As a special case, if passed only 1 argument after the name and\n     that argument in an Array, that array's entries become the\n     function arguments. (This is not an ambiguous case because it's\n     not legal to pass an Array object to a WASM function.)\n  */\n  target.xCall = function(fname, ...args){\n    const f = target.xGet(fname);\n    if(!(f instanceof Function)) toss(\"Exported symbol\",fname,\"is not a function.\");\n    if(f.length!==args.length) __argcMismatch(fname,f.length)\n    /* This is arguably over-pedantic but we want to help clients keep\n       from shooting themselves in the foot when calling C APIs. */;\n    return (2===arguments.length && Array.isArray(arguments[1]))\n      ? f.apply(null, arguments[1])\n      : f.apply(null, args);\n  };\n\n  /**\n     State for use with xWrap()\n  */\n  cache.xWrap = Object.create(null);\n  cache.xWrap.convert = Object.create(null);\n  /** Map of type names to argument conversion functions. */\n  cache.xWrap.convert.arg = new Map;\n  /** Map of type names to return result conversion functions. */\n  cache.xWrap.convert.result = new Map;\n  const xArg = cache.xWrap.convert.arg, xResult = cache.xWrap.convert.result;\n\n  if(target.bigIntEnabled){\n    xArg.set('i64', (i)=>BigInt(i));\n  }\n  const __xArgPtr = 'i32' === ptrIR\n        ? ((i)=>(i | 0)) : ((i)=>(BigInt(i) | BigInt(0)));\n  xArg.set('i32', __xArgPtr )\n    .set('i16', (i)=>((i | 0) & 0xFFFF))\n    .set('i8', (i)=>((i | 0) & 0xFF))\n    .set('f32', (i)=>Number(i).valueOf())\n    .set('float', xArg.get('f32'))\n    .set('f64', xArg.get('f32'))\n    .set('double', xArg.get('f64'))\n    .set('int', xArg.get('i32'))\n    .set('null', (i)=>i)\n    .set(null, xArg.get('null'))\n    .set('**', __xArgPtr)\n    .set('*', __xArgPtr);\n  xResult.set('*', __xArgPtr)\n    .set('pointer', __xArgPtr)\n    .set('number', (v)=>Number(v))\n    .set('void', (v)=>undefined)\n    .set('null', (v)=>v)\n    .set(null, xResult.get('null'));\n\n  { /* Copy certain xArg[...] handlers to xResult[...] and\n       add pointer-style variants of them. */\n    const copyToResult = ['i8', 'i16', 'i32', 'int',\n                          'f32', 'float', 'f64', 'double'];\n    if(target.bigIntEnabled) copyToResult.push('i64');\n    const adaptPtr = xArg.get(ptrIR);\n    for(const t of copyToResult){\n      xArg.set(t+'*', adaptPtr);\n      xResult.set(t+'*', adaptPtr);\n      xResult.set(t, (xArg.get(t) || toss(\"Missing arg converter:\",t)));\n    }\n  }\n\n  /**\n     In order for args of type string to work in various contexts in\n     the sqlite3 API, we need to pass them on as, variably, a C-string\n     or a pointer value. Thus for ARGs of type 'string' and\n     '*'/'pointer' we behave differently depending on whether the\n     argument is a string or not:\n\n     - If v is a string, scopeAlloc() a new C-string from it and return\n       that temp string's pointer.\n\n     - Else return the value from the arg adapter defined for ptrIR.\n\n     TODO? Permit an Int8Array/Uint8Array and convert it to a string?\n     Would that be too much magic concentrated in one place, ready to\n     backfire? We handle that at the client level in sqlite3 with a\n     custom argument converter.\n  */\n  const __xArgString = function(v){\n    if('string'===typeof v) return target.scopedAllocCString(v);\n    return v ? __xArgPtr(v) : null;\n  };\n  xArg.set('string', __xArgString)\n    .set('utf8', __xArgString)\n    .set('pointer', __xArgString);\n  //xArg.set('*', __xArgString);\n\n  xResult.set('string', (i)=>target.cstrToJs(i))\n    .set('utf8', xResult.get('string'))\n    .set('string:dealloc', (i)=>{\n      try { return i ? target.cstrToJs(i) : null }\n      finally{ target.dealloc(i) }\n    })\n    .set('utf8:dealloc', xResult.get('string:dealloc'))\n    .set('json', (i)=>JSON.parse(target.cstrToJs(i)))\n    .set('json:dealloc', (i)=>{\n      try{ return i ? JSON.parse(target.cstrToJs(i)) : null }\n      finally{ target.dealloc(i) }\n    });\n\n  /**\n     Internal-use-only base class for FuncPtrAdapter and potentially\n     additional stateful argument adapter classes.\n\n     Note that its main interface (convertArg()) is strictly\n     internal, not to be exposed to client code, as it may still\n     need re-shaping. Only the constructors of concrete subclasses\n     should be exposed to clients, and those in such a way that\n     does not hinder internal redesign of the convertArg()\n     interface.\n  */\n  const AbstractArgAdapter = class {\n    constructor(opt){\n      this.name = opt.name || 'unnamed adapter';\n    }\n    /**\n       Gets called via xWrap() to \"convert\" v to whatever type\n       this specific class supports.\n\n       argIndex is the argv index of _this_ argument in the\n       being-xWrap()'d call. argv is the current argument list\n       undergoing xWrap() argument conversion. argv entries to the\n       left of argIndex will have already undergone transformation and\n       those to the right will not have (they will have the values the\n       client-level code passed in, awaiting conversion). The RHS\n       indexes must never be relied upon for anything because their\n       types are indeterminate, whereas the LHS values will be\n       WASM-compatible values by the time this is called.\n    */\n    convertArg(v,argv,argIndex){\n      toss(\"AbstractArgAdapter must be subclassed.\");\n    }\n  };\n\n  /**\n     An attempt at adding function pointer conversion support to\n     xWrap(). This type is recognized by xWrap() as a proxy for\n     converting a JS function to a C-side function, either\n     permanently, for the duration of a single call into the C layer,\n     or semi-contextual, where it may keep track of a single binding\n     for a given context and uninstall the binding if it's replaced.\n\n     The constructor requires an options object with these properties:\n\n     - name (optional): string describing the function binding. This\n       is solely for debugging and error-reporting purposes. If not\n       provided, an empty string is assumed.\n\n     - signature: a function signature string compatible with\n       jsFuncToWasm().\n\n     - bindScope (string): one of ('transient', 'context',\n       'singleton'). Bind scopes are:\n\n       - 'transient': it will convert JS functions to WASM only for\n         the duration of the xWrap()'d function call, using\n         scopedInstallFunction(). Before that call returns, the\n         WASM-side binding will be uninstalled.\n\n       - 'singleton': holds one function-pointer binding for this\n         instance. If it's called with a different function pointer,\n         it uninstalls the previous one after converting the new\n         value. This is only useful for use with \"global\" functions\n         which do not rely on any state other than this function\n         pointer. If the being-converted function pointer is intended\n         to be mapped to some sort of state object (e.g. an\n         `sqlite3*`) then \"context\" (see below) is the proper mode.\n\n       - 'context': similar to singleton mode but for a given\n         \"context\", where the context is a key provided by the user\n         and possibly dependent on a small amount of call-time\n         context. This mode is the default if bindScope is _not_ set\n         but a property named contextKey (described below) is.\n\n       - 'permanent': the function is installed and left there\n         forever. There is no way to recover its pointer address\n         later on.\n\n     - callProxy (function): if set, this must be a function which\n       will act as a proxy for any \"converted\" JS function. It is\n       passed the being-converted function value and must return\n       either that function or a function which acts on its\n       behalf. The returned function will be the one which gets\n       installed into the WASM function table. The proxy must perform\n       any required argument conversion (noting that it will be called\n       from C code, so will receive C-format arguments) before passing\n       them on to the being-converted function. Whether or not the\n       proxy itself must return a value depends on the context. If it\n       does, it must be a WASM-friendly value, as it will be returning\n       from a call made from native code.\n\n     - contextKey (function): is only used if bindScope is 'context'\n       or if bindScope is not set and this function is, in which case\n       'context' is assumed. This function gets bound to this object,\n       so its \"this\" is this object. It gets passed (argv,argIndex),\n       where argIndex is the index of _this_ function pointer in its\n       _wrapping_ function's arguments and argv is the _current_\n       still-being-xWrap()-processed args array. All arguments to the\n       left of argIndex will have been processed by xWrap() by the\n       time this is called. argv[argIndex] will be the value the user\n       passed in to the xWrap()'d function for the argument this\n       FuncPtrAdapter is mapped to. Arguments to the right of\n       argv[argIndex] will not yet have been converted before this is\n       called. The function must return a key which uniquely\n       identifies this function mapping context for _this_\n       FuncPtrAdapter instance (other instances are not considered),\n       taking into account that C functions often take some sort of\n       state object as one or more of their arguments. As an example,\n       if the xWrap()'d function takes `(int,T*,functionPtr,X*)` and\n       this FuncPtrAdapter is the argv[2]nd arg, contextKey(argv,2)\n       might return 'T@'+argv[1], or even just argv[1].  Note,\n       however, that the (X*) argument will not yet have been\n       processed by the time this is called and should not be used as\n       part of that key because its pre-conversion data type might be\n       unpredictable. Similarly, care must be taken with C-string-type\n       arguments: those to the left in argv will, when this is called,\n       be WASM pointers, whereas those to the right might (and likely\n       do) have another data type. When using C-strings in keys, never\n       use their pointers in the key because most C-strings in this\n       constellation are transient.\n\n     Yes, that ^^^ is quite awkward, but it's what we have.\n\n     The constructor only saves the above state for later, and does\n     not actually bind any functions. Its convertArg() method is\n     called via xWrap() to perform any bindings.\n\n     Shortcomings:\n\n     - These \"reverse\" bindings, i.e. calling into a JS-defined\n       function from a WASM-defined function (the generated proxy\n       wrapper), lack all type conversion support. That means, for\n       example, that...\n\n     - Function pointers which include C-string arguments may still\n       need a level of hand-written wrappers around them, depending on\n       how they're used, in order to provide the client with JS\n       strings. Alternately, clients will need to perform such conversions\n       on their own, e.g. using cstrtojs(). Or maybe we can find a way\n       to perform such conversions here, via addition of an xWrap()-style\n       function signature to the options argument.\n  */\n  xArg.FuncPtrAdapter = class FuncPtrAdapter extends AbstractArgAdapter {\n    constructor(opt) {\n      super(opt);\n      if(xArg.FuncPtrAdapter.warnOnUse){\n        console.warn('xArg.FuncPtrAdapter is an internal-only API',\n                     'and is not intended to be invoked from',\n                     'client-level code. Invoked with:',opt);\n      }\n      this.signature = opt.signature;\n      if(opt.contextKey instanceof Function){\n        this.contextKey = opt.contextKey;\n        if(!opt.bindScope) opt.bindScope = 'context';\n      }\n      this.bindScope = opt.bindScope\n        || toss(\"FuncPtrAdapter options requires a bindScope (explicit or implied).\");\n      if(FuncPtrAdapter.bindScopes.indexOf(opt.bindScope)<0){\n        toss(\"Invalid options.bindScope (\"+opt.bindMod+\") for FuncPtrAdapter. \"+\n             \"Expecting one of: (\"+FuncPtrAdapter.bindScopes.join(', ')+')');\n      }\n      this.isTransient = 'transient'===this.bindScope;\n      this.isContext = 'context'===this.bindScope;\n      this.isPermanent = 'permanent'===this.bindScope;\n      this.singleton = ('singleton'===this.bindScope) ? [] : undefined;\n      //console.warn(\"FuncPtrAdapter()\",opt,this);\n      this.callProxy = (opt.callProxy instanceof Function)\n        ? opt.callProxy : undefined;\n    }\n\n    /** If true, the constructor emits a warning. The intent is that\n        this be set to true after bootstrapping of the higher-level\n        client library is complete, to warn downstream clients that\n        they shouldn't be relying on this implemenation detail which\n        does not have a stable interface. */\n    static warnOnUse = false;\n\n    /** If true, convertArg() will FuncPtrAdapter.debugOut() when it\n        (un)installs a function binding to/from WASM. Note that\n        deinstallation of bindScope=transient bindings happens\n        via scopedAllocPop() so will not be output. */\n    static debugFuncInstall = false;\n\n    /** Function used for debug output. */\n    static debugOut = console.debug.bind(console);\n\n    static bindScopes = [\n      'transient', 'context', 'singleton', 'permanent'\n    ];\n\n    /* Dummy impl. Overwritten per-instance as needed. */\n    contextKey(argv,argIndex){\n      return this;\n    }\n\n    /* Returns this objects mapping for the given context key, in the\n       form of an an array, creating the mapping if needed. The key\n       may be anything suitable for use in a Map. */\n    contextMap(key){\n      const cm = (this.__cmap || (this.__cmap = new Map));\n      let rc = cm.get(key);\n      if(undefined===rc) cm.set(key, (rc = []));\n      return rc;\n    }\n\n    /**\n       Gets called via xWrap() to \"convert\" v to a WASM-bound function\n       pointer. If v is one of (a pointer, null, undefined) then\n       (v||0) is returned and any earlier function installed by this\n       mapping _might_, depending on how it's bound, be uninstalled.\n       If v is not one of those types, it must be a Function, for\n       which it creates (if needed) a WASM function binding and\n       returns the WASM pointer to that binding. If this instance is\n       not in 'transient' mode, it will remember the binding for at\n       least the next call, to avoid recreating the function binding\n       unnecessarily.\n\n       If it's passed a pointer(ish) value for v, it does _not_\n       perform any function binding, so this object's bindMode is\n       irrelevant for such cases.\n\n       See the parent class's convertArg() docs for details on what\n       exactly the 2nd and 3rd arguments are.\n    */\n    convertArg(v,argv,argIndex){\n      //FuncPtrAdapter.debugOut(\"FuncPtrAdapter.convertArg()\",this.signature,this.transient,v);\n      let pair = this.singleton;\n      if(!pair && this.isContext){\n        pair = this.contextMap(this.contextKey(argv,argIndex));\n      }\n      if(pair && pair[0]===v) return pair[1];\n      if(v instanceof Function){\n        /* Install a WASM binding and return its pointer. */\n        if(this.callProxy) v = this.callProxy(v);\n        const fp = __installFunction(v, this.signature, this.isTransient);\n        if(FuncPtrAdapter.debugFuncInstall){\n          FuncPtrAdapter.debugOut(\"FuncPtrAdapter installed\", this,\n                                  this.contextKey(argv,argIndex), '@'+fp, v);\n        }\n        if(pair){\n          /* Replace existing stashed mapping */\n          if(pair[1]){\n            if(FuncPtrAdapter.debugFuncInstall){\n              FuncPtrAdapter.debugOut(\"FuncPtrAdapter uninstalling\", this,\n                                      this.contextKey(argv,argIndex), '@'+pair[1], v);\n            }\n            try{target.uninstallFunction(pair[1])}\n            catch(e){/*ignored*/}\n          }\n          pair[0] = v;\n          pair[1] = fp;\n        }\n        return fp;\n      }else if(target.isPtr(v) || null===v || undefined===v){\n        if(pair && pair[1] && pair[1]!==v){\n          /* uninstall stashed mapping and replace stashed mapping with v. */\n          if(FuncPtrAdapter.debugFuncInstall){\n            FuncPtrAdapter.debugOut(\"FuncPtrAdapter uninstalling\", this,\n                                    this.contextKey(argv,argIndex), '@'+pair[1], v);\n          }\n          try{target.uninstallFunction(pair[1])}\n          catch(e){/*ignored*/}\n          pair[0] = pair[1] = (v | 0);\n        }\n        return v || 0;\n      }else{\n        throw new TypeError(\"Invalid FuncPtrAdapter argument type. \"+\n                            \"Expecting a function pointer or a \"+\n                            (this.name ? this.name+' ' : '')+\n                            \"function matching signature \"+\n                            this.signature+\".\");\n      }\n    }/*convertArg()*/\n  }/*FuncPtrAdapter*/;\n\n  const __xArgAdapterCheck =\n        (t)=>xArg.get(t) || toss(\"Argument adapter not found:\",t);\n\n  const __xResultAdapterCheck =\n        (t)=>xResult.get(t) || toss(\"Result adapter not found:\",t);\n\n  cache.xWrap.convertArg = (t,...args)=>__xArgAdapterCheck(t)(...args);\n  cache.xWrap.convertArgNoCheck = (t,...args)=>xArg.get(t)(...args);\n\n  cache.xWrap.convertResult =\n    (t,v)=>(null===t ? v : (t ? __xResultAdapterCheck(t)(v) : undefined));\n  cache.xWrap.convertResultNoCheck =\n    (t,v)=>(null===t ? v : (t ? xResult.get(t)(v) : undefined));\n\n  /**\n     Creates a wrapper for another function which converts the arguments\n     of the wrapper to argument types accepted by the wrapped function,\n     then converts the wrapped function's result to another form\n     for the wrapper.\n\n     The first argument must be one of:\n\n     - A JavaScript function.\n     - The name of a WASM-exported function. In the latter case xGet()\n       is used to fetch the exported function, which throws if it's not\n       found.\n     - A pointer into the indirect function table. e.g. a pointer\n       returned from target.installFunction().\n\n     It returns either the passed-in function or a wrapper for that\n     function which converts the JS-side argument types into WASM-side\n     types and converts the result type.\n\n     The second argument, `resultType`, describes the conversion for\n     the wrapped functions result. A literal `null` or the string\n     `'null'` both mean to return the original function's value as-is\n     (mnemonic: there is \"null\" conversion going on). Literal\n     `undefined` or the string `\"void\"` both mean to ignore the\n     function's result and return `undefined`. Aside from those two\n     special cases, the `resultType` value may be one of the values\n     described below or any mapping installed by the client using\n     xWrap.resultAdapter().\n\n     If passed 3 arguments and the final one is an array, that array\n     must contain a list of type names (see below) for adapting the\n     arguments from JS to WASM.  If passed 2 arguments, more than 3,\n     or the 3rd is not an array, all arguments after the 2nd (if any)\n     are treated as type names. i.e.:\n\n     ```\n     xWrap('funcname', 'i32', 'string', 'f64');\n     // is equivalent to:\n     xWrap('funcname', 'i32', ['string', 'f64']);\n     ```\n\n     This function enforces that the given list of arguments has the\n     same arity as the being-wrapped function (as defined by its\n     `length` property) and it will throw if that is not the case.\n     Similarly, the created wrapper will throw if passed a differing\n     argument count.\n\n     Type names are symbolic names which map the arguments to an\n     adapter function to convert, if needed, the value before passing\n     it on to WASM or to convert a return result from WASM. The list\n     of built-in names:\n\n     - `i8`, `i16`, `i32` (args and results): all integer conversions\n       which convert their argument to an integer and truncate it to\n       the given bit length.\n\n     - `N*` (args): a type name in the form `N*`, where N is a numeric\n       type name, is treated the same as WASM pointer.\n\n     - `*` and `pointer` (args): are assumed to be WASM pointer values\n       and are returned coerced to an appropriately-sized pointer\n       value (i32 or i64). Non-numeric values will coerce to 0 and\n       out-of-range values will have undefined results (just as with\n       any pointer misuse).\n\n     - `*` and `pointer` (results): aliases for the current\n       WASM pointer numeric type.\n\n     - `**` (args): is simply a descriptive alias for the WASM pointer\n       type. It's primarily intended to mark output-pointer arguments.\n\n     - `i64` (args and results): passes the value to BigInt() to\n       convert it to an int64. Only available if bigIntEnabled is\n       true.\n\n     - `f32` (`float`), `f64` (`double`) (args and results): pass\n       their argument to Number(). i.e. the adapter does not currently\n       distinguish between the two types of floating-point numbers.\n\n     - `number` (results): converts the result to a JS Number using\n       Number(theValue).valueOf(). Note that this is for result\n       conversions only, as it's not possible to generically know\n       which type of number to convert arguments to.\n\n     Non-numeric conversions include:\n\n     - `null` literal or `\"null\"` string (args and results): perform\n       no translation and pass the arg on as-is. This is primarily\n       useful for results but may have a use or two for arguments.\n\n     - `string` or `utf8` (args): has two different semantics in order\n       to accommodate various uses of certain C APIs\n       (e.g. output-style strings)...\n\n       - If the arg is a string, it creates a _temporary_\n         UTF-8-encoded C-string to pass to the exported function,\n         cleaning it up before the wrapper returns. If a long-lived\n         C-string pointer is required, that requires client-side code\n         to create the string, then pass its pointer to the function.\n\n       - Else the arg is assumed to be a pointer to a string the\n         client has already allocated and it's passed on as\n         a WASM pointer.\n\n     - `string` or `utf8` (results): treats the result value as a\n       const C-string, encoded as UTF-8, copies it to a JS string,\n       and returns that JS string.\n\n     - `string:dealloc` or `utf8:dealloc) (results): treats the result value\n       as a non-const UTF-8 C-string, ownership of which has just been\n       transfered to the caller. It copies the C-string to a JS\n       string, frees the C-string, and returns the JS string. If such\n       a result value is NULL, the JS result is `null`. Achtung: when\n       using an API which returns results from a specific allocator,\n       e.g. `my_malloc()`, this conversion _is not legal_. Instead, an\n       equivalent conversion which uses the appropriate deallocator is\n       required. For example:\n\n```js\n   target.xWrap.resultAdapter('string:my_free',(i)=>{\n      try { return i ? target.cstrToJs(i) : null }\n      finally{ target.exports.my_free(i) }\n   };\n```\n\n     - `json` (results): treats the result as a const C-string and\n       returns the result of passing the converted-to-JS string to\n       JSON.parse(). Returns `null` if the C-string is a NULL pointer.\n\n     - `json:dealloc` (results): works exactly like `string:dealloc` but\n       returns the same thing as the `json` adapter. Note the\n       warning in `string:dealloc` regarding maching allocators and\n       deallocators.\n\n     The type names for results and arguments are validated when\n     xWrap() is called and any unknown names will trigger an\n     exception.\n\n     Clients may map their own result and argument adapters using\n     xWrap.resultAdapter() and xWrap.argAdapter(), noting that not all\n     type conversions are valid for both arguments _and_ result types\n     as they often have different memory ownership requirements.\n\n     Design note: the ability to pass in a JS function as the first\n     argument is of relatively limited use, primarily for testing\n     argument and result converters. JS functions, by and large, will\n     not want to deal with C-type arguments.\n\n     TODOs:\n\n     - Figure out how/whether we can (semi-)transparently handle\n       pointer-type _output_ arguments. Those currently require\n       explicit handling by allocating pointers, assigning them before\n       the call using poke(), and fetching them with\n       peek() after the call. We may be able to automate some\n       or all of that.\n\n     - Figure out whether it makes sense to extend the arg adapter\n       interface such that each arg adapter gets an array containing\n       the results of the previous arguments in the current call. That\n       might allow some interesting type-conversion feature. Use case:\n       handling of the final argument to sqlite3_prepare_v2() depends\n       on the type (pointer vs JS string) of its 2nd\n       argument. Currently that distinction requires hand-writing a\n       wrapper for that function. That case is unusual enough that\n       abstracting it into this API (and taking on the associated\n       costs) may well not make good sense.\n  */\n  target.xWrap = function(fArg, resultType, ...argTypes){\n    if(3===arguments.length && Array.isArray(arguments[2])){\n      argTypes = arguments[2];\n    }\n    if(target.isPtr(fArg)){\n      fArg = target.functionEntry(fArg)\n        || toss(\"Function pointer not found in WASM function table.\");\n    }\n    const fIsFunc = (fArg instanceof Function);\n    const xf = fIsFunc ? fArg : target.xGet(fArg);\n    if(fIsFunc) fArg = xf.name || 'unnamed function';\n    if(argTypes.length!==xf.length) __argcMismatch(fArg, xf.length);\n    if((null===resultType) && 0===xf.length){\n      /* Func taking no args with an as-is return. We don't need a wrapper.\n         We forego the argc check here, though. */\n      return xf;\n    }\n    /*Verify the arg type conversions are valid...*/;\n    if(undefined!==resultType && null!==resultType) __xResultAdapterCheck(resultType);\n    for(const t of argTypes){\n      if(t instanceof AbstractArgAdapter) xArg.set(t, (...args)=>t.convertArg(...args));\n      else __xArgAdapterCheck(t);\n    }\n    const cxw = cache.xWrap;\n    if(0===xf.length){\n      // No args to convert, so we can create a simpler wrapper...\n      return (...args)=>(args.length\n                         ? __argcMismatch(fArg, xf.length)\n                         : cxw.convertResult(resultType, xf.call(null)));\n    }\n    return function(...args){\n      if(args.length!==xf.length) __argcMismatch(fArg, xf.length);\n      const scope = target.scopedAllocPush();\n      try{\n        /*\n          Maintenance reminder re. arguments passed to convertArg():\n          The public interface of argument adapters is that they take\n          ONE argument and return a (possibly) converted result for\n          it. The passing-on of arguments after the first is an\n          internal implementation detail for the sake of\n          AbstractArgAdapter, and not to be relied on or documented\n          for other cases. The fact that this is how\n          AbstractArgAdapter.convertArgs() gets its 2nd+ arguments,\n          and how FuncPtrAdapter.contextKey() gets its args, is also\n          an implementation detail and subject to change. i.e. the\n          public interface of 1 argument is stable.  The fact that any\n          arguments may be passed in after that one, and what those\n          arguments are, is _not_ part of the public interface and is\n          _not_ stable.\n        */\n        for(const i in args) args[i] = cxw.convertArgNoCheck(\n          argTypes[i], args[i], args, i\n        );\n        return cxw.convertResultNoCheck(resultType, xf.apply(null,args));\n      }finally{\n        target.scopedAllocPop(scope);\n      }\n    };\n  }/*xWrap()*/;\n\n  /** Internal impl for xWrap.resultAdapter() and argAdapter(). */\n  const __xAdapter = function(func, argc, typeName, adapter, modeName, xcvPart){\n    if('string'===typeof typeName){\n      if(1===argc) return xcvPart.get(typeName);\n      else if(2===argc){\n        if(!adapter){\n          delete xcvPart.get(typeName);\n          return func;\n        }else if(!(adapter instanceof Function)){\n          toss(modeName,\"requires a function argument.\");\n        }\n        xcvPart.set(typeName, adapter);\n        return func;\n      }\n    }\n    toss(\"Invalid arguments to\",modeName);\n  };\n\n  /**\n     Gets, sets, or removes a result value adapter for use with\n     xWrap(). If passed only 1 argument, the adapter function for the\n     given type name is returned.  If the second argument is explicit\n     falsy (as opposed to defaulted), the adapter named by the first\n     argument is removed. If the 2nd argument is not falsy, it must be\n     a function which takes one value and returns a value appropriate\n     for the given type name. The adapter may throw if its argument is\n     not of a type it can work with. This function throws for invalid\n     arguments.\n\n     Example:\n\n     ```\n     xWrap.resultAdapter('twice',(v)=>v+v);\n     ```\n\n     xWrap.resultAdapter() MUST NOT use the scopedAlloc() family of\n     APIs to allocate a result value. xWrap()-generated wrappers run\n     in the context of scopedAllocPush() so that argument adapters can\n     easily convert, e.g., to C-strings, and have them cleaned up\n     automatically before the wrapper returns to the caller. Likewise,\n     if a _result_ adapter uses scoped allocation, the result will be\n     freed before because they would be freed before the wrapper\n     returns, leading to chaos and undefined behavior.\n\n     Except when called as a getter, this function returns itself.\n  */\n  target.xWrap.resultAdapter = function f(typeName, adapter){\n    return __xAdapter(f, arguments.length, typeName, adapter,\n                      'resultAdapter()', xResult);\n  };\n\n  /**\n     Functions identically to xWrap.resultAdapter() but applies to\n     call argument conversions instead of result value conversions.\n\n     xWrap()-generated wrappers perform argument conversion in the\n     context of a scopedAllocPush(), so any memory allocation\n     performed by argument adapters really, really, really should be\n     made using the scopedAlloc() family of functions unless\n     specifically necessary. For example:\n\n     ```\n     xWrap.argAdapter('my-string', function(v){\n       return ('string'===typeof v)\n         ? myWasmObj.scopedAllocCString(v) : null;\n     };\n     ```\n\n     Contrariwise, xWrap.resultAdapter() must _not_ use scopedAlloc()\n     to allocate its results because they would be freed before the\n     xWrap()-created wrapper returns.\n\n     Note that it is perfectly legitimate to use these adapters to\n     perform argument validation, as opposed (or in addition) to\n     conversion.\n  */\n  target.xWrap.argAdapter = function f(typeName, adapter){\n    return __xAdapter(f, arguments.length, typeName, adapter,\n                      'argAdapter()', xArg);\n  };\n\n  target.xWrap.FuncPtrAdapter = xArg.FuncPtrAdapter;\n\n  /**\n     Functions like xCall() but performs argument and result type\n     conversions as for xWrap(). The first, second, and third\n     arguments are as documented for xWrap(), except that the 3rd\n     argument may be either a falsy value or empty array to represent\n     nullary functions. The 4th+ arguments are arguments for the call,\n     with the special case that if the 4th argument is an array, it is\n     used as the arguments for the call. Returns the converted result\n     of the call.\n\n     This is just a thin wrapper around xWrap(). If the given function\n     is to be called more than once, it's more efficient to use\n     xWrap() to create a wrapper, then to call that wrapper as many\n     times as needed. For one-shot calls, however, this variant is\n     arguably more efficient because it will hypothetically free the\n     wrapper function quickly.\n  */\n  target.xCallWrapped = function(fArg, resultType, argTypes, ...args){\n    if(Array.isArray(arguments[3])) args = arguments[3];\n    return target.xWrap(fArg, resultType, argTypes||[]).apply(null, args||[]);\n  };\n\n  /**\n     This function is ONLY exposed in the public API to facilitate\n     testing. It should not be used in application-level code, only\n     in test code.\n\n     Expects to be given (typeName, value) and returns a conversion\n     of that value as has been registered using argAdapter().\n     It throws if no adapter is found.\n\n     ACHTUNG: the adapter may require that a scopedAllocPush() is\n     active and it may allocate memory within that scope. It may also\n     require additional arguments, depending on the type of\n     conversion.\n  */\n  target.xWrap.testConvertArg = cache.xWrap.convertArg;\n\n  /**\n     This function is ONLY exposed in the public API to facilitate\n     testing. It should not be used in application-level code, only\n     in test code.\n\n     Expects to be given (typeName, value) and returns a conversion\n     of that value as has been registered using resultAdapter().\n     It throws if no adapter is found.\n\n     ACHTUNG: the adapter may allocate memory which the caller may need\n     to know how to free.\n  */\n  target.xWrap.testConvertResult = cache.xWrap.convertResult;\n\n  return target;\n};\n\n/**\n   yawl (Yet Another Wasm Loader) provides very basic wasm loader.\n   It requires a config object:\n\n   - `uri`: required URI of the WASM file to load.\n\n   - `onload(loadResult,config)`: optional callback. The first\n     argument is the result object from\n     WebAssembly.instantiate[Streaming](). The 2nd is the config\n     object passed to this function. Described in more detail below.\n\n   - `imports`: optional imports object for\n     WebAssembly.instantiate[Streaming](). The default is an empty set\n     of imports. If the module requires any imports, this object\n     must include them.\n\n   - `wasmUtilTarget`: optional object suitable for passing to\n     WhWasmUtilInstaller(). If set, it gets passed to that function\n     after the promise resolves. This function sets several properties\n     on it before passing it on to that function (which sets many\n     more):\n\n     - `module`, `instance`: the properties from the\n       instantiate[Streaming]() result.\n\n     - If `instance.exports.memory` is _not_ set then it requires that\n       `config.imports.env.memory` be set (else it throws), and\n       assigns that to `target.memory`.\n\n     - If `wasmUtilTarget.alloc` is not set and\n       `instance.exports.malloc` is, it installs\n       `wasmUtilTarget.alloc()` and `wasmUtilTarget.dealloc()`\n       wrappers for the exports `malloc` and `free` functions.\n\n   It returns a function which, when called, initiates loading of the\n   module and returns a Promise. When that Promise resolves, it calls\n   the `config.onload` callback (if set) and passes it\n   `(loadResult,config)`, where `loadResult` is the result of\n   WebAssembly.instantiate[Streaming](): an object in the form:\n\n   ```\n   {\n     module: a WebAssembly.Module,\n     instance: a WebAssembly.Instance\n   }\n   ```\n\n   (Note that the initial `then()` attached to the promise gets only\n   that object, and not the `config` one.)\n\n   Error handling is up to the caller, who may attach a `catch()` call\n   to the promise.\n*/\nglobalThis.WhWasmUtilInstaller.yawl = function(config){\n  const wfetch = ()=>fetch(config.uri, {credentials: 'same-origin'});\n  const wui = this;\n  const finalThen = function(arg){\n    //log(\"finalThen()\",arg);\n    if(config.wasmUtilTarget){\n      const toss = (...args)=>{throw new Error(args.join(' '))};\n      const tgt = config.wasmUtilTarget;\n      tgt.module = arg.module;\n      tgt.instance = arg.instance;\n      //tgt.exports = tgt.instance.exports;\n      if(!tgt.instance.exports.memory){\n        /**\n           WhWasmUtilInstaller requires either tgt.exports.memory\n           (exported from WASM) or tgt.memory (JS-provided memory\n           imported into WASM).\n        */\n        tgt.memory = (config.imports && config.imports.env\n                      && config.imports.env.memory)\n          || toss(\"Missing 'memory' object!\");\n      }\n      if(!tgt.alloc && arg.instance.exports.malloc){\n        const exports = arg.instance.exports;\n        tgt.alloc = function(n){\n          return exports.malloc(n) || toss(\"Allocation of\",n,\"bytes failed.\");\n        };\n        tgt.dealloc = function(m){exports.free(m)};\n      }\n      wui(tgt);\n    }\n    if(config.onload) config.onload(arg,config);\n    return arg /* for any then() handler attached to\n                  yetAnotherWasmLoader()'s return value */;\n  };\n  const loadWasm = WebAssembly.instantiateStreaming\n        ? function loadWasmStreaming(){\n          return WebAssembly.instantiateStreaming(wfetch(), config.imports||{})\n            .then(finalThen);\n        }\n        : function loadWasmOldSchool(){ // Safari < v15\n          return wfetch()\n            .then(response => response.arrayBuffer())\n            .then(bytes => WebAssembly.instantiate(bytes, config.imports||{}))\n            .then(finalThen);\n        };\n  return loadWasm;\n}.bind(globalThis.WhWasmUtilInstaller)/*yawl()*/;\n/* END FILE: common/whwasmutil.js */\n/* BEGIN FILE: jaccwabyt/jaccwabyt.js */\n/**\n  2022-06-30\n\n  The author disclaims copyright to this source code.  In place of a\n  legal notice, here is a blessing:\n\n  *   May you do good and not evil.\n  *   May you find forgiveness for yourself and forgive others.\n  *   May you share freely, never taking more than you give.\n\n  ***********************************************************************\n\n  The Jaccwabyt API is documented in detail in an external file,\n  _possibly_ called jaccwabyt.md in the same directory as this file.\n\n  Project homes:\n  - https://fossil.wanderinghorse.net/r/jaccwabyt\n  - https://sqlite.org/src/dir/ext/wasm/jaccwabyt\n\n*/\n'use strict';\nglobalThis.Jaccwabyt = function StructBinderFactory(config){\n/* ^^^^ it is recommended that clients move that object into wherever\n   they'd like to have it and delete the self-held copy (\"self\" being\n   the global window or worker object).  This API does not require the\n   global reference - it is simply installed as a convenience for\n   connecting these bits to other co-developed code before it gets\n   removed from the global namespace.\n*/\n\n  /** Throws a new Error, the message of which is the concatenation\n      all args with a space between each. */\n  const toss = (...args)=>{throw new Error(args.join(' '))};\n\n  /**\n     Implementing function bindings revealed significant\n     shortcomings in Emscripten's addFunction()/removeFunction()\n     interfaces:\n\n     https://github.com/emscripten-core/emscripten/issues/17323\n\n     Until those are resolved, or a suitable replacement can be\n     implemented, our function-binding API will be more limited\n     and/or clumsier to use than initially hoped.\n  */\n  if(!(config.heap instanceof WebAssembly.Memory)\n     && !(config.heap instanceof Function)){\n    toss(\"config.heap must be WebAssembly.Memory instance or a function.\");\n  }\n  ['alloc','dealloc'].forEach(function(k){\n    (config[k] instanceof Function) ||\n      toss(\"Config option '\"+k+\"' must be a function.\");\n  });\n  const SBF = StructBinderFactory;\n  const heap = (config.heap instanceof Function)\n        ? config.heap : (()=>new Uint8Array(config.heap.buffer)),\n        alloc = config.alloc,\n        dealloc = config.dealloc,\n        log = config.log || console.log.bind(console),\n        memberPrefix = (config.memberPrefix || \"\"),\n        memberSuffix = (config.memberSuffix || \"\"),\n        bigIntEnabled = (undefined===config.bigIntEnabled\n                         ? !!self['BigInt64Array'] : !!config.bigIntEnabled),\n        BigInt = self['BigInt'],\n        BigInt64Array = self['BigInt64Array'],\n        /* Undocumented (on purpose) config options: */\n        ptrSizeof = config.ptrSizeof || 4,\n        ptrIR = config.ptrIR || 'i32'\n  ;\n\n  if(!SBF.debugFlags){\n    SBF.__makeDebugFlags = function(deriveFrom=null){\n      /* This is disgustingly overengineered. :/ */\n      if(deriveFrom && deriveFrom.__flags) deriveFrom = deriveFrom.__flags;\n      const f = function f(flags){\n        if(0===arguments.length){\n          return f.__flags;\n        }\n        if(flags<0){\n          delete f.__flags.getter; delete f.__flags.setter;\n          delete f.__flags.alloc; delete f.__flags.dealloc;\n        }else{\n          f.__flags.getter  = 0!==(0x01 & flags);\n          f.__flags.setter  = 0!==(0x02 & flags);\n          f.__flags.alloc   = 0!==(0x04 & flags);\n          f.__flags.dealloc = 0!==(0x08 & flags);\n        }\n        return f._flags;\n      };\n      Object.defineProperty(f,'__flags', {\n        iterable: false, writable: false,\n        value: Object.create(deriveFrom)\n      });\n      if(!deriveFrom) f(0);\n      return f;\n    };\n    SBF.debugFlags = SBF.__makeDebugFlags();\n  }/*static init*/\n\n  const isLittleEndian = (function() {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n  })();\n  /**\n     Some terms used in the internal docs:\n\n     StructType: a struct-wrapping class generated by this\n     framework.\n     DEF: struct description object.\n     SIG: struct member signature string.\n  */\n\n  /** True if SIG s looks like a function signature, else\n      false. */\n  const isFuncSig = (s)=>'('===s[1];\n  /** True if SIG s is-a pointer signature. */\n  const isPtrSig = (s)=>'p'===s || 'P'===s;\n  const isAutoPtrSig = (s)=>'P'===s /*EXPERIMENTAL*/;\n  const sigLetter = (s)=>isFuncSig(s) ? 'p' : s[0];\n  /** Returns the WASM IR form of the Emscripten-conventional letter\n      at SIG s[0]. Throws for an unknown SIG. */\n  const sigIR = function(s){\n    switch(sigLetter(s)){\n        case 'c': case 'C': return 'i8';\n        case 'i': return 'i32';\n        case 'p': case 'P': case 's': return ptrIR;\n        case 'j': return 'i64';\n        case 'f': return 'float';\n        case 'd': return 'double';\n    }\n    toss(\"Unhandled signature IR:\",s);\n  };\n\n  const affirmBigIntArray = BigInt64Array\n        ? ()=>true : ()=>toss('BigInt64Array is not available.');\n  /** Returns the name of a DataView getter method corresponding\n      to the given SIG. */\n  const sigDVGetter = function(s){\n    switch(sigLetter(s)) {\n        case 'p': case 'P': case 's': {\n          switch(ptrSizeof){\n              case 4: return 'getInt32';\n              case 8: return affirmBigIntArray() && 'getBigInt64';\n          }\n          break;\n        }\n        case 'i': return 'getInt32';\n        case 'c': return 'getInt8';\n        case 'C': return 'getUint8';\n        case 'j': return affirmBigIntArray() && 'getBigInt64';\n        case 'f': return 'getFloat32';\n        case 'd': return 'getFloat64';\n    }\n    toss(\"Unhandled DataView getter for signature:\",s);\n  };\n  /** Returns the name of a DataView setter method corresponding\n      to the given SIG. */\n  const sigDVSetter = function(s){\n    switch(sigLetter(s)){\n        case 'p': case 'P': case 's': {\n          switch(ptrSizeof){\n              case 4: return 'setInt32';\n              case 8: return affirmBigIntArray() && 'setBigInt64';\n          }\n          break;\n        }\n        case 'i': return 'setInt32';\n        case 'c': return 'setInt8';\n        case 'C': return 'setUint8';\n        case 'j': return affirmBigIntArray() && 'setBigInt64';\n        case 'f': return 'setFloat32';\n        case 'd': return 'setFloat64';\n    }\n    toss(\"Unhandled DataView setter for signature:\",s);\n  };\n  /**\n     Returns either Number of BigInt, depending on the given\n     SIG. This constructor is used in property setters to coerce\n     the being-set value to the correct size.\n  */\n  const sigDVSetWrapper = function(s){\n    switch(sigLetter(s)) {\n        case 'i': case 'f': case 'c': case 'C': case 'd': return Number;\n        case 'j': return affirmBigIntArray() && BigInt;\n        case 'p': case 'P': case 's':\n          switch(ptrSizeof){\n              case 4: return Number;\n              case 8: return affirmBigIntArray() && BigInt;\n          }\n          break;\n    }\n    toss(\"Unhandled DataView set wrapper for signature:\",s);\n  };\n\n  /** Returns the given struct and member name in a form suitable for\n      debugging and error output. */\n  const sPropName = (s,k)=>s+'::'+k;\n\n  const __propThrowOnSet = function(structName,propName){\n    return ()=>toss(sPropName(structName,propName),\"is read-only.\");\n  };\n\n  /**\n     In order to completely hide StructBinder-bound struct\n     pointers from JS code, we store them in a scope-local\n     WeakMap which maps the struct-bound objects to their WASM\n     pointers. The pointers are accessible via\n     boundObject.pointer, which is gated behind an accessor\n     function, but are not exposed anywhere else in the\n     object. The main intention of that is to make it impossible\n     for stale copies to be made.\n  */\n  const __instancePointerMap = new WeakMap();\n\n  /** Property name for the pointer-is-external marker. */\n  const xPtrPropName = '(pointer-is-external)';\n\n  /** Frees the obj.pointer memory and clears the pointer\n      property. */\n  const __freeStruct = function(ctor, obj, m){\n    if(!m) m = __instancePointerMap.get(obj);\n    if(m) {\n      __instancePointerMap.delete(obj);\n      if(Array.isArray(obj.ondispose)){\n        let x;\n        while((x = obj.ondispose.shift())){\n          try{\n            if(x instanceof Function) x.call(obj);\n            else if(x instanceof StructType) x.dispose();\n            else if('number' === typeof x) dealloc(x);\n            // else ignore. Strings are permitted to annotate entries\n            // to assist in debugging.\n          }catch(e){\n            console.warn(\"ondispose() for\",ctor.structName,'@',\n                         m,'threw. NOT propagating it.',e);\n          }\n        }\n      }else if(obj.ondispose instanceof Function){\n        try{obj.ondispose()}\n        catch(e){\n          /*do not rethrow: destructors must not throw*/\n          console.warn(\"ondispose() for\",ctor.structName,'@',\n                       m,'threw. NOT propagating it.',e);\n        }\n      }\n      delete obj.ondispose;\n      if(ctor.debugFlags.__flags.dealloc){\n        log(\"debug.dealloc:\",(obj[xPtrPropName]?\"EXTERNAL\":\"\"),\n            ctor.structName,\"instance:\",\n            ctor.structInfo.sizeof,\"bytes @\"+m);\n      }\n      if(!obj[xPtrPropName]) dealloc(m);\n    }\n  };\n\n  /** Returns a skeleton for a read-only property accessor wrapping\n      value v. */\n  const rop = (v)=>{return {configurable: false, writable: false,\n                            iterable: false, value: v}};\n\n  /** Allocates obj's memory buffer based on the size defined in\n      ctor.structInfo.sizeof. */\n  const __allocStruct = function(ctor, obj, m){\n    let fill = !m;\n    if(m) Object.defineProperty(obj, xPtrPropName, rop(m));\n    else{\n      m = alloc(ctor.structInfo.sizeof);\n      if(!m) toss(\"Allocation of\",ctor.structName,\"structure failed.\");\n    }\n    try {\n      if(ctor.debugFlags.__flags.alloc){\n        log(\"debug.alloc:\",(fill?\"\":\"EXTERNAL\"),\n            ctor.structName,\"instance:\",\n            ctor.structInfo.sizeof,\"bytes @\"+m);\n      }\n      if(fill) heap().fill(0, m, m + ctor.structInfo.sizeof);\n      __instancePointerMap.set(obj, m);\n    }catch(e){\n      __freeStruct(ctor, obj, m);\n      throw e;\n    }\n  };\n  /** Gets installed as the memoryDump() method of all structs. */\n  const __memoryDump = function(){\n    const p = this.pointer;\n    return p\n      ? new Uint8Array(heap().slice(p, p+this.structInfo.sizeof))\n      : null;\n  };\n\n  const __memberKey = (k)=>memberPrefix + k + memberSuffix;\n  const __memberKeyProp = rop(__memberKey);\n\n  /**\n     Looks up a struct member in structInfo.members. Throws if found\n     if tossIfNotFound is true, else returns undefined if not\n     found. The given name may be either the name of the\n     structInfo.members key (faster) or the key as modified by the\n     memberPrefix and memberSuffix settings.\n  */\n  const __lookupMember = function(structInfo, memberName, tossIfNotFound=true){\n    let m = structInfo.members[memberName];\n    if(!m && (memberPrefix || memberSuffix)){\n      // Check for a match on members[X].key\n      for(const v of Object.values(structInfo.members)){\n        if(v.key===memberName){ m = v; break; }\n      }\n      if(!m && tossIfNotFound){\n        toss(sPropName(structInfo.name,memberName),'is not a mapped struct member.');\n      }\n    }\n    return m;\n  };\n\n  /**\n     Uses __lookupMember(obj.structInfo,memberName) to find a member,\n     throwing if not found. Returns its signature, either in this\n     framework's native format or in Emscripten format.\n  */\n  const __memberSignature = function f(obj,memberName,emscriptenFormat=false){\n    if(!f._) f._ = (x)=>x.replace(/[^vipPsjrdcC]/g,\"\").replace(/[pPscC]/g,'i');\n    const m = __lookupMember(obj.structInfo, memberName, true);\n    return emscriptenFormat ? f._(m.signature) : m.signature;\n  };\n\n  const __ptrPropDescriptor = {\n    configurable: false, enumerable: false,\n    get: function(){return __instancePointerMap.get(this)},\n    set: ()=>toss(\"Cannot assign the 'pointer' property of a struct.\")\n    // Reminder: leaving `set` undefined makes assignments\n    // to the property _silently_ do nothing. Current unit tests\n    // rely on it throwing, though.\n  };\n\n  /** Impl of X.memberKeys() for StructType and struct ctors. */\n  const __structMemberKeys = rop(function(){\n    const a = [];\n    for(const k of Object.keys(this.structInfo.members)){\n      a.push(this.memberKey(k));\n    }\n    return a;\n  });\n\n  const __utf8Decoder = new TextDecoder('utf-8');\n  const __utf8Encoder = new TextEncoder();\n  /** Internal helper to use in operations which need to distinguish\n      between SharedArrayBuffer heap memory and non-shared heap. */\n  const __SAB = ('undefined'===typeof SharedArrayBuffer)\n        ? function(){} : SharedArrayBuffer;\n  const __utf8Decode = function(arrayBuffer, begin, end){\n    return __utf8Decoder.decode(\n      (arrayBuffer.buffer instanceof __SAB)\n        ? arrayBuffer.slice(begin, end)\n        : arrayBuffer.subarray(begin, end)\n    );\n  };\n  /**\n     Uses __lookupMember() to find the given obj.structInfo key.\n     Returns that member if it is a string, else returns false. If the\n     member is not found, throws if tossIfNotFound is true, else\n     returns false.\n   */\n  const __memberIsString = function(obj,memberName, tossIfNotFound=false){\n    const m = __lookupMember(obj.structInfo, memberName, tossIfNotFound);\n    return (m && 1===m.signature.length && 's'===m.signature[0]) ? m : false;\n  };\n\n  /**\n     Given a member description object, throws if member.signature is\n     not valid for assigning to or interpretation as a C-style string.\n     It optimistically assumes that any signature of (i,p,s) is\n     C-string compatible.\n  */\n  const __affirmCStringSignature = function(member){\n    if('s'===member.signature) return;\n    toss(\"Invalid member type signature for C-string value:\",\n         JSON.stringify(member));\n  };\n\n  /**\n     Looks up the given member in obj.structInfo. If it has a\n     signature of 's' then it is assumed to be a C-style UTF-8 string\n     and a decoded copy of the string at its address is returned. If\n     the signature is of any other type, it throws. If an s-type\n     member's address is 0, `null` is returned.\n  */\n  const __memberToJsString = function f(obj,memberName){\n    const m = __lookupMember(obj.structInfo, memberName, true);\n    __affirmCStringSignature(m);\n    const addr = obj[m.key];\n    //log(\"addr =\",addr,memberName,\"m =\",m);\n    if(!addr) return null;\n    let pos = addr;\n    const mem = heap();\n    for( ; mem[pos]!==0; ++pos ) {\n      //log(\"mem[\",pos,\"]\",mem[pos]);\n    };\n    //log(\"addr =\",addr,\"pos =\",pos);\n    return (addr===pos) ? \"\" : __utf8Decode(mem, addr, pos);\n  };\n\n  /**\n     Adds value v to obj.ondispose, creating ondispose,\n     or converting it to an array, if needed.\n  */\n  const __addOnDispose = function(obj, ...v){\n    if(obj.ondispose){\n      if(!Array.isArray(obj.ondispose)){\n        obj.ondispose = [obj.ondispose];\n      }\n    }else{\n      obj.ondispose = [];\n    }\n    obj.ondispose.push(...v);\n  };\n\n  /**\n     Allocates a new UTF-8-encoded, NUL-terminated copy of the given\n     JS string and returns its address relative to heap(). If\n     allocation returns 0 this function throws. Ownership of the\n     memory is transfered to the caller, who must eventually pass it\n     to the configured dealloc() function.\n  */\n  const __allocCString = function(str){\n    const u = __utf8Encoder.encode(str);\n    const mem = alloc(u.length+1);\n    if(!mem) toss(\"Allocation error while duplicating string:\",str);\n    const h = heap();\n    //let i = 0;\n    //for( ; i < u.length; ++i ) h[mem + i] = u[i];\n    h.set(u, mem);\n    h[mem + u.length] = 0;\n    //log(\"allocCString @\",mem,\" =\",u);\n    return mem;\n  };\n\n  /**\n     Sets the given struct member of obj to a dynamically-allocated,\n     UTF-8-encoded, NUL-terminated copy of str. It is up to the caller\n     to free any prior memory, if appropriate. The newly-allocated\n     string is added to obj.ondispose so will be freed when the object\n     is disposed.\n\n     The given name may be either the name of the structInfo.members\n     key (faster) or the key as modified by the memberPrefix and\n     memberSuffix settings.\n  */\n  const __setMemberCString = function(obj, memberName, str){\n    const m = __lookupMember(obj.structInfo, memberName, true);\n    __affirmCStringSignature(m);\n    /* Potential TODO: if obj.ondispose contains obj[m.key] then\n       dealloc that value and clear that ondispose entry */\n    const mem = __allocCString(str);\n    obj[m.key] = mem;\n    __addOnDispose(obj, mem);\n    return obj;\n  };\n\n  /**\n     Prototype for all StructFactory instances (the constructors\n     returned from StructBinder).\n  */\n  const StructType = function ctor(structName, structInfo){\n    if(arguments[2]!==rop){\n      toss(\"Do not call the StructType constructor\",\n           \"from client-level code.\");\n    }\n    Object.defineProperties(this,{\n      //isA: rop((v)=>v instanceof ctor),\n      structName: rop(structName),\n      structInfo: rop(structInfo)\n    });\n  };\n\n  /**\n     Properties inherited by struct-type-specific StructType instances\n     and (indirectly) concrete struct-type instances.\n  */\n  StructType.prototype = Object.create(null, {\n    dispose: rop(function(){__freeStruct(this.constructor, this)}),\n    lookupMember: rop(function(memberName, tossIfNotFound=true){\n      return __lookupMember(this.structInfo, memberName, tossIfNotFound);\n    }),\n    memberToJsString: rop(function(memberName){\n      return __memberToJsString(this, memberName);\n    }),\n    memberIsString: rop(function(memberName, tossIfNotFound=true){\n      return __memberIsString(this, memberName, tossIfNotFound);\n    }),\n    memberKey: __memberKeyProp,\n    memberKeys: __structMemberKeys,\n    memberSignature: rop(function(memberName, emscriptenFormat=false){\n      return __memberSignature(this, memberName, emscriptenFormat);\n    }),\n    memoryDump: rop(__memoryDump),\n    pointer: __ptrPropDescriptor,\n    setMemberCString: rop(function(memberName, str){\n      return __setMemberCString(this, memberName, str);\n    })\n  });\n  // Function-type non-Property inherited members \n  Object.assign(StructType.prototype,{\n    addOnDispose: function(...v){\n      __addOnDispose(this,...v);\n      return this;\n    }\n  });\n\n  /**\n     \"Static\" properties for StructType.\n  */\n  Object.defineProperties(StructType, {\n    allocCString: rop(__allocCString),\n    isA: rop((v)=>v instanceof StructType),\n    hasExternalPointer: rop((v)=>(v instanceof StructType) && !!v[xPtrPropName]),\n    memberKey: __memberKeyProp\n  });\n\n  const isNumericValue = (v)=>Number.isFinite(v) || (v instanceof (BigInt || Number));\n\n  /**\n     Pass this a StructBinder-generated prototype, and the struct\n     member description object. It will define property accessors for\n     proto[memberKey] which read from/write to memory in\n     this.pointer. It modifies descr to make certain downstream\n     operations much simpler.\n  */\n  const makeMemberWrapper = function f(ctor,name, descr){\n    if(!f._){\n      /*cache all available getters/setters/set-wrappers for\n        direct reuse in each accessor function. */\n      f._ = {getters: {}, setters: {}, sw:{}};\n      const a = ['i','c','C','p','P','s','f','d','v()'];\n      if(bigIntEnabled) a.push('j');\n      a.forEach(function(v){\n        //const ir = sigIR(v);\n        f._.getters[v] = sigDVGetter(v) /* DataView[MethodName] values for GETTERS */;\n        f._.setters[v] = sigDVSetter(v) /* DataView[MethodName] values for SETTERS */;\n        f._.sw[v] = sigDVSetWrapper(v)  /* BigInt or Number ctor to wrap around values\n                                           for conversion */;\n      });\n      const rxSig1 = /^[ipPsjfdcC]$/,\n            rxSig2 = /^[vipPsjfdcC]\\([ipPsjfdcC]*\\)$/;\n      f.sigCheck = function(obj, name, key,sig){\n        if(Object.prototype.hasOwnProperty.call(obj, key)){\n          toss(obj.structName,'already has a property named',key+'.');\n        }\n        rxSig1.test(sig) || rxSig2.test(sig)\n          || toss(\"Malformed signature for\",\n                  sPropName(obj.structName,name)+\":\",sig);\n      };\n    }\n    const key = ctor.memberKey(name);\n    f.sigCheck(ctor.prototype, name, key, descr.signature);\n    descr.key = key;\n    descr.name = name;\n    const sigGlyph = sigLetter(descr.signature);\n    const xPropName = sPropName(ctor.prototype.structName,key);\n    const dbg = ctor.prototype.debugFlags.__flags;\n    /*\n      TODO?: set prototype of descr to an object which can set/fetch\n      its prefered representation, e.g. conversion to string or mapped\n      function. Advantage: we can avoid doing that via if/else if/else\n      in the get/set methods.\n    */\n    const prop = Object.create(null);\n    prop.configurable = false;\n    prop.enumerable = false;\n    prop.get = function(){\n      if(dbg.getter){\n        log(\"debug.getter:\",f._.getters[sigGlyph],\"for\", sigIR(sigGlyph),\n            xPropName,'@', this.pointer,'+',descr.offset,'sz',descr.sizeof);\n      }\n      let rc = (\n        new DataView(heap().buffer, this.pointer + descr.offset, descr.sizeof)\n      )[f._.getters[sigGlyph]](0, isLittleEndian);\n      if(dbg.getter) log(\"debug.getter:\",xPropName,\"result =\",rc);\n      return rc;\n    };\n    if(descr.readOnly){\n      prop.set = __propThrowOnSet(ctor.prototype.structName,key);\n    }else{\n      prop.set = function(v){\n        if(dbg.setter){\n          log(\"debug.setter:\",f._.setters[sigGlyph],\"for\", sigIR(sigGlyph),\n              xPropName,'@', this.pointer,'+',descr.offset,'sz',descr.sizeof, v);\n        }\n        if(!this.pointer){\n          toss(\"Cannot set struct property on disposed instance.\");\n        }\n        if(null===v) v = 0;\n        else while(!isNumericValue(v)){\n          if(isAutoPtrSig(descr.signature) && (v instanceof StructType)){\n            // It's a struct instance: let's store its pointer value!\n            v = v.pointer || 0;\n            if(dbg.setter) log(\"debug.setter:\",xPropName,\"resolved to\",v);\n            break;\n          }\n          toss(\"Invalid value for pointer-type\",xPropName+'.');\n        }\n        (\n          new DataView(heap().buffer, this.pointer + descr.offset, descr.sizeof)\n        )[f._.setters[sigGlyph]](0, f._.sw[sigGlyph](v), isLittleEndian);\n      };\n    }\n    Object.defineProperty(ctor.prototype, key, prop);\n  }/*makeMemberWrapper*/;\n  \n  /**\n     The main factory function which will be returned to the\n     caller.\n  */\n  const StructBinder = function StructBinder(structName, structInfo){\n    if(1===arguments.length){\n      structInfo = structName;\n      structName = structInfo.name;\n    }else if(!structInfo.name){\n      structInfo.name = structName;\n    }\n    if(!structName) toss(\"Struct name is required.\");\n    let lastMember = false;\n    Object.keys(structInfo.members).forEach((k)=>{\n      // Sanity checks of sizeof/offset info...\n      const m = structInfo.members[k];\n      if(!m.sizeof) toss(structName,\"member\",k,\"is missing sizeof.\");\n      else if(m.sizeof===1){\n        (m.signature === 'c' || m.signature === 'C') ||\n          toss(\"Unexpected sizeof==1 member\",\n               sPropName(structInfo.name,k),\n               \"with signature\",m.signature);\n      }else{\n        // sizes and offsets of size-1 members may be odd values, but\n        // others may not.\n        if(0!==(m.sizeof%4)){\n          console.warn(\"Invalid struct member description =\",m,\"from\",structInfo);\n          toss(structName,\"member\",k,\"sizeof is not aligned. sizeof=\"+m.sizeof);\n        }\n        if(0!==(m.offset%4)){\n          console.warn(\"Invalid struct member description =\",m,\"from\",structInfo);\n          toss(structName,\"member\",k,\"offset is not aligned. offset=\"+m.offset);\n        }\n      }\n      if(!lastMember || lastMember.offset < m.offset) lastMember = m;\n    });\n    if(!lastMember) toss(\"No member property descriptions found.\");\n    else if(structInfo.sizeof < lastMember.offset+lastMember.sizeof){\n      toss(\"Invalid struct config:\",structName,\n           \"max member offset (\"+lastMember.offset+\") \",\n           \"extends past end of struct (sizeof=\"+structInfo.sizeof+\").\");\n    }\n    const debugFlags = rop(SBF.__makeDebugFlags(StructBinder.debugFlags));\n    /** Constructor for the StructCtor. */\n    const StructCtor = function StructCtor(externalMemory){\n      if(!(this instanceof StructCtor)){\n        toss(\"The\",structName,\"constructor may only be called via 'new'.\");\n      }else if(arguments.length){\n        if(externalMemory!==(externalMemory|0) || externalMemory<=0){\n          toss(\"Invalid pointer value for\",structName,\"constructor.\");\n        }\n        __allocStruct(StructCtor, this, externalMemory);\n      }else{\n        __allocStruct(StructCtor, this);\n      }\n    };\n    Object.defineProperties(StructCtor,{\n      debugFlags: debugFlags,\n      isA: rop((v)=>v instanceof StructCtor),\n      memberKey: __memberKeyProp,\n      memberKeys: __structMemberKeys,\n      methodInfoForKey: rop(function(mKey){\n      }),\n      structInfo: rop(structInfo),\n      structName: rop(structName)\n    });\n    StructCtor.prototype = new StructType(structName, structInfo, rop);\n    Object.defineProperties(StructCtor.prototype,{\n      debugFlags: debugFlags,\n      constructor: rop(StructCtor)\n      /*if we assign StructCtor.prototype and don't do\n        this then StructCtor!==instance.constructor!*/\n    });\n    Object.keys(structInfo.members).forEach(\n      (name)=>makeMemberWrapper(StructCtor, name, structInfo.members[name])\n    );\n    return StructCtor;\n  };\n  StructBinder.StructType = StructType;\n  StructBinder.config = config;\n  StructBinder.allocCString = __allocCString;\n  if(!StructBinder.debugFlags){\n    StructBinder.debugFlags = SBF.__makeDebugFlags(SBF.debugFlags);\n  }\n  return StructBinder;\n}/*StructBinderFactory*/;\n/* END FILE: jaccwabyt/jaccwabyt.js */\n/* BEGIN FILE: api/sqlite3-api-glue.js */\n/*\n  2022-07-22\n\n  The author disclaims copyright to this source code.  In place of a\n  legal notice, here is a blessing:\n\n  *   May you do good and not evil.\n  *   May you find forgiveness for yourself and forgive others.\n  *   May you share freely, never taking more than you give.\n\n  ***********************************************************************\n\n  This file glues together disparate pieces of JS which are loaded in\n  previous steps of the sqlite3-api.js bootstrapping process:\n  sqlite3-api-prologue.js, whwasmutil.js, and jaccwabyt.js. It\n  initializes the main API pieces so that the downstream components\n  (e.g. sqlite3-api-oo1.js) have all that they need.\n*/\nglobalThis.sqlite3ApiBootstrap.initializers.push(function(sqlite3){\n  'use strict';\n  const toss = (...args)=>{throw new Error(args.join(' '))};\n  const toss3 = sqlite3.SQLite3Error.toss;\n  const capi = sqlite3.capi, wasm = sqlite3.wasm, util = sqlite3.util;\n  globalThis.WhWasmUtilInstaller(wasm);\n  delete globalThis.WhWasmUtilInstaller;\n\n  if(0){\n    /**\n       Please keep this block around as a maintenance reminder\n       that we cannot rely on this type of check.\n\n       This block fails on Safari, per a report at\n       https://sqlite.org/forum/forumpost/e5b20e1feb.\n\n       It turns out that what Safari serves from the indirect function\n       table (e.g. wasm.functionEntry(X)) is anonymous functions which\n       wrap the WASM functions, rather than returning the WASM\n       functions themselves. That means comparison of such functions\n       is useless for determining whether or not we have a specific\n       function from wasm.exports. i.e. if function X is indirection\n       function table entry N then wasm.exports.X is not equal to\n       wasm.functionEntry(N) in Safari, despite being so in the other\n       browsers.\n    */\n    /**\n       Find a mapping for SQLITE_WASM_DEALLOC, which the API\n       guarantees is a WASM pointer to the same underlying function as\n       wasm.dealloc() (noting that wasm.dealloc() is permitted to be a\n       JS wrapper around the WASM function). There is unfortunately no\n       O(1) algorithm for finding this pointer: we have to walk the\n       WASM indirect function table to find it. However, experience\n       indicates that that particular function is always very close to\n       the front of the table (it's been entry #3 in all relevant\n       tests).\n    */\n    const dealloc = wasm.exports[sqlite3.config.deallocExportName];\n    const nFunc = wasm.functionTable().length;\n    let i;\n    for(i = 0; i < nFunc; ++i){\n      const e = wasm.functionEntry(i);\n      if(dealloc === e){\n        capi.SQLITE_WASM_DEALLOC = i;\n        break;\n      }\n    }\n    if(dealloc !== wasm.functionEntry(capi.SQLITE_WASM_DEALLOC)){\n      toss(\"Internal error: cannot find function pointer for SQLITE_WASM_DEALLOC.\");\n    }\n  }\n\n  /**\n     Signatures for the WASM-exported C-side functions. Each entry\n     is an array with 2+ elements:\n\n     [ \"c-side name\",\n       \"result type\" (wasm.xWrap() syntax),\n       [arg types in xWrap() syntax]\n       // ^^^ this needn't strictly be an array: it can be subsequent\n       // elements instead: [x,y,z] is equivalent to x,y,z\n     ]\n\n     Note that support for the API-specific data types in the\n     result/argument type strings gets plugged in at a later phase in\n     the API initialization process.\n  */\n  wasm.bindingSignatures = [\n    // Please keep these sorted by function name!\n    [\"sqlite3_aggregate_context\",\"void*\", \"sqlite3_context*\", \"int\"],\n    /* sqlite3_auto_extension() has a hand-written binding. */\n    /* sqlite3_bind_blob() and sqlite3_bind_text() have hand-written\n       bindings to permit more flexible inputs. */\n    [\"sqlite3_bind_double\",\"int\", \"sqlite3_stmt*\", \"int\", \"f64\"],\n    [\"sqlite3_bind_int\",\"int\", \"sqlite3_stmt*\", \"int\", \"int\"],\n    [\"sqlite3_bind_null\",undefined, \"sqlite3_stmt*\", \"int\"],\n    [\"sqlite3_bind_parameter_count\", \"int\", \"sqlite3_stmt*\"],\n    [\"sqlite3_bind_parameter_index\",\"int\", \"sqlite3_stmt*\", \"string\"],\n    [\"sqlite3_bind_pointer\", \"int\",\n     \"sqlite3_stmt*\", \"int\", \"*\", \"string:static\", \"*\"],\n    [\"sqlite3_busy_handler\",\"int\", [\n      \"sqlite3*\",\n      new wasm.xWrap.FuncPtrAdapter({\n        signature: 'i(pi)',\n        contextKey: (argv,argIndex)=>argv[0/* sqlite3* */]\n      }),\n      \"*\"\n    ]],\n    [\"sqlite3_busy_timeout\",\"int\", \"sqlite3*\", \"int\"],\n    /* sqlite3_cancel_auto_extension() has a hand-written binding. */\n    /* sqlite3_close_v2() is implemented by hand to perform some\n       extra work. */\n    [\"sqlite3_changes\", \"int\", \"sqlite3*\"],\n    [\"sqlite3_clear_bindings\",\"int\", \"sqlite3_stmt*\"],\n    [\"sqlite3_collation_needed\", \"int\", \"sqlite3*\", \"*\", \"*\"/*=>v(ppis)*/],\n    [\"sqlite3_column_blob\",\"*\", \"sqlite3_stmt*\", \"int\"],\n    [\"sqlite3_column_bytes\",\"int\", \"sqlite3_stmt*\", \"int\"],\n    [\"sqlite3_column_count\", \"int\", \"sqlite3_stmt*\"],\n    [\"sqlite3_column_double\",\"f64\", \"sqlite3_stmt*\", \"int\"],\n    [\"sqlite3_column_int\",\"int\", \"sqlite3_stmt*\", \"int\"],\n    [\"sqlite3_column_name\",\"string\", \"sqlite3_stmt*\", \"int\"],\n    [\"sqlite3_column_text\",\"string\", \"sqlite3_stmt*\", \"int\"],\n    [\"sqlite3_column_type\",\"int\", \"sqlite3_stmt*\", \"int\"],\n    [\"sqlite3_column_value\",\"sqlite3_value*\", \"sqlite3_stmt*\", \"int\"],\n    [\"sqlite3_commit_hook\", \"void*\", [\n      \"sqlite3*\",\n      new wasm.xWrap.FuncPtrAdapter({\n        name: 'sqlite3_commit_hook',\n        signature: 'i(p)',\n        contextKey: (argv)=>argv[0/* sqlite3* */]\n      }),\n      '*'\n    ]],\n    [\"sqlite3_compileoption_get\", \"string\", \"int\"],\n    [\"sqlite3_compileoption_used\", \"int\", \"string\"],\n    [\"sqlite3_complete\", \"int\", \"string:flexible\"],\n    [\"sqlite3_context_db_handle\", \"sqlite3*\", \"sqlite3_context*\"],\n\n    /* sqlite3_create_function(), sqlite3_create_function_v2(), and\n       sqlite3_create_window_function() use hand-written bindings to\n       simplify handling of their function-type arguments. */\n    /* sqlite3_create_collation() and sqlite3_create_collation_v2()\n       use hand-written bindings to simplify passing of the callback\n       function.\n      [\"sqlite3_create_collation\", \"int\",\n     \"sqlite3*\", \"string\", \"int\",//SQLITE_UTF8 is the only legal value\n     \"*\", \"*\"],\n    [\"sqlite3_create_collation_v2\", \"int\",\n     \"sqlite3*\", \"string\", \"int\",//SQLITE_UTF8 is the only legal value\n     \"*\", \"*\", \"*\"],\n    */\n    [\"sqlite3_data_count\", \"int\", \"sqlite3_stmt*\"],\n    [\"sqlite3_db_filename\", \"string\", \"sqlite3*\", \"string\"],\n    [\"sqlite3_db_handle\", \"sqlite3*\", \"sqlite3_stmt*\"],\n    [\"sqlite3_db_name\", \"string\", \"sqlite3*\", \"int\"],\n    [\"sqlite3_db_status\", \"int\", \"sqlite3*\", \"int\", \"*\", \"*\", \"int\"],\n    [\"sqlite3_errcode\", \"int\", \"sqlite3*\"],\n    [\"sqlite3_errmsg\", \"string\", \"sqlite3*\"],\n    [\"sqlite3_error_offset\", \"int\", \"sqlite3*\"],\n    [\"sqlite3_errstr\", \"string\", \"int\"],\n    [\"sqlite3_exec\", \"int\", [\n      \"sqlite3*\", \"string:flexible\",\n      new wasm.xWrap.FuncPtrAdapter({\n        signature: 'i(pipp)',\n        bindScope: 'transient',\n        callProxy: (callback)=>{\n          let aNames;\n          return (pVoid, nCols, pColVals, pColNames)=>{\n            try {\n              const aVals = wasm.cArgvToJs(nCols, pColVals);\n              if(!aNames) aNames = wasm.cArgvToJs(nCols, pColNames);\n              return callback(aVals, aNames) | 0;\n            }catch(e){\n              /* If we set the db error state here, the higher-level\n                 exec() call replaces it with its own, so we have no way\n                 of reporting the exception message except the console. We\n                 must not propagate exceptions through the C API. Though\n                 we make an effort to report OOM here, sqlite3_exec()\n                 translates that into SQLITE_ABORT as well. */\n              return e.resultCode || capi.SQLITE_ERROR;\n            }\n          }\n        }\n      }),\n      \"*\", \"**\"\n    ]],\n    [\"sqlite3_expanded_sql\", \"string\", \"sqlite3_stmt*\"],\n    [\"sqlite3_extended_errcode\", \"int\", \"sqlite3*\"],\n    [\"sqlite3_extended_result_codes\", \"int\", \"sqlite3*\", \"int\"],\n    [\"sqlite3_file_control\", \"int\", \"sqlite3*\", \"string\", \"int\", \"*\"],\n    [\"sqlite3_finalize\", \"int\", \"sqlite3_stmt*\"],\n    [\"sqlite3_free\", undefined,\"*\"],\n    [\"sqlite3_get_auxdata\", \"*\", \"sqlite3_context*\", \"int\"],\n    [\"sqlite3_initialize\", undefined],\n    /*[\"sqlite3_interrupt\", undefined, \"sqlite3*\"\n       ^^^ we cannot actually currently support this because JS is\n        single-threaded and we don't have a portable way to access a DB\n        from 2 SharedWorkers concurrently. ],*/\n    [\"sqlite3_keyword_count\", \"int\"],\n    [\"sqlite3_keyword_name\", \"int\", [\"int\", \"**\", \"*\"]],\n    [\"sqlite3_keyword_check\", \"int\", [\"string\", \"int\"]],\n    [\"sqlite3_libversion\", \"string\"],\n    [\"sqlite3_libversion_number\", \"int\"],\n    [\"sqlite3_limit\", \"int\", [\"sqlite3*\", \"int\", \"int\"]],\n    [\"sqlite3_malloc\", \"*\",\"int\"],\n    [\"sqlite3_open\", \"int\", \"string\", \"*\"],\n    [\"sqlite3_open_v2\", \"int\", \"string\", \"*\", \"int\", \"string\"],\n    /* sqlite3_prepare_v2() and sqlite3_prepare_v3() are handled\n       separately due to us requiring two different sets of semantics\n       for those, depending on how their SQL argument is provided. */\n    /* sqlite3_randomness() uses a hand-written wrapper to extend\n       the range of supported argument types. */\n    [\"sqlite3_progress_handler\", undefined, [\n      \"sqlite3*\", \"int\", new wasm.xWrap.FuncPtrAdapter({\n        name: 'xProgressHandler',\n        signature: 'i(p)',\n        bindScope: 'context',\n        contextKey: (argv,argIndex)=>argv[0/* sqlite3* */]\n      }), \"*\"\n    ]],\n    [\"sqlite3_realloc\", \"*\",\"*\",\"int\"],\n    [\"sqlite3_reset\", \"int\", \"sqlite3_stmt*\"],\n    /* sqlite3_reset_auto_extension() has a hand-written binding. */\n    [\"sqlite3_result_blob\", undefined, \"sqlite3_context*\", \"*\", \"int\", \"*\"],\n    [\"sqlite3_result_double\", undefined, \"sqlite3_context*\", \"f64\"],\n    [\"sqlite3_result_error\", undefined, \"sqlite3_context*\", \"string\", \"int\"],\n    [\"sqlite3_result_error_code\", undefined, \"sqlite3_context*\", \"int\"],\n    [\"sqlite3_result_error_nomem\", undefined, \"sqlite3_context*\"],\n    [\"sqlite3_result_error_toobig\", undefined, \"sqlite3_context*\"],\n    [\"sqlite3_result_int\", undefined, \"sqlite3_context*\", \"int\"],\n    [\"sqlite3_result_null\", undefined, \"sqlite3_context*\"],\n    [\"sqlite3_result_pointer\", undefined,\n     \"sqlite3_context*\", \"*\", \"string:static\", \"*\"],\n    [\"sqlite3_result_subtype\", undefined, \"sqlite3_value*\", \"int\"],\n    [\"sqlite3_result_text\", undefined, \"sqlite3_context*\", \"string\", \"int\", \"*\"],\n    [\"sqlite3_result_zeroblob\", undefined, \"sqlite3_context*\", \"int\"],\n    [\"sqlite3_rollback_hook\", \"void*\", [\n      \"sqlite3*\",\n      new wasm.xWrap.FuncPtrAdapter({\n        name: 'sqlite3_rollback_hook',\n        signature: 'v(p)',\n        contextKey: (argv)=>argv[0/* sqlite3* */]\n      }),\n      '*'\n    ]],\n    [\"sqlite3_set_authorizer\", \"int\", [\n      \"sqlite3*\",\n      new wasm.xWrap.FuncPtrAdapter({\n        name: \"sqlite3_set_authorizer::xAuth\",\n        signature: \"i(pi\"+\"ssss)\",\n        contextKey: (argv, argIndex)=>argv[0/*(sqlite3*)*/],\n        callProxy: (callback)=>{\n          return (pV, iCode, s0, s1, s2, s3)=>{\n            try{\n              s0 = s0 && wasm.cstrToJs(s0); s1 = s1 && wasm.cstrToJs(s1);\n              s2 = s2 && wasm.cstrToJs(s2); s3 = s3 && wasm.cstrToJs(s3);\n              return callback(pV, iCode, s0, s1, s2, s3) || 0;\n            }catch(e){\n              return e.resultCode || capi.SQLITE_ERROR;\n            }\n          }\n        }\n      }),\n      \"*\"/*pUserData*/\n    ]],\n    [\"sqlite3_set_auxdata\", undefined, [\n      \"sqlite3_context*\", \"int\", \"*\",\n      new wasm.xWrap.FuncPtrAdapter({\n        name: 'xDestroyAuxData',\n        signature: 'v(*)',\n        contextKey: (argv, argIndex)=>argv[0/* sqlite3_context* */]\n      })\n    ]],\n    [\"sqlite3_shutdown\", undefined],\n    [\"sqlite3_sourceid\", \"string\"],\n    [\"sqlite3_sql\", \"string\", \"sqlite3_stmt*\"],\n    [\"sqlite3_status\", \"int\", \"int\", \"*\", \"*\", \"int\"],\n    [\"sqlite3_step\", \"int\", \"sqlite3_stmt*\"],\n    [\"sqlite3_stmt_isexplain\", \"int\", [\"sqlite3_stmt*\"]],\n    [\"sqlite3_stmt_readonly\", \"int\", [\"sqlite3_stmt*\"]],\n    [\"sqlite3_stmt_status\", \"int\", \"sqlite3_stmt*\", \"int\", \"int\"],\n    [\"sqlite3_strglob\", \"int\", \"string\",\"string\"],\n    [\"sqlite3_stricmp\", \"int\", \"string\", \"string\"],\n    [\"sqlite3_strlike\", \"int\", \"string\", \"string\",\"int\"],\n    [\"sqlite3_strnicmp\", \"int\", \"string\", \"string\", \"int\"],\n    [\"sqlite3_table_column_metadata\", \"int\",\n     \"sqlite3*\", \"string\", \"string\", \"string\",\n     \"**\", \"**\", \"*\", \"*\", \"*\"],\n    [\"sqlite3_total_changes\", \"int\", \"sqlite3*\"],\n    [\"sqlite3_trace_v2\", \"int\", [\n      \"sqlite3*\", \"int\",\n      new wasm.xWrap.FuncPtrAdapter({\n        name: 'sqlite3_trace_v2::callback',\n        signature: 'i(ippp)',\n        contextKey: (argv,argIndex)=>argv[0/* sqlite3* */]\n      }),\n      \"*\"\n    ]],\n    [\"sqlite3_txn_state\", \"int\", [\"sqlite3*\",\"string\"]],\n    /* Note that sqlite3_uri_...() have very specific requirements for\n       their first C-string arguments, so we cannot perform any value\n       conversion on those. */\n    [\"sqlite3_uri_boolean\", \"int\", \"sqlite3_filename\", \"string\", \"int\"],\n    [\"sqlite3_uri_key\", \"string\", \"sqlite3_filename\", \"int\"],\n    [\"sqlite3_uri_parameter\", \"string\", \"sqlite3_filename\", \"string\"],\n    [\"sqlite3_user_data\",\"void*\", \"sqlite3_context*\"],\n    [\"sqlite3_value_blob\", \"*\", \"sqlite3_value*\"],\n    [\"sqlite3_value_bytes\",\"int\", \"sqlite3_value*\"],\n    [\"sqlite3_value_double\",\"f64\", \"sqlite3_value*\"],\n    [\"sqlite3_value_dup\", \"sqlite3_value*\", \"sqlite3_value*\"],\n    [\"sqlite3_value_free\", undefined, \"sqlite3_value*\"],\n    [\"sqlite3_value_frombind\", \"int\", \"sqlite3_value*\"],\n    [\"sqlite3_value_int\",\"int\", \"sqlite3_value*\"],\n    [\"sqlite3_value_nochange\", \"int\", \"sqlite3_value*\"],\n    [\"sqlite3_value_numeric_type\", \"int\", \"sqlite3_value*\"],\n    [\"sqlite3_value_pointer\", \"*\", \"sqlite3_value*\", \"string:static\"],\n    [\"sqlite3_value_subtype\", \"int\", \"sqlite3_value*\"],\n    [\"sqlite3_value_text\", \"string\", \"sqlite3_value*\"],\n    [\"sqlite3_value_type\", \"int\", \"sqlite3_value*\"],\n    [\"sqlite3_vfs_find\", \"*\", \"string\"],\n    [\"sqlite3_vfs_register\", \"int\", \"sqlite3_vfs*\", \"int\"],\n    [\"sqlite3_vfs_unregister\", \"int\", \"sqlite3_vfs*\"]\n  ]/*wasm.bindingSignatures*/;\n\n  if(false && wasm.compileOptionUsed('SQLITE_ENABLE_NORMALIZE')){\n    /* ^^^ \"the problem\" is that this is an option feature and the\n       build-time function-export list does not currently take\n       optional features into account. */\n    wasm.bindingSignatures.push([\"sqlite3_normalized_sql\", \"string\", \"sqlite3_stmt*\"]);\n  }\n\n  if(wasm.exports.sqlite3_activate_see instanceof Function){\n    wasm.bindingSignatures.push(\n      [\"sqlite3_key\", \"int\", \"sqlite3*\", \"string\", \"int\"],\n      [\"sqlite3_key_v2\",\"int\",\"sqlite3*\",\"string\",\"*\",\"int\"],\n      [\"sqlite3_rekey\", \"int\", \"sqlite3*\", \"string\", \"int\"],\n      [\"sqlite3_rekey_v2\", \"int\", \"sqlite3*\", \"string\", \"*\", \"int\"],\n      [\"sqlite3_activate_see\", undefined, \"string\"]\n    );\n  }\n  /**\n     Functions which require BigInt (int64) support are separated from\n     the others because we need to conditionally bind them or apply\n     dummy impls, depending on the capabilities of the environment.\n\n     Note that not all of these functions directly require int64\n     but are only for use with APIs which require int64. For example,\n     the vtab-related functions.\n  */\n  wasm.bindingSignatures.int64 = [\n    [\"sqlite3_bind_int64\",\"int\", [\"sqlite3_stmt*\", \"int\", \"i64\"]],\n    [\"sqlite3_changes64\",\"i64\", [\"sqlite3*\"]],\n    [\"sqlite3_column_int64\",\"i64\", [\"sqlite3_stmt*\", \"int\"]],\n    [\"sqlite3_create_module\", \"int\",\n     [\"sqlite3*\",\"string\",\"sqlite3_module*\",\"*\"]],\n    [\"sqlite3_create_module_v2\", \"int\",\n     [\"sqlite3*\",\"string\",\"sqlite3_module*\",\"*\",\"*\"]],\n    [\"sqlite3_declare_vtab\", \"int\", [\"sqlite3*\", \"string:flexible\"]],\n    [\"sqlite3_deserialize\", \"int\", \"sqlite3*\", \"string\", \"*\", \"i64\", \"i64\", \"int\"]\n    /* Careful! Short version: de/serialize() are problematic because they\n       might use a different allocator than the user for managing the\n       deserialized block. de/serialize() are ONLY safe to use with\n       sqlite3_malloc(), sqlite3_free(), and its 64-bit variants. */,\n    [\"sqlite3_drop_modules\", \"int\", [\"sqlite3*\", \"**\"]],\n    [\"sqlite3_last_insert_rowid\", \"i64\", [\"sqlite3*\"]],\n    [\"sqlite3_malloc64\", \"*\",\"i64\"],\n    [\"sqlite3_msize\", \"i64\", \"*\"],\n    [\"sqlite3_overload_function\", \"int\", [\"sqlite3*\",\"string\",\"int\"]],\n    [\"sqlite3_preupdate_blobwrite\", \"int\", \"sqlite3*\"],\n    [\"sqlite3_preupdate_count\", \"int\", \"sqlite3*\"],\n    [\"sqlite3_preupdate_depth\", \"int\", \"sqlite3*\"],\n    [\"sqlite3_preupdate_hook\", \"*\", [\n      \"sqlite3*\",\n      new wasm.xWrap.FuncPtrAdapter({\n        name: 'sqlite3_preupdate_hook',\n        signature: \"v(ppippjj)\",\n        contextKey: (argv)=>argv[0/* sqlite3* */],\n        callProxy: (callback)=>{\n          return (p,db,op,zDb,zTbl,iKey1,iKey2)=>{\n            callback(p, db, op, wasm.cstrToJs(zDb), wasm.cstrToJs(zTbl),\n                     iKey1, iKey2);\n          };\n        }\n      }),\n      \"*\"\n    ]],\n    [\"sqlite3_preupdate_new\", \"int\", [\"sqlite3*\", \"int\", \"**\"]],\n    [\"sqlite3_preupdate_old\", \"int\", [\"sqlite3*\", \"int\", \"**\"]],\n    [\"sqlite3_realloc64\", \"*\",\"*\", \"i64\"],\n    [\"sqlite3_result_int64\", undefined, \"*\", \"i64\"],\n    [\"sqlite3_result_zeroblob64\", \"int\", \"*\", \"i64\"],\n    [\"sqlite3_serialize\",\"*\", \"sqlite3*\", \"string\", \"*\", \"int\"],\n    [\"sqlite3_set_last_insert_rowid\", undefined, [\"sqlite3*\", \"i64\"]],\n    [\"sqlite3_status64\", \"int\", \"int\", \"*\", \"*\", \"int\"],\n    [\"sqlite3_total_changes64\", \"i64\", [\"sqlite3*\"]],\n    [\"sqlite3_update_hook\", \"*\", [\n      \"sqlite3*\",\n      new wasm.xWrap.FuncPtrAdapter({\n        name: 'sqlite3_update_hook',\n        signature: \"v(iippj)\",\n        contextKey: (argv)=>argv[0/* sqlite3* */],\n        callProxy: (callback)=>{\n          return (p,op,z0,z1,rowid)=>{\n            callback(p, op, wasm.cstrToJs(z0), wasm.cstrToJs(z1), rowid);\n          };\n        }\n      }),\n      \"*\"\n    ]],\n    [\"sqlite3_uri_int64\", \"i64\", [\"sqlite3_filename\", \"string\", \"i64\"]],\n    [\"sqlite3_value_int64\",\"i64\", \"sqlite3_value*\"],\n    [\"sqlite3_vtab_collation\",\"string\",\"sqlite3_index_info*\",\"int\"],\n    [\"sqlite3_vtab_distinct\",\"int\", \"sqlite3_index_info*\"],\n    [\"sqlite3_vtab_in\",\"int\", \"sqlite3_index_info*\", \"int\", \"int\"],\n    [\"sqlite3_vtab_in_first\", \"int\", \"sqlite3_value*\", \"**\"],\n    [\"sqlite3_vtab_in_next\", \"int\", \"sqlite3_value*\", \"**\"],\n    /*[\"sqlite3_vtab_config\" is variadic and requires a hand-written\n      proxy.] */\n    [\"sqlite3_vtab_nochange\",\"int\", \"sqlite3_context*\"],\n    [\"sqlite3_vtab_on_conflict\",\"int\", \"sqlite3*\"],\n    [\"sqlite3_vtab_rhs_value\",\"int\", \"sqlite3_index_info*\", \"int\", \"**\"]\n  ];\n\n  // Add session/changeset APIs...\n  if(wasm.bigIntEnabled && !!wasm.exports.sqlite3changegroup_add){\n    /* ACHTUNG: 2022-12-23: the session/changeset API bindings are\n       COMPLETELY UNTESTED. */\n    /**\n       FuncPtrAdapter options for session-related callbacks with the\n       native signature \"i(ps)\". This proxy converts the 2nd argument\n       from a C string to a JS string before passing the arguments on\n       to the client-provided JS callback.\n    */\n    const __ipsProxy = {\n      signature: 'i(ps)',\n      callProxy:(callback)=>{\n        return (p,s)=>{\n          try{return callback(p, wasm.cstrToJs(s)) | 0}\n          catch(e){return e.resultCode || capi.SQLITE_ERROR}\n        }\n      }\n    };\n\n    wasm.bindingSignatures.int64.push(...[\n      ['sqlite3changegroup_add', 'int', ['sqlite3_changegroup*', 'int', 'void*']],\n      ['sqlite3changegroup_add_strm', 'int', [\n        'sqlite3_changegroup*',\n        new wasm.xWrap.FuncPtrAdapter({\n          name: 'xInput', signature: 'i(ppp)', bindScope: 'transient'\n        }),\n        'void*'\n      ]],\n      ['sqlite3changegroup_delete', undefined, ['sqlite3_changegroup*']],\n      ['sqlite3changegroup_new', 'int', ['**']],\n      ['sqlite3changegroup_output', 'int', ['sqlite3_changegroup*', 'int*', '**']],\n      ['sqlite3changegroup_output_strm', 'int', [\n        'sqlite3_changegroup*',\n        new wasm.xWrap.FuncPtrAdapter({\n          name: 'xOutput', signature: 'i(ppi)', bindScope: 'transient'\n        }),\n        'void*'\n      ]],\n      ['sqlite3changeset_apply', 'int', [\n        'sqlite3*', 'int', 'void*',\n        new wasm.xWrap.FuncPtrAdapter({\n          name: 'xFilter', bindScope: 'transient', ...__ipsProxy\n        }),\n        new wasm.xWrap.FuncPtrAdapter({\n          name: 'xConflict', signature: 'i(pip)', bindScope: 'transient'\n        }),\n        'void*'\n      ]],\n      ['sqlite3changeset_apply_strm', 'int', [\n        'sqlite3*',\n        new wasm.xWrap.FuncPtrAdapter({\n          name: 'xInput', signature: 'i(ppp)', bindScope: 'transient'\n        }),\n        'void*',\n        new wasm.xWrap.FuncPtrAdapter({\n          name: 'xFilter', bindScope: 'transient', ...__ipsProxy\n        }),\n        new wasm.xWrap.FuncPtrAdapter({\n          name: 'xConflict', signature: 'i(pip)', bindScope: 'transient'\n        }),\n        'void*'\n      ]],\n      ['sqlite3changeset_apply_v2', 'int', [\n        'sqlite3*', 'int', 'void*',\n        new wasm.xWrap.FuncPtrAdapter({\n          name: 'xFilter', bindScope: 'transient', ...__ipsProxy\n        }),\n        new wasm.xWrap.FuncPtrAdapter({\n          name: 'xConflict', signature: 'i(pip)', bindScope: 'transient'\n        }),\n        'void*', '**', 'int*', 'int'\n\n      ]],\n      ['sqlite3changeset_apply_v2_strm', 'int', [\n        'sqlite3*',\n        new wasm.xWrap.FuncPtrAdapter({\n          name: 'xInput', signature: 'i(ppp)', bindScope: 'transient'\n        }),\n        'void*',\n        new wasm.xWrap.FuncPtrAdapter({\n          name: 'xFilter', bindScope: 'transient', ...__ipsProxy\n        }),\n        new wasm.xWrap.FuncPtrAdapter({\n          name: 'xConflict', signature: 'i(pip)', bindScope: 'transient'\n        }),\n        'void*', '**', 'int*', 'int'\n      ]],\n      ['sqlite3changeset_concat', 'int', ['int','void*', 'int', 'void*', 'int*', '**']],\n      ['sqlite3changeset_concat_strm', 'int', [\n        new wasm.xWrap.FuncPtrAdapter({\n          name: 'xInputA', signature: 'i(ppp)', bindScope: 'transient'\n        }),\n        'void*',\n        new wasm.xWrap.FuncPtrAdapter({\n          name: 'xInputB', signature: 'i(ppp)', bindScope: 'transient'\n        }),\n        'void*',\n        new wasm.xWrap.FuncPtrAdapter({\n          name: 'xOutput', signature: 'i(ppi)', bindScope: 'transient'\n        }),\n        'void*'\n      ]],\n      ['sqlite3changeset_conflict', 'int', ['sqlite3_changeset_iter*', 'int', '**']],\n      ['sqlite3changeset_finalize', 'int', ['sqlite3_changeset_iter*']],\n      ['sqlite3changeset_fk_conflicts', 'int', ['sqlite3_changeset_iter*', 'int*']],\n      ['sqlite3changeset_invert', 'int', ['int', 'void*', 'int*', '**']],\n      ['sqlite3changeset_invert_strm', 'int', [\n        new wasm.xWrap.FuncPtrAdapter({\n          name: 'xInput', signature: 'i(ppp)', bindScope: 'transient'\n        }),\n        'void*',\n        new wasm.xWrap.FuncPtrAdapter({\n          name: 'xOutput', signature: 'i(ppi)', bindScope: 'transient'\n        }),\n        'void*'\n      ]],\n      ['sqlite3changeset_new', 'int', ['sqlite3_changeset_iter*', 'int', '**']],\n      ['sqlite3changeset_next', 'int', ['sqlite3_changeset_iter*']],\n      ['sqlite3changeset_old', 'int', ['sqlite3_changeset_iter*', 'int', '**']],\n      ['sqlite3changeset_op', 'int', [\n        'sqlite3_changeset_iter*', '**', 'int*', 'int*','int*'\n      ]],\n      ['sqlite3changeset_pk', 'int', ['sqlite3_changeset_iter*', '**', 'int*']],\n      ['sqlite3changeset_start', 'int', ['**', 'int', '*']],\n      ['sqlite3changeset_start_strm', 'int', [\n        '**',\n        new wasm.xWrap.FuncPtrAdapter({\n          name: 'xInput', signature: 'i(ppp)', bindScope: 'transient'\n        }),\n        'void*'\n      ]],\n      ['sqlite3changeset_start_v2', 'int', ['**', 'int', '*', 'int']],\n      ['sqlite3changeset_start_v2_strm', 'int', [\n        '**',\n        new wasm.xWrap.FuncPtrAdapter({\n          name: 'xInput', signature: 'i(ppp)', bindScope: 'transient'\n        }),\n        'void*', 'int'\n      ]],\n      ['sqlite3session_attach', 'int', ['sqlite3_session*', 'string']],\n      ['sqlite3session_changeset', 'int', ['sqlite3_session*', 'int*', '**']],\n      ['sqlite3session_changeset_size', 'i64', ['sqlite3_session*']],\n      ['sqlite3session_changeset_strm', 'int', [\n        'sqlite3_session*',\n        new wasm.xWrap.FuncPtrAdapter({\n          name: 'xOutput', signature: 'i(ppp)', bindScope: 'transient'\n        }),\n        'void*'\n      ]],\n      ['sqlite3session_config', 'int', ['int', 'void*']],\n      ['sqlite3session_create', 'int', ['sqlite3*', 'string', '**']],\n      //sqlite3session_delete() is bound manually\n      ['sqlite3session_diff', 'int', ['sqlite3_session*', 'string', 'string', '**']],\n      ['sqlite3session_enable', 'int', ['sqlite3_session*', 'int']],\n      ['sqlite3session_indirect', 'int', ['sqlite3_session*', 'int']],\n      ['sqlite3session_isempty', 'int', ['sqlite3_session*']],\n      ['sqlite3session_memory_used', 'i64', ['sqlite3_session*']],\n      ['sqlite3session_object_config', 'int', ['sqlite3_session*', 'int', 'void*']],\n      ['sqlite3session_patchset', 'int', ['sqlite3_session*', '*', '**']],\n      ['sqlite3session_patchset_strm', 'int', [\n        'sqlite3_session*',\n        new wasm.xWrap.FuncPtrAdapter({\n          name: 'xOutput', signature: 'i(ppp)', bindScope: 'transient'\n        }),\n        'void*'\n      ]],\n      ['sqlite3session_table_filter', undefined, [\n        'sqlite3_session*',\n        new wasm.xWrap.FuncPtrAdapter({\n          name: 'xFilter', ...__ipsProxy,\n          contextKey: (argv,argIndex)=>argv[0/* (sqlite3_session*) */]\n        }),\n        '*'\n      ]]\n    ]);\n  }/*session/changeset APIs*/\n\n  /**\n     Functions which are intended solely for API-internal use by the\n     WASM components, not client code. These get installed into\n     sqlite3.wasm. Some of them get exposed to clients via variants\n     named sqlite3_js_...().\n  */\n  wasm.bindingSignatures.wasm = [\n    [\"sqlite3_wasm_db_reset\", \"int\", \"sqlite3*\"],\n    [\"sqlite3_wasm_db_vfs\", \"sqlite3_vfs*\", \"sqlite3*\",\"string\"],\n    [\"sqlite3_wasm_vfs_create_file\", \"int\",\n     \"sqlite3_vfs*\",\"string\",\"*\", \"int\"],\n    [\"sqlite3_wasm_vfs_unlink\", \"int\", \"sqlite3_vfs*\",\"string\"]\n  ];\n\n  /**\n     Install JS<->C struct bindings for the non-opaque struct types we\n     need... */\n  sqlite3.StructBinder = globalThis.Jaccwabyt({\n    heap: 0 ? wasm.memory : wasm.heap8u,\n    alloc: wasm.alloc,\n    dealloc: wasm.dealloc,\n    bigIntEnabled: wasm.bigIntEnabled,\n    memberPrefix: /* Never change this: this prefix is baked into any\n                     amount of code and client-facing docs. */ '$'\n  });\n  delete globalThis.Jaccwabyt;\n\n  {// wasm.xWrap() bindings...\n\n    /* Convert Arrays and certain TypedArrays to strings for\n       'string:flexible'-type arguments */\n    const __xString = wasm.xWrap.argAdapter('string');\n    wasm.xWrap.argAdapter(\n      'string:flexible', (v)=>__xString(util.flexibleString(v))\n    );\n\n    /**\n       The 'string:static' argument adapter treats its argument as\n       either...\n\n       - WASM pointer: assumed to be a long-lived C-string which gets\n         returned as-is.\n\n       - Anything else: gets coerced to a JS string for use as a map\n         key. If a matching entry is found (as described next), it is\n         returned, else wasm.allocCString() is used to create a a new\n         string, map its pointer to (''+v) for the remainder of the\n         application's life, and returns that pointer value for this\n         call and all future calls which are passed a\n         string-equivalent argument.\n\n       Use case: sqlite3_bind_pointer() and sqlite3_result_pointer()\n       call for \"a static string and preferably a string\n       literal\". This converter is used to ensure that the string\n       value seen by those functions is long-lived and behaves as they\n       need it to.\n    */\n    wasm.xWrap.argAdapter(\n      'string:static',\n      function(v){\n        if(wasm.isPtr(v)) return v;\n        v = ''+v;\n        let rc = this[v];\n        return rc || (this[v] = wasm.allocCString(v));\n      }.bind(Object.create(null))\n    );\n\n    /**\n       Add some descriptive xWrap() aliases for '*' intended to (A)\n       initially improve readability/correctness of\n       wasm.bindingSignatures and (B) provide automatic conversion\n       from higher-level representations, e.g. capi.sqlite3_vfs to\n       `sqlite3_vfs*` via capi.sqlite3_vfs.pointer.\n    */\n    const __xArgPtr = wasm.xWrap.argAdapter('*');\n    const nilType = function(){}/*a class no value can ever be an instance of*/;\n    wasm.xWrap.argAdapter('sqlite3_filename', __xArgPtr)\n    ('sqlite3_context*', __xArgPtr)\n    ('sqlite3_value*', __xArgPtr)\n    ('void*', __xArgPtr)\n    ('sqlite3_changegroup*', __xArgPtr)\n    ('sqlite3_changeset_iter*', __xArgPtr)\n    //('sqlite3_rebaser*', __xArgPtr)\n    ('sqlite3_session*', __xArgPtr)\n    ('sqlite3_stmt*', (v)=>\n      __xArgPtr((v instanceof (sqlite3?.oo1?.Stmt || nilType))\n           ? v.pointer : v))\n    ('sqlite3*', (v)=>\n      __xArgPtr((v instanceof (sqlite3?.oo1?.DB || nilType))\n           ? v.pointer : v))\n    ('sqlite3_index_info*', (v)=>\n      __xArgPtr((v instanceof (capi.sqlite3_index_info || nilType))\n           ? v.pointer : v))\n    ('sqlite3_module*', (v)=>\n      __xArgPtr((v instanceof (capi.sqlite3_module || nilType))\n           ? v.pointer : v))\n    /**\n       `sqlite3_vfs*`:\n\n       - v is-a string: use the result of sqlite3_vfs_find(v) but\n         throw if it returns 0.\n       - v is-a capi.sqlite3_vfs: use v.pointer.\n       - Else return the same as the `'*'` argument conversion.\n    */\n    ('sqlite3_vfs*', (v)=>{\n      if('string'===typeof v){\n        /* A NULL sqlite3_vfs pointer will be treated as the default\n           VFS in many contexts. We specifically do not want that\n           behavior here. */\n        return capi.sqlite3_vfs_find(v)\n          || sqlite3.SQLite3Error.toss(\n            capi.SQLITE_NOTFOUND,\n            \"Unknown sqlite3_vfs name:\", v\n          );\n      }\n      return __xArgPtr((v instanceof (capi.sqlite3_vfs || nilType))\n                       ? v.pointer : v);\n    });\n\n    const __xRcPtr = wasm.xWrap.resultAdapter('*');\n    wasm.xWrap.resultAdapter('sqlite3*', __xRcPtr)\n    ('sqlite3_context*', __xRcPtr)\n    ('sqlite3_stmt*', __xRcPtr)\n    ('sqlite3_value*', __xRcPtr)\n    ('sqlite3_vfs*', __xRcPtr)\n    ('void*', __xRcPtr);\n\n    /**\n       Populate api object with sqlite3_...() by binding the \"raw\" wasm\n       exports into type-converting proxies using wasm.xWrap().\n    */\n    for(const e of wasm.bindingSignatures){\n      capi[e[0]] = wasm.xWrap.apply(null, e);\n    }\n    for(const e of wasm.bindingSignatures.wasm){\n      wasm[e[0]] = wasm.xWrap.apply(null, e);\n    }\n\n    /* For C API functions which cannot work properly unless\n       wasm.bigIntEnabled is true, install a bogus impl which throws\n       if called when bigIntEnabled is false. The alternative would be\n       to elide these functions altogether, which seems likely to\n       cause more confusion. */\n    const fI64Disabled = function(fname){\n      return ()=>toss(fname+\"() is unavailable due to lack\",\n                      \"of BigInt support in this build.\");\n    };\n    for(const e of wasm.bindingSignatures.int64){\n      capi[e[0]] = wasm.bigIntEnabled\n        ? wasm.xWrap.apply(null, e)\n        : fI64Disabled(e[0]);\n    }\n\n    /* There's no need to expose bindingSignatures to clients,\n       implicitly making it part of the public interface. */\n    delete wasm.bindingSignatures;\n\n    if(wasm.exports.sqlite3_wasm_db_error){\n      const __db_err = wasm.xWrap(\n        'sqlite3_wasm_db_error', 'int', 'sqlite3*', 'int', 'string'\n      );\n      /**\n         Sets the given db's error state. Accepts:\n\n         - (sqlite3*, int code, string msg)\n         - (sqlite3*, Error e [,string msg = ''+e])\n\n         If passed a WasmAllocError, the message is ignored and the\n         result code is SQLITE_NOMEM. If passed any other Error type,\n         the result code defaults to SQLITE_ERROR unless the Error\n         object has a resultCode property, in which case that is used\n         (e.g. SQLite3Error has that). If passed a non-WasmAllocError\n         exception, the message string defaults to theError.message.\n\n         Returns the resulting code. Pass (pDb,0,0) to clear the error\n         state.\n       */\n      util.sqlite3_wasm_db_error = function(pDb, resultCode, message){\n        if(resultCode instanceof sqlite3.WasmAllocError){\n          resultCode = capi.SQLITE_NOMEM;\n          message = 0 /*avoid allocating message string*/;\n        }else if(resultCode instanceof Error){\n          message = message || ''+resultCode;\n          resultCode = (resultCode.resultCode || capi.SQLITE_ERROR);\n        }\n        return pDb ? __db_err(pDb, resultCode, message) : resultCode;\n      };\n    }else{\n      util.sqlite3_wasm_db_error = function(pDb,errCode,msg){\n        console.warn(\"sqlite3_wasm_db_error() is not exported.\",arguments);\n        return errCode;\n      };\n    }\n  }/*xWrap() bindings*/\n\n  {/* Import C-level constants and structs... */\n    const cJson = wasm.xCall('sqlite3_wasm_enum_json');\n    if(!cJson){\n      toss(\"Maintenance required: increase sqlite3_wasm_enum_json()'s\",\n           \"static buffer size!\");\n    }\n    //console.debug('wasm.ctype length =',wasm.cstrlen(cJson));\n    wasm.ctype = JSON.parse(wasm.cstrToJs(cJson));\n    // Groups of SQLITE_xyz macros...\n    const defineGroups = ['access', 'authorizer',\n                          'blobFinalizers', 'changeset',\n                          'config', 'dataTypes',\n                          'dbConfig', 'dbStatus',\n                          'encodings', 'fcntl', 'flock', 'ioCap',\n                          'limits', 'openFlags',\n                          'prepareFlags', 'resultCodes',\n                          'sqlite3Status',\n                          'stmtStatus', 'syncFlags',\n                          'trace', 'txnState', 'udfFlags',\n                          'version' ];\n    if(wasm.bigIntEnabled){\n      defineGroups.push('serialize', 'session', 'vtab');\n    }\n    for(const t of defineGroups){\n      for(const e of Object.entries(wasm.ctype[t])){\n        // ^^^ [k,v] there triggers a buggy code transformation via\n        // one of the Emscripten-driven optimizers.\n        capi[e[0]] = e[1];\n      }\n    }\n    if(!wasm.functionEntry(capi.SQLITE_WASM_DEALLOC)){\n      toss(\"Internal error: cannot resolve exported function\",\n           \"entry SQLITE_WASM_DEALLOC (==\"+capi.SQLITE_WASM_DEALLOC+\").\");\n    }\n    const __rcMap = Object.create(null);\n    for(const t of ['resultCodes']){\n      for(const e of Object.entries(wasm.ctype[t])){\n        __rcMap[e[1]] = e[0];\n      }\n    }\n    /**\n       For the given integer, returns the SQLITE_xxx result code as a\n       string, or undefined if no such mapping is found.\n    */\n    capi.sqlite3_js_rc_str = (rc)=>__rcMap[rc];\n    /* Bind all registered C-side structs... */\n    const notThese = Object.assign(Object.create(null),{\n      // For each struct to NOT register, map its name to true:\n      WasmTestStruct: true,\n      /* We unregister the kvvfs VFS from Worker threads below. */\n      sqlite3_kvvfs_methods: !util.isUIThread(),\n      /* sqlite3_index_info and friends require int64: */\n      sqlite3_index_info: !wasm.bigIntEnabled,\n      sqlite3_index_constraint: !wasm.bigIntEnabled,\n      sqlite3_index_orderby: !wasm.bigIntEnabled,\n      sqlite3_index_constraint_usage: !wasm.bigIntEnabled\n    });\n    for(const s of wasm.ctype.structs){\n      if(!notThese[s.name]){\n        capi[s.name] = sqlite3.StructBinder(s);\n      }\n    }\n    if(capi.sqlite3_index_info){\n      /* Move these inner structs into sqlite3_index_info.  Binding\n      ** them to WASM requires that we create global-scope structs to\n      ** model them with, but those are no longer needed after we've\n      ** passed them to StructBinder. */\n      for(const k of ['sqlite3_index_constraint',\n                      'sqlite3_index_orderby',\n                      'sqlite3_index_constraint_usage']){\n        capi.sqlite3_index_info[k] = capi[k];\n        delete capi[k];\n      }\n      capi.sqlite3_vtab_config = wasm.xWrap(\n        'sqlite3_wasm_vtab_config','int',[\n          'sqlite3*', 'int', 'int']\n      );\n    }/* end vtab-related setup */\n  }/*end C constant and struct imports*/\n\n  /**\n     Internal helper to assist in validating call argument counts in\n     the hand-written sqlite3_xyz() wrappers. We do this only for\n     consistency with non-special-case wrappings.\n  */\n  const __dbArgcMismatch = (pDb,f,n)=>{\n    return sqlite3.util.sqlite3_wasm_db_error(pDb, capi.SQLITE_MISUSE,\n                                              f+\"() requires \"+n+\" argument\"+\n                                              (1===n?\"\":'s')+\".\");\n  };\n\n  /** Code duplication reducer for functions which take an encoding\n      argument and require SQLITE_UTF8.  Sets the db error code to\n      SQLITE_FORMAT and returns that code. */\n  const __errEncoding = (pDb)=>{\n    return util.sqlite3_wasm_db_error(\n      pDb, capi.SQLITE_FORMAT, \"SQLITE_UTF8 is the only supported encoding.\"\n    );\n  };\n\n  /**\n     __dbCleanupMap is infrastructure for recording registration of\n     UDFs and collations so that sqlite3_close_v2() can clean up any\n     automated JS-to-WASM function conversions installed by those.\n  */\n  const __argPDb = (pDb)=>wasm.xWrap.argAdapter('sqlite3*')(pDb);\n  const __argStr = (str)=>wasm.isPtr(str) ? wasm.cstrToJs(str) : str;\n  const __dbCleanupMap = function(\n    pDb, mode/*0=remove, >0=create if needed, <0=do not create if missing*/\n  ){\n    pDb = __argPDb(pDb);\n    let m = this.dbMap.get(pDb);\n    if(!mode){\n      this.dbMap.delete(pDb);\n      return m;\n    }else if(!m && mode>0){\n      this.dbMap.set(pDb, (m = Object.create(null)));\n    }\n    return m;\n  }.bind(Object.assign(Object.create(null),{\n    dbMap: new Map\n  }));\n\n  __dbCleanupMap.addCollation = function(pDb, name){\n    const m = __dbCleanupMap(pDb, 1);\n    if(!m.collation) m.collation = new Set;\n    m.collation.add(__argStr(name).toLowerCase());\n  };\n\n  __dbCleanupMap._addUDF = function(pDb, name, arity, map){\n    /* Map UDF name to a Set of arity values */\n    name = __argStr(name).toLowerCase();\n    let u = map.get(name);\n    if(!u) map.set(name, (u = new Set));\n    u.add((arity<0) ? -1 : arity);\n  };\n\n  __dbCleanupMap.addFunction = function(pDb, name, arity){\n    const m = __dbCleanupMap(pDb, 1);\n    if(!m.udf) m.udf = new Map;\n    this._addUDF(pDb, name, arity, m.udf);\n  };\n\n  __dbCleanupMap.addWindowFunc = function(pDb, name, arity){\n    const m = __dbCleanupMap(pDb, 1);\n    if(!m.wudf) m.wudf = new Map;\n    this._addUDF(pDb, name, arity, m.wudf);\n  };\n\n  /**\n     Intended to be called _only_ from sqlite3_close_v2(),\n     passed its non-0 db argument.\n\n     This function frees up certain automatically-installed WASM\n     function bindings which were installed on behalf of the given db,\n     as those may otherwise leak.\n\n     Notable caveat: this is only ever run via\n     sqlite3.capi.sqlite3_close_v2(). If a client, for whatever\n     reason, uses sqlite3.wasm.exports.sqlite3_close_v2() (the\n     function directly exported from WASM), this cleanup will not\n     happen.\n\n     This is not a silver bullet for avoiding automation-related\n     leaks but represents \"an honest effort.\"\n\n     The issue being addressed here is covered at:\n\n     https://sqlite.org/wasm/doc/trunk/api-c-style.md#convert-func-ptr\n  */\n  __dbCleanupMap.cleanup = function(pDb){\n    pDb = __argPDb(pDb);\n    //wasm.xWrap.FuncPtrAdapter.debugFuncInstall = false;\n    /**\n       Installing NULL functions in the C API will remove those\n       bindings. The FuncPtrAdapter which sits between us and the C\n       API will also treat that as an opportunity to\n       wasm.uninstallFunction() any WASM function bindings it has\n       installed for pDb.\n    */\n    const closeArgs = [pDb];\n    for(const name of [\n      'sqlite3_busy_handler',\n      'sqlite3_commit_hook',\n      'sqlite3_preupdate_hook',\n      'sqlite3_progress_handler',\n      'sqlite3_rollback_hook',\n      'sqlite3_set_authorizer',\n      'sqlite3_trace_v2',\n      'sqlite3_update_hook'\n    ]) {\n      const x = wasm.exports[name];\n      closeArgs.length = x.length/*==argument count*/\n      /* recall that undefined entries translate to 0 when passed to\n         WASM. */;\n      try{ capi[name](...closeArgs) }\n      catch(e){\n        console.warn(\"close-time call of\",name+\"(\",closeArgs,\") threw:\",e);\n      }\n    }\n    const m = __dbCleanupMap(pDb, 0);\n    if(!m) return;\n    if(m.collation){\n      for(const name of m.collation){\n        try{\n          capi.sqlite3_create_collation_v2(\n            pDb, name, capi.SQLITE_UTF8, 0, 0, 0\n          );\n        }catch(e){\n          /*ignored*/\n        }\n      }\n      delete m.collation;\n    }\n    let i;\n    for(i = 0; i < 2; ++i){ /* Clean up UDFs... */\n      const fmap = i ? m.wudf : m.udf;\n      if(!fmap) continue;\n      const func = i\n            ? capi.sqlite3_create_window_function\n            : capi.sqlite3_create_function_v2;\n      for(const e of fmap){\n        const name = e[0], arities = e[1];\n        const fargs = [pDb, name, 0/*arity*/, capi.SQLITE_UTF8, 0, 0, 0, 0, 0];\n        if(i) fargs.push(0);\n        for(const arity of arities){\n          try{ fargs[2] = arity; func.apply(null, fargs); }\n          catch(e){/*ignored*/}\n        }\n        arities.clear();\n      }\n      fmap.clear();\n    }\n    delete m.udf;\n    delete m.wudf;\n  }/*__dbCleanupMap.cleanup()*/;\n\n  {/* Binding of sqlite3_close_v2() */\n    const __sqlite3CloseV2 = wasm.xWrap(\"sqlite3_close_v2\", \"int\", \"sqlite3*\");\n    capi.sqlite3_close_v2 = function(pDb){\n      if(1!==arguments.length) return __dbArgcMismatch(pDb, 'sqlite3_close_v2', 1);\n      if(pDb){\n        try{__dbCleanupMap.cleanup(pDb)} catch(e){/*ignored*/}\n      }\n      return __sqlite3CloseV2(pDb);\n    };\n  }/*sqlite3_close_v2()*/\n\n  if(capi.sqlite3session_table_filter){\n    const __sqlite3SessionDelete = wasm.xWrap(\n      'sqlite3session_delete', undefined, ['sqlite3_session*']\n    );\n    capi.sqlite3session_delete = function(pSession){\n      if(1!==arguments.length){\n        return __dbArgcMismatch(pDb, 'sqlite3session_delete', 1);\n        /* Yes, we're returning a value from a void function. That seems\n           like the lesser evil compared to not maintaining arg-count\n           consistency as we do with other similar bindings. */\n      }\n      else if(pSession){\n        //wasm.xWrap.FuncPtrAdapter.debugFuncInstall = true;\n        capi.sqlite3session_table_filter(pSession, 0, 0);\n      }\n      __sqlite3SessionDelete(pSession);\n    };\n  }\n\n  {/* Bindings for sqlite3_create_collation[_v2]() */\n    // contextKey() impl for wasm.xWrap.FuncPtrAdapter\n    const contextKey = (argv,argIndex)=>{\n      return 'argv['+argIndex+']:'+argv[0/* sqlite3* */]+\n        ':'+wasm.cstrToJs(argv[1/* collation name */]).toLowerCase()\n    };\n    const __sqlite3CreateCollationV2 = wasm.xWrap(\n      'sqlite3_create_collation_v2', 'int', [\n        'sqlite3*', 'string', 'int', '*',\n        new wasm.xWrap.FuncPtrAdapter({\n          /* int(*xCompare)(void*,int,const void*,int,const void*) */\n          name: 'xCompare', signature: 'i(pipip)', contextKey\n        }),\n        new wasm.xWrap.FuncPtrAdapter({\n          /* void(*xDestroy(void*) */\n          name: 'xDestroy', signature: 'v(p)', contextKey\n        })\n      ]\n    );\n\n    /**\n       Works exactly like C's sqlite3_create_collation_v2() except that:\n\n       1) It returns capi.SQLITE_FORMAT if the 3rd argument contains\n          any encoding-related value other than capi.SQLITE_UTF8.  No\n          other encodings are supported. As a special case, if the\n          bottom 4 bits of that argument are 0, SQLITE_UTF8 is\n          assumed.\n\n       2) It accepts JS functions for its function-pointer arguments,\n          for which it will install WASM-bound proxies. The bindings\n          are \"permanent,\" in that they will stay in the WASM environment\n          until it shuts down unless the client calls this again with the\n          same collation name and a value of 0 or null for the\n          the function pointer(s).\n\n       For consistency with the C API, it requires the same number of\n       arguments. It returns capi.SQLITE_MISUSE if passed any other\n       argument count.\n\n       Returns 0 on success, non-0 on error, in which case the error\n       state of pDb (of type `sqlite3*` or argument-convertible to it)\n       may contain more information.\n    */\n    capi.sqlite3_create_collation_v2 = function(pDb,zName,eTextRep,pArg,xCompare,xDestroy){\n      if(6!==arguments.length) return __dbArgcMismatch(pDb, 'sqlite3_create_collation_v2', 6);\n      else if( 0 === (eTextRep & 0xf) ){\n        eTextRep |= capi.SQLITE_UTF8;\n      }else if( capi.SQLITE_UTF8 !== (eTextRep & 0xf) ){\n        return __errEncoding(pDb);\n      }\n      try{\n        const rc = __sqlite3CreateCollationV2(pDb, zName, eTextRep, pArg, xCompare, xDestroy);\n        if(0===rc && xCompare instanceof Function){\n          __dbCleanupMap.addCollation(pDb, zName);\n        }\n        return rc;\n      }catch(e){\n        return util.sqlite3_wasm_db_error(pDb, e);\n      }\n    };\n\n    capi.sqlite3_create_collation = (pDb,zName,eTextRep,pArg,xCompare)=>{\n      return (5===arguments.length)\n        ? capi.sqlite3_create_collation_v2(pDb,zName,eTextRep,pArg,xCompare,0)\n        : __dbArgcMismatch(pDb, 'sqlite3_create_collation', 5);\n    };\n\n  }/*sqlite3_create_collation() and friends*/\n\n  {/* Special-case handling of sqlite3_create_function_v2()\n      and sqlite3_create_window_function(). */\n    /** FuncPtrAdapter for contextKey() for sqlite3_create_function()\n        and friends. */\n    const contextKey = function(argv,argIndex){\n      return (\n        argv[0/* sqlite3* */]\n          +':'+(argv[2/*number of UDF args*/] < 0 ? -1 : argv[2])\n          +':'+argIndex/*distinct for each xAbc callback type*/\n          +':'+wasm.cstrToJs(argv[1]).toLowerCase()\n      )\n    };\n\n    /**\n       JS proxies for the various sqlite3_create[_window]_function()\n       callbacks, structured in a form usable by wasm.xWrap.FuncPtrAdapter.\n    */\n    const __cfProxy = Object.assign(Object.create(null), {\n      xInverseAndStep: {\n        signature:'v(pip)', contextKey,\n        callProxy: (callback)=>{\n          return (pCtx, argc, pArgv)=>{\n            try{ callback(pCtx, ...capi.sqlite3_values_to_js(argc, pArgv)) }\n            catch(e){ capi.sqlite3_result_error_js(pCtx, e) }\n          };\n        }\n      },\n      xFinalAndValue: {\n        signature:'v(p)', contextKey,\n        callProxy: (callback)=>{\n          return (pCtx)=>{\n            try{ capi.sqlite3_result_js(pCtx, callback(pCtx)) }\n            catch(e){ capi.sqlite3_result_error_js(pCtx, e) }\n          };\n        }\n      },\n      xFunc: {\n        signature:'v(pip)', contextKey,\n        callProxy: (callback)=>{\n          return (pCtx, argc, pArgv)=>{\n            try{\n              capi.sqlite3_result_js(\n                pCtx,\n                callback(pCtx, ...capi.sqlite3_values_to_js(argc, pArgv))\n              );\n            }catch(e){\n              //console.error('xFunc() caught:',e);\n              capi.sqlite3_result_error_js(pCtx, e);\n            }\n          };\n        }\n      },\n      xDestroy: {\n        signature:'v(p)', contextKey,\n        //Arguable: a well-behaved destructor doesn't require a proxy.\n        callProxy: (callback)=>{\n          return (pVoid)=>{\n            try{ callback(pVoid) }\n            catch(e){ console.error(\"UDF xDestroy method threw:\",e) }\n          };\n        }\n      }\n    })/*__cfProxy*/;\n\n    const __sqlite3CreateFunction = wasm.xWrap(\n      \"sqlite3_create_function_v2\", \"int\", [\n        \"sqlite3*\", \"string\"/*funcName*/, \"int\"/*nArg*/,\n        \"int\"/*eTextRep*/, \"*\"/*pApp*/,\n        new wasm.xWrap.FuncPtrAdapter({name: 'xFunc', ...__cfProxy.xFunc}),\n        new wasm.xWrap.FuncPtrAdapter({name: 'xStep', ...__cfProxy.xInverseAndStep}),\n        new wasm.xWrap.FuncPtrAdapter({name: 'xFinal', ...__cfProxy.xFinalAndValue}),\n        new wasm.xWrap.FuncPtrAdapter({name: 'xDestroy', ...__cfProxy.xDestroy})\n      ]\n    );\n\n    const __sqlite3CreateWindowFunction = wasm.xWrap(\n      \"sqlite3_create_window_function\", \"int\", [\n        \"sqlite3*\", \"string\"/*funcName*/, \"int\"/*nArg*/,\n        \"int\"/*eTextRep*/, \"*\"/*pApp*/,\n        new wasm.xWrap.FuncPtrAdapter({name: 'xStep', ...__cfProxy.xInverseAndStep}),\n        new wasm.xWrap.FuncPtrAdapter({name: 'xFinal', ...__cfProxy.xFinalAndValue}),\n        new wasm.xWrap.FuncPtrAdapter({name: 'xValue', ...__cfProxy.xFinalAndValue}),\n        new wasm.xWrap.FuncPtrAdapter({name: 'xInverse', ...__cfProxy.xInverseAndStep}),\n        new wasm.xWrap.FuncPtrAdapter({name: 'xDestroy', ...__cfProxy.xDestroy})\n      ]\n    );\n\n    /* Documented in the api object's initializer. */\n    capi.sqlite3_create_function_v2 = function f(\n      pDb, funcName, nArg, eTextRep, pApp,\n      xFunc,   //void (*xFunc)(sqlite3_context*,int,sqlite3_value**)\n      xStep,   //void (*xStep)(sqlite3_context*,int,sqlite3_value**)\n      xFinal,  //void (*xFinal)(sqlite3_context*)\n      xDestroy //void (*xDestroy)(void*)\n    ){\n      if( f.length!==arguments.length ){\n        return __dbArgcMismatch(pDb,\"sqlite3_create_function_v2\",f.length);\n      }else if( 0 === (eTextRep & 0xf) ){\n        eTextRep |= capi.SQLITE_UTF8;\n      }else if( capi.SQLITE_UTF8 !== (eTextRep & 0xf) ){\n        return __errEncoding(pDb);\n      }\n      try{\n        const rc = __sqlite3CreateFunction(pDb, funcName, nArg, eTextRep,\n                                           pApp, xFunc, xStep, xFinal, xDestroy);\n        if(0===rc && (xFunc instanceof Function\n                      || xStep instanceof Function\n                      || xFinal instanceof Function\n                      || xDestroy instanceof Function)){\n          __dbCleanupMap.addFunction(pDb, funcName, nArg);\n        }\n        return rc;\n      }catch(e){\n        console.error(\"sqlite3_create_function_v2() setup threw:\",e);\n        return util.sqlite3_wasm_db_error(pDb, e, \"Creation of UDF threw: \"+e);\n      }\n    };\n\n    /* Documented in the api object's initializer. */\n    capi.sqlite3_create_function = function f(\n      pDb, funcName, nArg, eTextRep, pApp,\n      xFunc, xStep, xFinal\n    ){\n      return (f.length===arguments.length)\n        ? capi.sqlite3_create_function_v2(pDb, funcName, nArg, eTextRep,\n                                          pApp, xFunc, xStep, xFinal, 0)\n        : __dbArgcMismatch(pDb,\"sqlite3_create_function\",f.length);\n    };\n\n    /* Documented in the api object's initializer. */\n    capi.sqlite3_create_window_function = function f(\n      pDb, funcName, nArg, eTextRep, pApp,\n      xStep,   //void (*xStep)(sqlite3_context*,int,sqlite3_value**)\n      xFinal,  //void (*xFinal)(sqlite3_context*)\n      xValue,  //void (*xValue)(sqlite3_context*)\n      xInverse,//void (*xInverse)(sqlite3_context*,int,sqlite3_value**)\n      xDestroy //void (*xDestroy)(void*)\n    ){\n      if( f.length!==arguments.length ){\n        return __dbArgcMismatch(pDb,\"sqlite3_create_window_function\",f.length);\n      }else if( 0 === (eTextRep & 0xf) ){\n        eTextRep |= capi.SQLITE_UTF8;\n      }else if( capi.SQLITE_UTF8 !== (eTextRep & 0xf) ){\n        return __errEncoding(pDb);\n      }\n      try{\n        const rc = __sqlite3CreateWindowFunction(pDb, funcName, nArg, eTextRep,\n                                                 pApp, xStep, xFinal, xValue,\n                                                 xInverse, xDestroy);\n        if(0===rc && (xStep instanceof Function\n                      || xFinal instanceof Function\n                      || xValue instanceof Function\n                      || xInverse instanceof Function\n                      || xDestroy instanceof Function)){\n          __dbCleanupMap.addWindowFunc(pDb, funcName, nArg);\n        }\n        return rc;\n      }catch(e){\n        console.error(\"sqlite3_create_window_function() setup threw:\",e);\n        return util.sqlite3_wasm_db_error(pDb, e, \"Creation of UDF threw: \"+e);\n      }\n    };\n    /**\n       A _deprecated_ alias for capi.sqlite3_result_js() which\n       predates the addition of that function in the public API.\n    */\n    capi.sqlite3_create_function_v2.udfSetResult =\n      capi.sqlite3_create_function.udfSetResult =\n      capi.sqlite3_create_window_function.udfSetResult = capi.sqlite3_result_js;\n\n    /**\n       A _deprecated_ alias for capi.sqlite3_values_to_js() which\n       predates the addition of that function in the public API.\n    */\n    capi.sqlite3_create_function_v2.udfConvertArgs =\n      capi.sqlite3_create_function.udfConvertArgs =\n      capi.sqlite3_create_window_function.udfConvertArgs = capi.sqlite3_values_to_js;\n\n    /**\n       A _deprecated_ alias for capi.sqlite3_result_error_js() which\n       predates the addition of that function in the public API.\n    */\n    capi.sqlite3_create_function_v2.udfSetError =\n      capi.sqlite3_create_function.udfSetError =\n      capi.sqlite3_create_window_function.udfSetError = capi.sqlite3_result_error_js;\n\n  }/*sqlite3_create_function_v2() and sqlite3_create_window_function() proxies*/;\n\n  {/* Special-case handling of sqlite3_prepare_v2() and\n      sqlite3_prepare_v3() */\n\n    /**\n       Helper for string:flexible conversions which require a\n       byte-length counterpart argument. Passed a value and its\n       ostensible length, this function returns [V,N], where V is\n       either v or a transformed copy of v and N is either n, -1, or\n       the byte length of v (if it's a byte array or ArrayBuffer).\n    */\n    const __flexiString = (v,n)=>{\n      if('string'===typeof v){\n        n = -1;\n      }else if(util.isSQLableTypedArray(v)){\n        n = v.byteLength;\n        v = util.typedArrayToString(\n          (v instanceof ArrayBuffer) ? new Uint8Array(v) : v\n        );\n      }else if(Array.isArray(v)){\n        v = v.join(\"\");\n        n = -1;\n      }\n      return [v, n];\n    };\n\n    /**\n       Scope-local holder of the two impls of sqlite3_prepare_v2/v3().\n    */\n    const __prepare = {\n      /**\n         This binding expects a JS string as its 2nd argument and\n         null as its final argument. In order to compile multiple\n         statements from a single string, the \"full\" impl (see\n         below) must be used.\n      */\n      basic: wasm.xWrap('sqlite3_prepare_v3',\n                        \"int\", [\"sqlite3*\", \"string\",\n                                \"int\"/*ignored for this impl!*/,\n                                \"int\", \"**\",\n                                \"**\"/*MUST be 0 or null or undefined!*/]),\n      /**\n         Impl which requires that the 2nd argument be a pointer\n         to the SQL string, instead of being converted to a\n         string. This variant is necessary for cases where we\n         require a non-NULL value for the final argument\n         (exec()'ing multiple statements from one input\n         string). For simpler cases, where only the first\n         statement in the SQL string is required, the wrapper\n         named sqlite3_prepare_v2() is sufficient and easier to\n         use because it doesn't require dealing with pointers.\n      */\n      full: wasm.xWrap('sqlite3_prepare_v3',\n                       \"int\", [\"sqlite3*\", \"*\", \"int\", \"int\",\n                               \"**\", \"**\"])\n    };\n\n    /* Documented in the capi object's initializer. */\n    capi.sqlite3_prepare_v3 = function f(pDb, sql, sqlLen, prepFlags, ppStmt, pzTail){\n      if(f.length!==arguments.length){\n        return __dbArgcMismatch(pDb,\"sqlite3_prepare_v3\",f.length);\n      }\n      const [xSql, xSqlLen] = __flexiString(sql, sqlLen);\n      switch(typeof xSql){\n          case 'string': return __prepare.basic(pDb, xSql, xSqlLen, prepFlags, ppStmt, null);\n          case 'number': return __prepare.full(pDb, xSql, xSqlLen, prepFlags, ppStmt, pzTail);\n          default:\n            return util.sqlite3_wasm_db_error(\n              pDb, capi.SQLITE_MISUSE,\n              \"Invalid SQL argument type for sqlite3_prepare_v2/v3().\"\n            );\n      }\n    };\n\n    /* Documented in the capi object's initializer. */\n    capi.sqlite3_prepare_v2 = function f(pDb, sql, sqlLen, ppStmt, pzTail){\n      return (f.length===arguments.length)\n        ? capi.sqlite3_prepare_v3(pDb, sql, sqlLen, 0, ppStmt, pzTail)\n        : __dbArgcMismatch(pDb,\"sqlite3_prepare_v2\",f.length);\n    };\n\n  }/*sqlite3_prepare_v2/v3()*/\n\n  {/*sqlite3_bind_text/blob()*/\n    const __bindText = wasm.xWrap(\"sqlite3_bind_text\", \"int\", [\n      \"sqlite3_stmt*\", \"int\", \"string\", \"int\", \"*\"\n    ]);\n    const __bindBlob = wasm.xWrap(\"sqlite3_bind_blob\", \"int\", [\n      \"sqlite3_stmt*\", \"int\", \"*\", \"int\", \"*\"\n    ]);\n\n    /** Documented in the capi object's initializer. */\n    capi.sqlite3_bind_text = function f(pStmt, iCol, text, nText, xDestroy){\n      if(f.length!==arguments.length){\n        return __dbArgcMismatch(capi.sqlite3_db_handle(pStmt),\n                                \"sqlite3_bind_text\", f.length);\n      }else if(wasm.isPtr(text) || null===text){\n        return __bindText(pStmt, iCol, text, nText, xDestroy);\n      }else if(text instanceof ArrayBuffer){\n        text = new Uint8Array(text);\n      }else if(Array.isArray(pMem)){\n        text = pMem.join('');\n      }\n      let p, n;\n      try{\n        if(util.isSQLableTypedArray(text)){\n          p = wasm.allocFromTypedArray(text);\n          n = text.byteLength;\n        }else if('string'===typeof text){\n          [p, n] = wasm.allocCString(text);\n        }else{\n          return util.sqlite3_wasm_db_error(\n            capi.sqlite3_db_handle(pStmt), capi.SQLITE_MISUSE,\n            \"Invalid 3rd argument type for sqlite3_bind_text().\"\n          );\n        }\n        return __bindText(pStmt, iCol, p, n, capi.SQLITE_WASM_DEALLOC);\n      }catch(e){\n        wasm.dealloc(p);\n        return util.sqlite3_wasm_db_error(\n          capi.sqlite3_db_handle(pStmt), e\n        );\n      }\n    }/*sqlite3_bind_text()*/;\n\n    /** Documented in the capi object's initializer. */\n    capi.sqlite3_bind_blob = function f(pStmt, iCol, pMem, nMem, xDestroy){\n      if(f.length!==arguments.length){\n        return __dbArgcMismatch(capi.sqlite3_db_handle(pStmt),\n                                \"sqlite3_bind_blob\", f.length);\n      }else if(wasm.isPtr(pMem) || null===pMem){\n        return __bindBlob(pStmt, iCol, pMem, nMem, xDestroy);\n      }else if(pMem instanceof ArrayBuffer){\n        pMem = new Uint8Array(pMem);\n      }else if(Array.isArray(pMem)){\n        pMem = pMem.join('');\n      }\n      let p, n;\n      try{\n        if(util.isBindableTypedArray(pMem)){\n          p = wasm.allocFromTypedArray(pMem);\n          n = nMem>=0 ? nMem : pMem.byteLength;\n        }else if('string'===typeof pMem){\n          [p, n] = wasm.allocCString(pMem);\n        }else{\n          return util.sqlite3_wasm_db_error(\n            capi.sqlite3_db_handle(pStmt), capi.SQLITE_MISUSE,\n            \"Invalid 3rd argument type for sqlite3_bind_blob().\"\n          );\n        }\n        return __bindBlob(pStmt, iCol, p, n, capi.SQLITE_WASM_DEALLOC);\n      }catch(e){\n        wasm.dealloc(p);\n        return util.sqlite3_wasm_db_error(\n          capi.sqlite3_db_handle(pStmt), e\n        );\n      }\n    }/*sqlite3_bind_blob()*/;\n\n  }/*sqlite3_bind_text/blob()*/\n\n  {/* sqlite3_config() */\n    /**\n       Wraps a small subset of the C API's sqlite3_config() options.\n       Unsupported options trigger the return of capi.SQLITE_NOTFOUND.\n       Passing fewer than 2 arguments triggers return of\n       capi.SQLITE_MISUSE.\n    */\n    capi.sqlite3_config = function(op, ...args){\n      if(arguments.length<2) return capi.SQLITE_MISUSE;\n      switch(op){\n          case capi.SQLITE_CONFIG_COVERING_INDEX_SCAN: // 20  /* int */\n          case capi.SQLITE_CONFIG_MEMSTATUS:// 9  /* boolean */\n          case capi.SQLITE_CONFIG_SMALL_MALLOC: // 27  /* boolean */\n          case capi.SQLITE_CONFIG_SORTERREF_SIZE: // 28  /* int nByte */\n          case capi.SQLITE_CONFIG_STMTJRNL_SPILL: // 26  /* int nByte */\n          case capi.SQLITE_CONFIG_URI:// 17  /* int */\n            return wasm.exports.sqlite3_wasm_config_i(op, args[0]);\n          case capi.SQLITE_CONFIG_LOOKASIDE: // 13  /* int int */\n            return wasm.exports.sqlite3_wasm_config_ii(op, args[0], args[1]);\n          case capi.SQLITE_CONFIG_MEMDB_MAXSIZE: // 29  /* sqlite3_int64 */\n            return wasm.exports.sqlite3_wasm_config_j(op, args[0]);\n          case capi.SQLITE_CONFIG_GETMALLOC: // 5 /* sqlite3_mem_methods* */\n          case capi.SQLITE_CONFIG_GETMUTEX: // 11  /* sqlite3_mutex_methods* */\n          case capi.SQLITE_CONFIG_GETPCACHE2: // 19  /* sqlite3_pcache_methods2* */\n          case capi.SQLITE_CONFIG_GETPCACHE: // 15  /* no-op */\n          case capi.SQLITE_CONFIG_HEAP: // 8  /* void*, int nByte, int min */\n          case capi.SQLITE_CONFIG_LOG: // 16  /* xFunc, void* */\n          case capi.SQLITE_CONFIG_MALLOC:// 4  /* sqlite3_mem_methods* */\n          case capi.SQLITE_CONFIG_MMAP_SIZE: // 22  /* sqlite3_int64, sqlite3_int64 */\n          case capi.SQLITE_CONFIG_MULTITHREAD: // 2 /* nil */\n          case capi.SQLITE_CONFIG_MUTEX: // 10  /* sqlite3_mutex_methods* */\n          case capi.SQLITE_CONFIG_PAGECACHE: // 7  /* void*, int sz, int N */\n          case capi.SQLITE_CONFIG_PCACHE2: // 18  /* sqlite3_pcache_methods2* */\n          case capi.SQLITE_CONFIG_PCACHE: // 14  /* no-op */\n          case capi.SQLITE_CONFIG_PCACHE_HDRSZ: // 24  /* int *psz */\n          case capi.SQLITE_CONFIG_PMASZ: // 25  /* unsigned int szPma */\n          case capi.SQLITE_CONFIG_SERIALIZED: // 3 /* nil */\n          case capi.SQLITE_CONFIG_SINGLETHREAD: // 1 /* nil */:\n          case capi.SQLITE_CONFIG_SQLLOG: // 21  /* xSqllog, void* */\n          case capi.SQLITE_CONFIG_WIN32_HEAPSIZE: // 23  /* int nByte */\n          default:\n            return capi.SQLITE_NOTFOUND;\n      }\n    };\n  }/* sqlite3_config() */\n\n  {/*auto-extension bindings.*/\n    const __autoExtFptr = new Set;\n\n    capi.sqlite3_auto_extension = function(fPtr){\n      if( fPtr instanceof Function ){\n        fPtr = wasm.installFunction('i(ppp)', fPtr);\n      }else if( 1!==arguments.length || !wasm.isPtr(fPtr) ){\n        return capi.SQLITE_MISUSE;\n      }\n      const rc = wasm.exports.sqlite3_auto_extension(fPtr);\n      if( fPtr!==arguments[0] ){\n        if(0===rc) __autoExtFptr.add(fPtr);\n        else wasm.uninstallFunction(fPtr);\n      }\n      return rc;\n    };\n\n    capi.sqlite3_cancel_auto_extension = function(fPtr){\n     /* We do not do an automatic JS-to-WASM function conversion here\n        because it would be senseless: the converted pointer would\n        never possibly match an already-installed one. */;\n      if(!fPtr || 1!==arguments.length || !wasm.isPtr(fPtr)) return 0;\n      return wasm.exports.sqlite3_cancel_auto_extension(fPtr);\n      /* Note that it \"cannot happen\" that a client passes a pointer which\n         is in __autoExtFptr because __autoExtFptr only contains automatic\n         conversions created inside sqlite3_auto_extension() and\n         never exposed to the client. */\n    };\n\n    capi.sqlite3_reset_auto_extension = function(){\n      wasm.exports.sqlite3_reset_auto_extension();\n      for(const fp of __autoExtFptr) wasm.uninstallFunction(fp);\n      __autoExtFptr.clear();\n    };\n  }/* auto-extension */\n\n  const pKvvfs = capi.sqlite3_vfs_find(\"kvvfs\");\n  if( pKvvfs ){/* kvvfs-specific glue */\n    if(util.isUIThread()){\n      const kvvfsMethods = new capi.sqlite3_kvvfs_methods(\n        wasm.exports.sqlite3_wasm_kvvfs_methods()\n      );\n      delete capi.sqlite3_kvvfs_methods;\n\n      const kvvfsMakeKey = wasm.exports.sqlite3_wasm_kvvfsMakeKeyOnPstack,\n            pstack = wasm.pstack;\n\n      const kvvfsStorage = (zClass)=>\n            ((115/*=='s'*/===wasm.peek(zClass))\n             ? sessionStorage : localStorage);\n\n      /**\n         Implementations for members of the object referred to by\n         sqlite3_wasm_kvvfs_methods(). We swap out the native\n         implementations with these, which use localStorage or\n         sessionStorage for their backing store.\n      */\n      const kvvfsImpls = {\n        xRead: (zClass, zKey, zBuf, nBuf)=>{\n          const stack = pstack.pointer,\n                astack = wasm.scopedAllocPush();\n          try {\n            const zXKey = kvvfsMakeKey(zClass,zKey);\n            if(!zXKey) return -3/*OOM*/;\n            const jKey = wasm.cstrToJs(zXKey);\n            const jV = kvvfsStorage(zClass).getItem(jKey);\n            if(!jV) return -1;\n            const nV = jV.length /* Note that we are relying 100% on v being\n                                    ASCII so that jV.length is equal to the\n                                    C-string's byte length. */;\n            if(nBuf<=0) return nV;\n            else if(1===nBuf){\n              wasm.poke(zBuf, 0);\n              return nV;\n            }\n            const zV = wasm.scopedAllocCString(jV);\n            if(nBuf > nV + 1) nBuf = nV + 1;\n            wasm.heap8u().copyWithin(zBuf, zV, zV + nBuf - 1);\n            wasm.poke(zBuf + nBuf - 1, 0);\n            return nBuf - 1;\n          }catch(e){\n            console.error(\"kvstorageRead()\",e);\n            return -2;\n          }finally{\n            pstack.restore(stack);\n            wasm.scopedAllocPop(astack);\n          }\n        },\n        xWrite: (zClass, zKey, zData)=>{\n          const stack = pstack.pointer;\n          try {\n            const zXKey = kvvfsMakeKey(zClass,zKey);\n            if(!zXKey) return 1/*OOM*/;\n            const jKey = wasm.cstrToJs(zXKey);\n            kvvfsStorage(zClass).setItem(jKey, wasm.cstrToJs(zData));\n            return 0;\n          }catch(e){\n            console.error(\"kvstorageWrite()\",e);\n            return capi.SQLITE_IOERR;\n          }finally{\n            pstack.restore(stack);\n          }\n        },\n        xDelete: (zClass, zKey)=>{\n          const stack = pstack.pointer;\n          try {\n            const zXKey = kvvfsMakeKey(zClass,zKey);\n            if(!zXKey) return 1/*OOM*/;\n            kvvfsStorage(zClass).removeItem(wasm.cstrToJs(zXKey));\n            return 0;\n          }catch(e){\n            console.error(\"kvstorageDelete()\",e);\n            return capi.SQLITE_IOERR;\n          }finally{\n            pstack.restore(stack);\n          }\n        }\n      }/*kvvfsImpls*/;\n      for(const k of Object.keys(kvvfsImpls)){\n        kvvfsMethods[kvvfsMethods.memberKey(k)] =\n          wasm.installFunction(\n            kvvfsMethods.memberSignature(k),\n            kvvfsImpls[k]\n          );\n      }\n    }else{\n      /* Worker thread: unregister kvvfs to avoid it being used\n         for anything other than local/sessionStorage. It \"can\"\n         be used that way but it's not really intended to be. */\n      capi.sqlite3_vfs_unregister(pKvvfs);\n    }\n  }/*pKvvfs*/\n\n  wasm.xWrap.FuncPtrAdapter.warnOnUse = true;\n});\n/* END FILE: api/sqlite3-api-glue.js */\n/* BEGIN FILE: ./bld/sqlite3-api-build-version.js */\nglobalThis.sqlite3ApiBootstrap.initializers.push(function(sqlite3){\n  sqlite3.version = {\"libVersion\": \"3.42.0\", \"libVersionNumber\": 3042000, \"sourceId\": \"2023-03-30 12:19:38 8724fe7426da55d19dba7b30e09321ba30c73286513864cb05de32f72e50ee31\",\"downloadVersion\": 3420000};\n});\n/* END FILE: ./bld/sqlite3-api-build-version.js */\n/* BEGIN FILE: api/sqlite3-api-oo1.js */\n/*\n  2022-07-22\n\n  The author disclaims copyright to this source code.  In place of a\n  legal notice, here is a blessing:\n\n  *   May you do good and not evil.\n  *   May you find forgiveness for yourself and forgive others.\n  *   May you share freely, never taking more than you give.\n\n  ***********************************************************************\n\n  This file contains the so-called OO #1 API wrapper for the sqlite3\n  WASM build. It requires that sqlite3-api-glue.js has already run\n  and it installs its deliverable as globalThis.sqlite3.oo1.\n*/\nglobalThis.sqlite3ApiBootstrap.initializers.push(function(sqlite3){\n  const toss = (...args)=>{throw new Error(args.join(' '))};\n  const toss3 = (...args)=>{throw new sqlite3.SQLite3Error(...args)};\n\n  const capi = sqlite3.capi, wasm = sqlite3.wasm, util = sqlite3.util;\n  /* What follows is colloquially known as \"OO API #1\". It is a\n     binding of the sqlite3 API which is designed to be run within\n     the same thread (main or worker) as the one in which the\n     sqlite3 WASM binding was initialized. This wrapper cannot use\n     the sqlite3 binding if, e.g., the wrapper is in the main thread\n     and the sqlite3 API is in a worker. */\n\n  /**\n     In order to keep clients from manipulating, perhaps\n     inadvertently, the underlying pointer values of DB and Stmt\n     instances, we'll gate access to them via the `pointer` property\n     accessor and store their real values in this map. Keys = DB/Stmt\n     objects, values = pointer values. This also unifies how those are\n     accessed, for potential use downstream via custom\n     wasm.xWrap() function signatures which know how to extract\n     it.\n  */\n  const __ptrMap = new WeakMap();\n  /**\n     Map of DB instances to objects, each object being a map of Stmt\n     wasm pointers to Stmt objects.\n  */\n  const __stmtMap = new WeakMap();\n\n  /** If object opts has _its own_ property named p then that\n      property's value is returned, else dflt is returned. */\n  const getOwnOption = (opts, p, dflt)=>{\n    const d = Object.getOwnPropertyDescriptor(opts,p);\n    return d ? d.value : dflt;\n  };\n\n  // Documented in DB.checkRc()\n  const checkSqlite3Rc = function(dbPtr, sqliteResultCode){\n    if(sqliteResultCode){\n      if(dbPtr instanceof DB) dbPtr = dbPtr.pointer;\n      toss3(\n        \"sqlite3 result code\",sqliteResultCode+\":\",\n        (dbPtr\n         ? capi.sqlite3_errmsg(dbPtr)\n         : capi.sqlite3_errstr(sqliteResultCode))\n      );\n    }\n    return arguments[0];\n  };\n\n  /**\n     sqlite3_trace_v2() callback which gets installed by the DB ctor\n     if its open-flags contain \"t\".\n  */\n  const __dbTraceToConsole =\n        wasm.installFunction('i(ippp)', function(t,c,p,x){\n          if(capi.SQLITE_TRACE_STMT===t){\n            // x == SQL, p == sqlite3_stmt*\n            console.log(\"SQL TRACE #\"+(++this.counter)+' via sqlite3@'+c+':',\n                        wasm.cstrToJs(x));\n          }\n        }.bind({counter: 0}));\n\n  /**\n     A map of sqlite3_vfs pointers to SQL code or a callback function\n     to run when the DB constructor opens a database with the given\n     VFS. In the latter case, the call signature is (theDbObject,sqlite3Namespace)\n     and the callback is expected to throw on error.\n  */\n  const __vfsPostOpenSql = Object.create(null);\n\n  /**\n     A proxy for DB class constructors. It must be called with the\n     being-construct DB object as its \"this\". See the DB constructor\n     for the argument docs. This is split into a separate function\n     in order to enable simple creation of special-case DB constructors,\n     e.g. JsStorageDb and OpfsDb.\n\n     Expects to be passed a configuration object with the following\n     properties:\n\n     - `.filename`: the db filename. It may be a special name like \":memory:\"\n       or \"\".\n\n     - `.flags`: as documented in the DB constructor.\n\n     - `.vfs`: as documented in the DB constructor.\n\n     It also accepts those as the first 3 arguments.\n  */\n  const dbCtorHelper = function ctor(...args){\n    if(!ctor._name2vfs){\n      /**\n         Map special filenames which we handle here (instead of in C)\n         to some helpful metadata...\n\n         As of 2022-09-20, the C API supports the names :localStorage:\n         and :sessionStorage: for kvvfs. However, C code cannot\n         determine (without embedded JS code, e.g. via Emscripten's\n         EM_JS()) whether the kvvfs is legal in the current browser\n         context (namely the main UI thread). In order to help client\n         code fail early on, instead of it being delayed until they\n         try to read or write a kvvfs-backed db, we'll check for those\n         names here and throw if they're not legal in the current\n         context.\n      */\n      ctor._name2vfs = Object.create(null);\n      const isWorkerThread = ('function'===typeof importScripts/*===running in worker thread*/)\n            ? (n)=>toss3(\"The VFS for\",n,\"is only available in the main window thread.\")\n            : false;\n      ctor._name2vfs[':localStorage:'] = {\n        vfs: 'kvvfs', filename: isWorkerThread || (()=>'local')\n      };\n      ctor._name2vfs[':sessionStorage:'] = {\n        vfs: 'kvvfs', filename: isWorkerThread || (()=>'session')\n      };\n    }\n    const opt = ctor.normalizeArgs(...args);\n    let fn = opt.filename, vfsName = opt.vfs, flagsStr = opt.flags;\n    if(('string'!==typeof fn && 'number'!==typeof fn)\n       || 'string'!==typeof flagsStr\n       || (vfsName && ('string'!==typeof vfsName && 'number'!==typeof vfsName))){\n      sqlite3.config.error(\"Invalid DB ctor args\",opt,arguments);\n      toss3(\"Invalid arguments for DB constructor.\");\n    }\n    let fnJs = ('number'===typeof fn) ? wasm.cstrToJs(fn) : fn;\n    const vfsCheck = ctor._name2vfs[fnJs];\n    if(vfsCheck){\n      vfsName = vfsCheck.vfs;\n      fn = fnJs = vfsCheck.filename(fnJs);\n    }\n    let pDb, oflags = 0;\n    if( flagsStr.indexOf('c')>=0 ){\n      oflags |= capi.SQLITE_OPEN_CREATE | capi.SQLITE_OPEN_READWRITE;\n    }\n    if( flagsStr.indexOf('w')>=0 ) oflags |= capi.SQLITE_OPEN_READWRITE;\n    if( 0===oflags ) oflags |= capi.SQLITE_OPEN_READONLY;\n    oflags |= capi.SQLITE_OPEN_EXRESCODE;\n    const stack = wasm.pstack.pointer;\n    try {\n      const pPtr = wasm.pstack.allocPtr() /* output (sqlite3**) arg */;\n      let rc = capi.sqlite3_open_v2(fn, pPtr, oflags, vfsName || 0);\n      pDb = wasm.peekPtr(pPtr);\n      checkSqlite3Rc(pDb, rc);\n      capi.sqlite3_extended_result_codes(pDb, 1);\n      if(flagsStr.indexOf('t')>=0){\n        capi.sqlite3_trace_v2(pDb, capi.SQLITE_TRACE_STMT,\n                              __dbTraceToConsole, pDb);\n      }\n    }catch( e ){\n      if( pDb ) capi.sqlite3_close_v2(pDb);\n      throw e;\n    }finally{\n      wasm.pstack.restore(stack);\n    }\n    this.filename = fnJs;\n    __ptrMap.set(this, pDb);\n    __stmtMap.set(this, Object.create(null));\n    try{\n      // Check for per-VFS post-open SQL/callback...\n      const pVfs = capi.sqlite3_js_db_vfs(pDb);\n      if(!pVfs) toss3(\"Internal error: cannot get VFS for new db handle.\");\n      const postInitSql = __vfsPostOpenSql[pVfs];\n      if(postInitSql instanceof Function){\n        postInitSql(this, sqlite3);\n      }else if(postInitSql){\n        checkSqlite3Rc(\n          pDb, capi.sqlite3_exec(pDb, postInitSql, 0, 0, 0)\n        );\n      }\n    }catch(e){\n      this.close();\n      throw e;\n    }\n  };\n\n  /**\n     Sets SQL which should be exec()'d on a DB instance after it is\n     opened with the given VFS pointer. The SQL may be any type\n     supported by the \"string:flexible\" function argument conversion.\n     Alternately, the 2nd argument may be a function, in which case it\n     is called with (theOo1DbObject,sqlite3Namespace) at the end of\n     the DB() constructor. The function must throw on error, in which\n     case the db is closed and the exception is propagated.  This\n     function is intended only for use by DB subclasses or sqlite3_vfs\n     implementations.\n  */\n  dbCtorHelper.setVfsPostOpenSql = function(pVfs, sql){\n    __vfsPostOpenSql[pVfs] = sql;\n  };\n\n  /**\n     A helper for DB constructors. It accepts either a single\n     config-style object or up to 3 arguments (filename, dbOpenFlags,\n     dbVfsName). It returns a new object containing:\n\n     { filename: ..., flags: ..., vfs: ... }\n\n     If passed an object, any additional properties it has are copied\n     as-is into the new object.\n  */\n  dbCtorHelper.normalizeArgs = function(filename=':memory:',flags = 'c',vfs = null){\n    const arg = {};\n    if(1===arguments.length && arguments[0] && 'object'===typeof arguments[0]){\n      Object.assign(arg, arguments[0]);\n      if(undefined===arg.flags) arg.flags = 'c';\n      if(undefined===arg.vfs) arg.vfs = null;\n      if(undefined===arg.filename) arg.filename = ':memory:';\n    }else{\n      arg.filename = filename;\n      arg.flags = flags;\n      arg.vfs = vfs;\n    }\n    return arg;\n  };\n  /**\n     The DB class provides a high-level OO wrapper around an sqlite3\n     db handle.\n\n     The given db filename must be resolvable using whatever\n     filesystem layer (virtual or otherwise) is set up for the default\n     sqlite3 VFS.\n\n     Note that the special sqlite3 db names \":memory:\" and \"\"\n     (temporary db) have their normal special meanings here and need\n     not resolve to real filenames, but \"\" uses an on-storage\n     temporary database and requires that the VFS support that.\n\n     The second argument specifies the open/create mode for the\n     database. It must be string containing a sequence of letters (in\n     any order, but case sensitive) specifying the mode:\n\n     - \"c\": create if it does not exist, else fail if it does not\n       exist. Implies the \"w\" flag.\n\n     - \"w\": write. Implies \"r\": a db cannot be write-only.\n\n     - \"r\": read-only if neither \"w\" nor \"c\" are provided, else it\n       is ignored.\n\n     - \"t\": enable tracing of SQL executed on this database handle,\n       sending it to `console.log()`. To disable it later, call\n       `sqlite3.capi.sqlite3_trace_v2(thisDb.pointer, 0, 0, 0)`.\n\n     If \"w\" is not provided, the db is implicitly read-only, noting\n     that \"rc\" is meaningless\n\n     Any other letters are currently ignored. The default is\n     \"c\". These modes are ignored for the special \":memory:\" and \"\"\n     names and _may_ be ignored altogether for certain VFSes.\n\n     The final argument is analogous to the final argument of\n     sqlite3_open_v2(): the name of an sqlite3 VFS. Pass a falsy value,\n     or none at all, to use the default. If passed a value, it must\n     be the string name of a VFS.\n\n     The constructor optionally (and preferably) takes its arguments\n     in the form of a single configuration object with the following\n     properties:\n\n     - `filename`: database file name\n     - `flags`: open-mode flags\n     - `vfs`: the VFS fname\n\n     The `filename` and `vfs` arguments may be either JS strings or\n     C-strings allocated via WASM. `flags` is required to be a JS\n     string (because it's specific to this API, which is specific\n     to JS).\n\n     For purposes of passing a DB instance to C-style sqlite3\n     functions, the DB object's read-only `pointer` property holds its\n     `sqlite3*` pointer value. That property can also be used to check\n     whether this DB instance is still open.\n\n     In the main window thread, the filenames `\":localStorage:\"` and\n     `\":sessionStorage:\"` are special: they cause the db to use either\n     localStorage or sessionStorage for storing the database using\n     the kvvfs. If one of these names are used, they trump\n     any vfs name set in the arguments.\n  */\n  const DB = function(...args){\n    dbCtorHelper.apply(this, args);\n  };\n  DB.dbCtorHelper = dbCtorHelper;\n\n  /**\n     Internal-use enum for mapping JS types to DB-bindable types.\n     These do not (and need not) line up with the SQLITE_type\n     values. All values in this enum must be truthy and distinct\n     but they need not be numbers.\n  */\n  const BindTypes = {\n    null: 1,\n    number: 2,\n    string: 3,\n    boolean: 4,\n    blob: 5\n  };\n  BindTypes['undefined'] == BindTypes.null;\n  if(wasm.bigIntEnabled){\n    BindTypes.bigint = BindTypes.number;\n  }\n\n  /**\n     This class wraps sqlite3_stmt. Calling this constructor\n     directly will trigger an exception. Use DB.prepare() to create\n     new instances.\n\n     For purposes of passing a Stmt instance to C-style sqlite3\n     functions, its read-only `pointer` property holds its `sqlite3_stmt*`\n     pointer value.\n\n     Other non-function properties include:\n\n     - `db`: the DB object which created the statement.\n\n     - `columnCount`: the number of result columns in the query, or 0 for\n     queries which cannot return results.\n\n     - `parameterCount`: the number of bindable paramters in the query.\n  */\n  const Stmt = function(){\n    if(BindTypes!==arguments[2]){\n      toss3(capi.SQLITE_MISUSE, \"Do not call the Stmt constructor directly. Use DB.prepare().\");\n    }\n    this.db = arguments[0];\n    __ptrMap.set(this, arguments[1]);\n    this.columnCount = capi.sqlite3_column_count(this.pointer);\n    this.parameterCount = capi.sqlite3_bind_parameter_count(this.pointer);\n  };\n\n  /** Throws if the given DB has been closed, else it is returned. */\n  const affirmDbOpen = function(db){\n    if(!db.pointer) toss3(\"DB has been closed.\");\n    return db;\n  };\n\n  /** Throws if ndx is not an integer or if it is out of range\n      for stmt.columnCount, else returns stmt.\n\n      Reminder: this will also fail after the statement is finalized\n      but the resulting error will be about an out-of-bounds column\n      index rather than a statement-is-finalized error.\n  */\n  const affirmColIndex = function(stmt,ndx){\n    if((ndx !== (ndx|0)) || ndx<0 || ndx>=stmt.columnCount){\n      toss3(\"Column index\",ndx,\"is out of range.\");\n    }\n    return stmt;\n  };\n\n  /**\n     Expects to be passed the `arguments` object from DB.exec(). Does\n     the argument processing/validation, throws on error, and returns\n     a new object on success:\n\n     { sql: the SQL, opt: optionsObj, cbArg: function}\n\n     The opt object is a normalized copy of any passed to this\n     function. The sql will be converted to a string if it is provided\n     in one of the supported non-string formats.\n\n     cbArg is only set if the opt.callback or opt.resultRows are set,\n     in which case it's a function which expects to be passed the\n     current Stmt and returns the callback argument of the type\n     indicated by the input arguments.\n  */\n  const parseExecArgs = function(db, args){\n    const out = Object.create(null);\n    out.opt = Object.create(null);\n    switch(args.length){\n        case 1:\n          if('string'===typeof args[0] || util.isSQLableTypedArray(args[0])){\n            out.sql = args[0];\n          }else if(Array.isArray(args[0])){\n            out.sql = args[0];\n          }else if(args[0] && 'object'===typeof args[0]){\n            out.opt = args[0];\n            out.sql = out.opt.sql;\n          }\n          break;\n        case 2:\n          out.sql = args[0];\n          out.opt = args[1];\n          break;\n        default: toss3(\"Invalid argument count for exec().\");\n    };\n    out.sql = util.flexibleString(out.sql);\n    if('string'!==typeof out.sql){\n      toss3(\"Missing SQL argument or unsupported SQL value type.\");\n    }\n    const opt = out.opt;\n    switch(opt.returnValue){\n        case 'resultRows':\n          if(!opt.resultRows) opt.resultRows = [];\n          out.returnVal = ()=>opt.resultRows;\n          break;\n        case 'saveSql':\n          if(!opt.saveSql) opt.saveSql = [];\n          out.returnVal = ()=>opt.saveSql;\n          break;\n        case undefined:\n        case 'this':\n          out.returnVal = ()=>db;\n          break;\n        default:\n          toss3(\"Invalid returnValue value:\",opt.returnValue);\n    }\n    if(!opt.callback && !opt.returnValue && undefined!==opt.rowMode){\n      if(!opt.resultRows) opt.resultRows = [];\n      out.returnVal = ()=>opt.resultRows;\n    }\n    if(opt.callback || opt.resultRows){\n      switch((undefined===opt.rowMode)\n             ? 'array' : opt.rowMode) {\n          case 'object': out.cbArg = (stmt)=>stmt.get(Object.create(null)); break;\n          case 'array': out.cbArg = (stmt)=>stmt.get([]); break;\n          case 'stmt':\n            if(Array.isArray(opt.resultRows)){\n              toss3(\"exec(): invalid rowMode for a resultRows array: must\",\n                    \"be one of 'array', 'object',\",\n                    \"a result column number, or column name reference.\");\n            }\n            out.cbArg = (stmt)=>stmt;\n            break;\n          default:\n            if(util.isInt32(opt.rowMode)){\n              out.cbArg = (stmt)=>stmt.get(opt.rowMode);\n              break;\n            }else if('string'===typeof opt.rowMode\n                     && opt.rowMode.length>1\n                     && '$'===opt.rowMode[0]){\n              /* \"$X\": fetch column named \"X\" (case-sensitive!). Prior\n                 to 2022-12-14 \":X\" and \"@X\" were also permitted, but\n                 having so many options is unnecessary and likely to\n                 cause confusion. */\n              const $colName = opt.rowMode.substr(1);\n              out.cbArg = (stmt)=>{\n                const rc = stmt.get(Object.create(null))[$colName];\n                return (undefined===rc)\n                  ? toss3(capi.SQLITE_NOTFOUND,\n                          \"exec(): unknown result column:\",$colName)\n                  : rc;\n              };\n              break;\n            }\n            toss3(\"Invalid rowMode:\",opt.rowMode);\n      }\n    }\n    return out;\n  };\n\n  /**\n     Internal impl of the DB.selectValue(), selectArray(), and\n     selectObject() methods.\n  */\n  const __selectFirstRow = (db, sql, bind, ...getArgs)=>{\n    const stmt = db.prepare(sql);\n    try {\n      return stmt.bind(bind).step() ? stmt.get(...getArgs) : undefined;\n    }finally{\n      stmt.finalize();\n    }\n  };\n\n  /**\n     Internal impl of the DB.selectArrays() and selectObjects()\n     methods.\n  */\n  const __selectAll =\n        (db, sql, bind, rowMode)=>db.exec({\n          sql, bind, rowMode, returnValue: 'resultRows'\n        });\n\n  /**\n     Expects to be given a DB instance or an `sqlite3*` pointer (may\n     be null) and an sqlite3 API result code. If the result code is\n     not falsy, this function throws an SQLite3Error with an error\n     message from sqlite3_errmsg(), using db (or, if db is-a DB,\n     db.pointer) as the db handle, or sqlite3_errstr() if db is\n     falsy. Note that if it's passed a non-error code like SQLITE_ROW\n     or SQLITE_DONE, it will still throw but the error string might be\n     \"Not an error.\"  The various non-0 non-error codes need to be\n     checked for in client code where they are expected.\n\n     If it does not throw, it returns its first argument.\n  */\n  DB.checkRc = (db,resultCode)=>checkSqlite3Rc(db,resultCode);\n\n  DB.prototype = {\n    /** Returns true if this db handle is open, else false. */\n    isOpen: function(){\n      return !!this.pointer;\n    },\n    /** Throws if this given DB has been closed, else returns `this`. */\n    affirmOpen: function(){\n      return affirmDbOpen(this);\n    },\n    /**\n       Finalizes all open statements and closes this database\n       connection. This is a no-op if the db has already been\n       closed. After calling close(), `this.pointer` will resolve to\n       `undefined`, so that can be used to check whether the db\n       instance is still opened.\n\n       If this.onclose.before is a function then it is called before\n       any close-related cleanup.\n\n       If this.onclose.after is a function then it is called after the\n       db is closed but before auxiliary state like this.filename is\n       cleared.\n\n       Both onclose handlers are passed this object, with the onclose\n       object as their \"this,\" noting that the db will have been\n       closed when onclose.after is called. If this db is not opened\n       when close() is called, neither of the handlers are called. Any\n       exceptions the handlers throw are ignored because \"destructors\n       must not throw.\"\n\n       Note that garbage collection of a db handle, if it happens at\n       all, will never trigger close(), so onclose handlers are not a\n       reliable way to implement close-time cleanup or maintenance of\n       a db.\n    */\n    close: function(){\n      if(this.pointer){\n        if(this.onclose && (this.onclose.before instanceof Function)){\n          try{this.onclose.before(this)}\n          catch(e){/*ignore*/}\n        }\n        const pDb = this.pointer;\n        Object.keys(__stmtMap.get(this)).forEach((k,s)=>{\n          if(s && s.pointer) s.finalize();\n        });\n        __ptrMap.delete(this);\n        __stmtMap.delete(this);\n        capi.sqlite3_close_v2(pDb);\n        if(this.onclose && (this.onclose.after instanceof Function)){\n          try{this.onclose.after(this)}\n          catch(e){/*ignore*/}\n        }\n        delete this.filename;\n      }\n    },\n    /**\n       Returns the number of changes, as per sqlite3_changes()\n       (if the first argument is false) or sqlite3_total_changes()\n       (if it's true). If the 2nd argument is true, it uses\n       sqlite3_changes64() or sqlite3_total_changes64(), which\n       will trigger an exception if this build does not have\n       BigInt support enabled.\n    */\n    changes: function(total=false,sixtyFour=false){\n      const p = affirmDbOpen(this).pointer;\n      if(total){\n        return sixtyFour\n          ? capi.sqlite3_total_changes64(p)\n          : capi.sqlite3_total_changes(p);\n      }else{\n        return sixtyFour\n          ? capi.sqlite3_changes64(p)\n          : capi.sqlite3_changes(p);\n      }\n    },\n    /**\n       Similar to the this.filename but returns the\n       sqlite3_db_filename() value for the given database name,\n       defaulting to \"main\".  The argument may be either a JS string\n       or a pointer to a WASM-allocated C-string.\n    */\n    dbFilename: function(dbName='main'){\n      return capi.sqlite3_db_filename(affirmDbOpen(this).pointer, dbName);\n    },\n    /**\n       Returns the name of the given 0-based db number, as documented\n       for sqlite3_db_name().\n    */\n    dbName: function(dbNumber=0){\n      return capi.sqlite3_db_name(affirmDbOpen(this).pointer, dbNumber);\n    },\n    /**\n       Returns the name of the sqlite3_vfs used by the given database\n       of this connection (defaulting to 'main'). The argument may be\n       either a JS string or a WASM C-string. Returns undefined if the\n       given db name is invalid. Throws if this object has been\n       close()d.\n    */\n    dbVfsName: function(dbName=0){\n      let rc;\n      const pVfs = capi.sqlite3_js_db_vfs(\n        affirmDbOpen(this).pointer, dbName\n      );\n      if(pVfs){\n        const v = new capi.sqlite3_vfs(pVfs);\n        try{ rc = wasm.cstrToJs(v.$zName) }\n        finally { v.dispose() }\n      }\n      return rc;\n    },\n    /**\n       Compiles the given SQL and returns a prepared Stmt. This is\n       the only way to create new Stmt objects. Throws on error.\n\n       The given SQL must be a string, a Uint8Array holding SQL, a\n       WASM pointer to memory holding the NUL-terminated SQL string,\n       or an array of strings. In the latter case, the array is\n       concatenated together, with no separators, to form the SQL\n       string (arrays are often a convenient way to formulate long\n       statements).  If the SQL contains no statements, an\n       SQLite3Error is thrown.\n\n       Design note: the C API permits empty SQL, reporting it as a 0\n       result code and a NULL stmt pointer. Supporting that case here\n       would cause extra work for all clients: any use of the Stmt API\n       on such a statement will necessarily throw, so clients would be\n       required to check `stmt.pointer` after calling `prepare()` in\n       order to determine whether the Stmt instance is empty or not.\n       Long-time practice (with other sqlite3 script bindings)\n       suggests that the empty-prepare case is sufficiently rare that\n       supporting it here would simply hurt overall usability.\n    */\n    prepare: function(sql){\n      affirmDbOpen(this);\n      const stack = wasm.pstack.pointer;\n      let ppStmt, pStmt;\n      try{\n        ppStmt = wasm.pstack.alloc(8)/* output (sqlite3_stmt**) arg */;\n        DB.checkRc(this, capi.sqlite3_prepare_v2(this.pointer, sql, -1, ppStmt, null));\n        pStmt = wasm.peekPtr(ppStmt);\n      }\n      finally {\n        wasm.pstack.restore(stack);\n      }\n      if(!pStmt) toss3(\"Cannot prepare empty SQL.\");\n      const stmt = new Stmt(this, pStmt, BindTypes);\n      __stmtMap.get(this)[pStmt] = stmt;\n      return stmt;\n    },\n    /**\n       Executes one or more SQL statements in the form of a single\n       string. Its arguments must be either (sql,optionsObject) or\n       (optionsObject). In the latter case, optionsObject.sql must\n       contain the SQL to execute. By default it returns this object\n       but that can be changed via the `returnValue` option as\n       described below. Throws on error.\n\n       If no SQL is provided, or a non-string is provided, an\n       exception is triggered. Empty SQL, on the other hand, is\n       simply a no-op.\n\n       The optional options object may contain any of the following\n       properties:\n\n       - `sql` = the SQL to run (unless it's provided as the first\n       argument). This must be of type string, Uint8Array, or an array\n       of strings. In the latter case they're concatenated together\n       as-is, _with no separator_ between elements, before evaluation.\n       The array form is often simpler for long hand-written queries.\n\n       - `bind` = a single value valid as an argument for\n       Stmt.bind(). This is _only_ applied to the _first_ non-empty\n       statement in the SQL which has any bindable parameters. (Empty\n       statements are skipped entirely.)\n\n       - `saveSql` = an optional array. If set, the SQL of each\n       executed statement is appended to this array before the\n       statement is executed (but after it is prepared - we don't have\n       the string until after that). Empty SQL statements are elided\n       but can have odd effects in the output. e.g. SQL of: `\"select\n       1; -- empty\\n; select 2\"` will result in an array containing\n       `[\"select 1;\", \"--empty \\n; select 2\"]`. That's simply how\n       sqlite3 records the SQL for the 2nd statement.\n\n       ==================================================================\n       The following options apply _only_ to the _first_ statement\n       which has a non-zero result column count, regardless of whether\n       the statement actually produces any result rows.\n       ==================================================================\n\n       - `columnNames`: if this is an array, the column names of the\n       result set are stored in this array before the callback (if\n       any) is triggered (regardless of whether the query produces any\n       result rows). If no statement has result columns, this value is\n       unchanged. Achtung: an SQL result may have multiple columns\n       with identical names.\n\n       - `callback` = a function which gets called for each row of the\n       result set, but only if that statement has any result\n       _rows_. The callback's \"this\" is the options object, noting\n       that this function synthesizes one if the caller does not pass\n       one to exec(). The second argument passed to the callback is\n       always the current Stmt object, as it's needed if the caller\n       wants to fetch the column names or some such (noting that they\n       could also be fetched via `this.columnNames`, if the client\n       provides the `columnNames` option). If the callback returns a\n       literal `false` (as opposed to any other falsy value, e.g.  an\n       implicit `undefined` return), any ongoing statement-`step()`\n       iteration stops without an error. The return value of the\n       callback is otherwise ignored.\n\n       ACHTUNG: The callback MUST NOT modify the Stmt object. Calling\n       any of the Stmt.get() variants, Stmt.getColumnName(), or\n       similar, is legal, but calling step() or finalize() is\n       not. Member methods which are illegal in this context will\n       trigger an exception, but clients must also refrain from using\n       any lower-level (C-style) APIs which might modify the\n       statement.\n\n       The first argument passed to the callback defaults to an array of\n       values from the current result row but may be changed with ...\n\n       - `rowMode` = specifies the type of he callback's first argument.\n       It may be any of...\n\n       A) A string describing what type of argument should be passed\n       as the first argument to the callback:\n\n         A.1) `'array'` (the default) causes the results of\n         `stmt.get([])` to be passed to the `callback` and/or appended\n         to `resultRows`\n\n         A.2) `'object'` causes the results of\n         `stmt.get(Object.create(null))` to be passed to the\n         `callback` and/or appended to `resultRows`.  Achtung: an SQL\n         result may have multiple columns with identical names. In\n         that case, the right-most column will be the one set in this\n         object!\n\n         A.3) `'stmt'` causes the current Stmt to be passed to the\n         callback, but this mode will trigger an exception if\n         `resultRows` is an array because appending the statement to\n         the array would be downright unhelpful.\n\n       B) An integer, indicating a zero-based column in the result\n       row. Only that one single value will be passed on.\n\n       C) A string with a minimum length of 2 and leading character of\n       '$' will fetch the row as an object, extract that one field,\n       and pass that field's value to the callback. Note that these\n       keys are case-sensitive so must match the case used in the\n       SQL. e.g. `\"select a A from t\"` with a `rowMode` of `'$A'`\n       would work but `'$a'` would not. A reference to a column not in\n       the result set will trigger an exception on the first row (as\n       the check is not performed until rows are fetched).  Note also\n       that `$` is a legal identifier character in JS so need not be\n       quoted.\n\n       Any other `rowMode` value triggers an exception.\n\n       - `resultRows`: if this is an array, it functions similarly to\n       the `callback` option: each row of the result set (if any),\n       with the exception that the `rowMode` 'stmt' is not legal. It\n       is legal to use both `resultRows` and `callback`, but\n       `resultRows` is likely much simpler to use for small data sets\n       and can be used over a WebWorker-style message interface.\n       exec() throws if `resultRows` is set and `rowMode` is 'stmt'.\n\n       - `returnValue`: is a string specifying what this function\n       should return:\n\n         A) The default value is (usually) `\"this\"`, meaning that the\n            DB object itself should be returned. The exceptions is if\n            the caller passes neither of `callback` nor `returnValue`\n            but does pass an explicit `rowMode` then the default\n            `returnValue` is `\"resultRows\"`, described below.\n\n         B) `\"resultRows\"` means to return the value of the\n            `resultRows` option. If `resultRows` is not set, this\n            function behaves as if it were set to an empty array.\n\n         C) `\"saveSql\"` means to return the value of the\n            `saveSql` option. If `saveSql` is not set, this\n            function behaves as if it were set to an empty array.\n\n       Potential TODOs:\n\n       - `bind`: permit an array of arrays/objects to bind. The first\n       sub-array would act on the first statement which has bindable\n       parameters (as it does now). The 2nd would act on the next such\n       statement, etc.\n\n       - `callback` and `resultRows`: permit an array entries with\n       semantics similar to those described for `bind` above.\n\n    */\n    exec: function(/*(sql [,obj]) || (obj)*/){\n      affirmDbOpen(this);\n      const arg = parseExecArgs(this, arguments);\n      if(!arg.sql){\n        return toss3(\"exec() requires an SQL string.\");\n      }\n      const opt = arg.opt;\n      const callback = opt.callback;\n      const resultRows =\n            Array.isArray(opt.resultRows) ? opt.resultRows : undefined;\n      let stmt;\n      let bind = opt.bind;\n      let evalFirstResult = !!(\n        arg.cbArg || opt.columnNames || resultRows\n      ) /* true to step through the first result-returning statement */;\n      const stack = wasm.scopedAllocPush();\n      const saveSql = Array.isArray(opt.saveSql) ? opt.saveSql : undefined;\n      try{\n        const isTA = util.isSQLableTypedArray(arg.sql)\n        /* Optimization: if the SQL is a TypedArray we can save some string\n           conversion costs. */;\n        /* Allocate the two output pointers (ppStmt, pzTail) and heap\n           space for the SQL (pSql). When prepare_v2() returns, pzTail\n           will point to somewhere in pSql. */\n        let sqlByteLen = isTA ? arg.sql.byteLength : wasm.jstrlen(arg.sql);\n        const ppStmt  = wasm.scopedAlloc(\n          /* output (sqlite3_stmt**) arg and pzTail */\n          (2 * wasm.ptrSizeof) + (sqlByteLen + 1/* SQL + NUL */)\n        );\n        const pzTail = ppStmt + wasm.ptrSizeof /* final arg to sqlite3_prepare_v2() */;\n        let pSql = pzTail + wasm.ptrSizeof;\n        const pSqlEnd = pSql + sqlByteLen;\n        if(isTA) wasm.heap8().set(arg.sql, pSql);\n        else wasm.jstrcpy(arg.sql, wasm.heap8(), pSql, sqlByteLen, false);\n        wasm.poke(pSql + sqlByteLen, 0/*NUL terminator*/);\n        while(pSql && wasm.peek(pSql, 'i8')\n              /* Maintenance reminder:^^^ _must_ be 'i8' or else we\n                 will very likely cause an endless loop. What that's\n                 doing is checking for a terminating NUL byte. If we\n                 use i32 or similar then we read 4 bytes, read stuff\n                 around the NUL terminator, and get stuck in and\n                 endless loop at the end of the SQL, endlessly\n                 re-preparing an empty statement. */ ){\n          wasm.pokePtr([ppStmt, pzTail], 0);\n          DB.checkRc(this, capi.sqlite3_prepare_v3(\n            this.pointer, pSql, sqlByteLen, 0, ppStmt, pzTail\n          ));\n          const pStmt = wasm.peekPtr(ppStmt);\n          pSql = wasm.peekPtr(pzTail);\n          sqlByteLen = pSqlEnd - pSql;\n          if(!pStmt) continue;\n          if(saveSql) saveSql.push(capi.sqlite3_sql(pStmt).trim());\n          stmt = new Stmt(this, pStmt, BindTypes);\n          if(bind && stmt.parameterCount){\n            stmt.bind(bind);\n            bind = null;\n          }\n          if(evalFirstResult && stmt.columnCount){\n            /* Only forward SELECT results for the FIRST query\n               in the SQL which potentially has them. */\n            evalFirstResult = false;\n            if(Array.isArray(opt.columnNames)){\n              stmt.getColumnNames(opt.columnNames);\n            }\n            if(arg.cbArg || resultRows){\n              for(; stmt.step(); stmt._isLocked = false){\n                stmt._isLocked = true;\n                const row = arg.cbArg(stmt);\n                if(resultRows) resultRows.push(row);\n                if(callback && false === callback.call(opt, row, stmt)){\n                  break;\n                }\n              }\n              stmt._isLocked = false;\n            }\n          }else{\n            stmt.step();\n          }\n          stmt.finalize();\n          stmt = null;\n        }\n      }/*catch(e){\n        sqlite3.config.warn(\"DB.exec() is propagating exception\",opt,e);\n        throw e;\n      }*/finally{\n        if(stmt){\n          delete stmt._isLocked;\n          stmt.finalize();\n        }\n        wasm.scopedAllocPop(stack);\n      }\n      return arg.returnVal();\n    }/*exec()*/,\n\n    /**\n       Creates a new UDF (User-Defined Function) which is accessible\n       via SQL code. This function may be called in any of the\n       following forms:\n\n       - (name, function)\n       - (name, function, optionsObject)\n       - (name, optionsObject)\n       - (optionsObject)\n\n       In the final two cases, the function must be defined as the\n       `callback` property of the options object (optionally called\n       `xFunc` to align with the C API documentation). In the final\n       case, the function's name must be the 'name' property.\n\n       The first two call forms can only be used for creating scalar\n       functions. Creating an aggregate or window function requires\n       the options-object form (see below for details).\n\n       UDFs can be removed as documented for\n       sqlite3_create_function_v2() and\n       sqlite3_create_window_function(), but doing so will \"leak\" the\n       JS-created WASM binding of those functions (meaning that their\n       entries in the WASM indirect function table still\n       exist). Eliminating that potential leak is a pending TODO.\n\n       On success, returns this object. Throws on error.\n\n       When called from SQL arguments to the UDF, and its result,\n       will be converted between JS and SQL with as much fidelity as\n       is feasible, triggering an exception if a type conversion\n       cannot be determined. The docs for sqlite3_create_function_v2()\n       describe the conversions in more detail.\n\n       The values set in the options object differ for scalar and\n       aggregate functions:\n\n       - Scalar: set the `xFunc` function-type property to the UDF\n         function.\n\n       - Aggregate: set the `xStep` and `xFinal` function-type\n         properties to the \"step\" and \"final\" callbacks for the\n         aggregate. Do not set the `xFunc` property.\n\n       - Window: set the `xStep`, `xFinal`, `xValue`, and `xInverse`\n         function-type properties. Do not set the `xFunc` property.\n\n       The options object may optionally have an `xDestroy`\n       function-type property, as per sqlite3_create_function_v2().\n       Its argument will be the WASM-pointer-type value of the `pApp`\n       property, and this function will throw if `pApp` is defined but\n       is not null, undefined, or a numeric (WASM pointer)\n       value. i.e. `pApp`, if set, must be value suitable for use as a\n       WASM pointer argument, noting that `null` or `undefined` will\n       translate to 0 for that purpose.\n\n       The options object may contain flags to modify how\n       the function is defined:\n\n       - `arity`: the number of arguments which SQL calls to this\n       function expect or require. The default value is `xFunc.length`\n       or `xStep.length` (i.e. the number of declared parameters it\n       has) **MINUS 1** (see below for why). As a special case, if the\n       `length` is 0, its arity is also 0 instead of -1. A negative\n       arity value means that the function is variadic and may accept\n       any number of arguments, up to sqlite3's compile-time\n       limits. sqlite3 will enforce the argument count if is zero or\n       greater. The callback always receives a pointer to an\n       `sqlite3_context` object as its first argument. Any arguments\n       after that are from SQL code. The leading context argument does\n       _not_ count towards the function's arity. See the docs for\n       sqlite3.capi.sqlite3_create_function_v2() for why that argument\n       is needed in the interface.\n\n       The following options-object properties correspond to flags\n       documented at:\n\n       https://sqlite.org/c3ref/create_function.html\n\n       - `deterministic` = sqlite3.capi.SQLITE_DETERMINISTIC\n       - `directOnly` = sqlite3.capi.SQLITE_DIRECTONLY\n       - `innocuous` = sqlite3.capi.SQLITE_INNOCUOUS\n\n       Sidebar: the ability to add new WASM-accessible functions to\n       the runtime requires that the WASM build is compiled with the\n       equivalent functionality as that provided by Emscripten's\n       `-sALLOW_TABLE_GROWTH` flag.\n    */\n    createFunction: function f(name, xFunc, opt){\n      const isFunc = (f)=>(f instanceof Function);\n      switch(arguments.length){\n          case 1: /* (optionsObject) */\n            opt = name;\n            name = opt.name;\n            xFunc = opt.xFunc || 0;\n            break;\n          case 2: /* (name, callback|optionsObject) */\n            if(!isFunc(xFunc)){\n              opt = xFunc;\n              xFunc = opt.xFunc || 0;\n            }\n            break;\n          case 3: /* name, xFunc, opt */\n            break;\n          default: break;\n      }\n      if(!opt) opt = {};\n      if('string' !== typeof name){\n        toss3(\"Invalid arguments: missing function name.\");\n      }\n      let xStep = opt.xStep || 0;\n      let xFinal = opt.xFinal || 0;\n      const xValue = opt.xValue || 0;\n      const xInverse = opt.xInverse || 0;\n      let isWindow = undefined;\n      if(isFunc(xFunc)){\n        isWindow = false;\n        if(isFunc(xStep) || isFunc(xFinal)){\n          toss3(\"Ambiguous arguments: scalar or aggregate?\");\n        }\n        xStep = xFinal = null;\n      }else if(isFunc(xStep)){\n        if(!isFunc(xFinal)){\n          toss3(\"Missing xFinal() callback for aggregate or window UDF.\");\n        }\n        xFunc = null;\n      }else if(isFunc(xFinal)){\n        toss3(\"Missing xStep() callback for aggregate or window UDF.\");\n      }else{\n        toss3(\"Missing function-type properties.\");\n      }\n      if(false === isWindow){\n        if(isFunc(xValue) || isFunc(xInverse)){\n          toss3(\"xValue and xInverse are not permitted for non-window UDFs.\");\n        }\n      }else if(isFunc(xValue)){\n        if(!isFunc(xInverse)){\n          toss3(\"xInverse must be provided if xValue is.\");\n        }\n        isWindow = true;\n      }else if(isFunc(xInverse)){\n        toss3(\"xValue must be provided if xInverse is.\");\n      }\n      const pApp = opt.pApp;\n      if(undefined!==pApp &&\n         null!==pApp &&\n         (('number'!==typeof pApp) || !util.isInt32(pApp))){\n        toss3(\"Invalid value for pApp property. Must be a legal WASM pointer value.\");\n      }\n      const xDestroy = opt.xDestroy || 0;\n      if(xDestroy && !isFunc(xDestroy)){\n        toss3(\"xDestroy property must be a function.\");\n      }\n      let fFlags = 0 /*flags for sqlite3_create_function_v2()*/;\n      if(getOwnOption(opt, 'deterministic')) fFlags |= capi.SQLITE_DETERMINISTIC;\n      if(getOwnOption(opt, 'directOnly')) fFlags |= capi.SQLITE_DIRECTONLY;\n      if(getOwnOption(opt, 'innocuous')) fFlags |= capi.SQLITE_INNOCUOUS;\n      name = name.toLowerCase();\n      const xArity = xFunc || xStep;\n      const arity = getOwnOption(opt, 'arity');\n      const arityArg = ('number'===typeof arity\n                        ? arity\n                        : (xArity.length ? xArity.length-1/*for pCtx arg*/ : 0));\n      let rc;\n      if( isWindow ){\n        rc = capi.sqlite3_create_window_function(\n          this.pointer, name, arityArg,\n          capi.SQLITE_UTF8 | fFlags, pApp || 0,\n          xStep, xFinal, xValue, xInverse, xDestroy);\n      }else{\n        rc = capi.sqlite3_create_function_v2(\n          this.pointer, name, arityArg,\n          capi.SQLITE_UTF8 | fFlags, pApp || 0,\n          xFunc, xStep, xFinal, xDestroy);\n      }\n      DB.checkRc(this, rc);\n      return this;\n    }/*createFunction()*/,\n    /**\n       Prepares the given SQL, step()s it one time, and returns\n       the value of the first result column. If it has no results,\n       undefined is returned.\n\n       If passed a second argument, it is treated like an argument\n       to Stmt.bind(), so may be any type supported by that\n       function. Passing the undefined value is the same as passing\n       no value, which is useful when...\n\n       If passed a 3rd argument, it is expected to be one of the\n       SQLITE_{typename} constants. Passing the undefined value is\n       the same as not passing a value.\n\n       Throws on error (e.g. malformed SQL).\n    */\n    selectValue: function(sql,bind,asType){\n      return __selectFirstRow(this, sql, bind, 0, asType);\n    },\n\n    /**\n       Runs the given query and returns an array of the values from\n       the first result column of each row of the result set. The 2nd\n       argument is an optional value for use in a single-argument call\n       to Stmt.bind(). The 3rd argument may be any value suitable for\n       use as the 2nd argument to Stmt.get(). If a 3rd argument is\n       desired but no bind data are needed, pass `undefined` for the 2nd\n       argument.\n\n       If there are no result rows, an empty array is returned.\n    */\n    selectValues: function(sql,bind,asType){\n      const stmt = this.prepare(sql), rc = [];\n      try {\n        stmt.bind(bind);\n        while(stmt.step()) rc.push(stmt.get(0,asType));\n      }finally{\n        stmt.finalize();\n      }\n      return rc;\n    },\n\n    /**\n       Prepares the given SQL, step()s it one time, and returns an\n       array containing the values of the first result row. If it has\n       no results, `undefined` is returned.\n\n       If passed a second argument other than `undefined`, it is\n       treated like an argument to Stmt.bind(), so may be any type\n       supported by that function.\n\n       Throws on error (e.g. malformed SQL).\n    */\n    selectArray: function(sql,bind){\n      return __selectFirstRow(this, sql, bind, []);\n    },\n\n    /**\n       Prepares the given SQL, step()s it one time, and returns an\n       object containing the key/value pairs of the first result\n       row. If it has no results, `undefined` is returned.\n\n       Note that the order of returned object's keys is not guaranteed\n       to be the same as the order of the fields in the query string.\n\n       If passed a second argument other than `undefined`, it is\n       treated like an argument to Stmt.bind(), so may be any type\n       supported by that function.\n\n       Throws on error (e.g. malformed SQL).\n    */\n    selectObject: function(sql,bind){\n      return __selectFirstRow(this, sql, bind, {});\n    },\n\n    /**\n       Runs the given SQL and returns an array of all results, with\n       each row represented as an array, as per the 'array' `rowMode`\n       option to `exec()`. An empty result set resolves\n       to an empty array. The second argument, if any, is treated as\n       the 'bind' option to a call to exec().\n    */\n    selectArrays: function(sql,bind){\n      return __selectAll(this, sql, bind, 'array');\n    },\n\n    /**\n       Works identically to selectArrays() except that each value\n       in the returned array is an object, as per the 'object' `rowMode`\n       option to `exec()`.\n    */\n    selectObjects: function(sql,bind){\n      return __selectAll(this, sql, bind, 'object');\n    },\n\n    /**\n       Returns the number of currently-opened Stmt handles for this db\n       handle, or 0 if this DB instance is closed. Note that only\n       handles prepared via this.prepare() are counted, and not\n       handles prepared using capi.sqlite3_prepare_v3() (or\n       equivalent).\n    */\n    openStatementCount: function(){\n      return this.pointer ? Object.keys(__stmtMap.get(this)).length : 0;\n    },\n\n    /**\n       Starts a transaction, calls the given callback, and then either\n       rolls back or commits the savepoint, depending on whether the\n       callback throws. The callback is passed this db object as its\n       only argument. On success, returns the result of the\n       callback. Throws on error.\n\n       Note that transactions may not be nested, so this will throw if\n       it is called recursively. For nested transactions, use the\n       savepoint() method or manually manage SAVEPOINTs using exec().\n\n       If called with 2 arguments, the first must be a keyword which\n       is legal immediately after a BEGIN statement, e.g. one of\n       \"DEFERRED\", \"IMMEDIATE\", or \"EXCLUSIVE\". Though the exact list\n       of supported keywords is not hard-coded here, in order to be\n       future-compatible, if the argument does not look like a single\n       keyword then an exception is triggered with a description of\n       the problem.\n     */\n    transaction: function(/* [beginQualifier,] */callback){\n      let opener = 'BEGIN';\n      if(arguments.length>1){\n        if(/[^a-zA-Z]/.test(arguments[0])){\n          toss3(capi.SQLITE_MISUSE, \"Invalid argument for BEGIN qualifier.\");\n        }\n        opener += ' '+arguments[0];\n        callback = arguments[1];\n      }\n      affirmDbOpen(this).exec(opener);\n      try {\n        const rc = callback(this);\n        this.exec(\"COMMIT\");\n        return rc;\n      }catch(e){\n        this.exec(\"ROLLBACK\");\n        throw e;\n      }\n    },\n\n    /**\n       This works similarly to transaction() but uses sqlite3's SAVEPOINT\n       feature. This function starts a savepoint (with an unspecified name)\n       and calls the given callback function, passing it this db object.\n       If the callback returns, the savepoint is released (committed). If\n       the callback throws, the savepoint is rolled back. If it does not\n       throw, it returns the result of the callback.\n    */\n    savepoint: function(callback){\n      affirmDbOpen(this).exec(\"SAVEPOINT oo1\");\n      try {\n        const rc = callback(this);\n        this.exec(\"RELEASE oo1\");\n        return rc;\n      }catch(e){\n        this.exec(\"ROLLBACK to SAVEPOINT oo1; RELEASE SAVEPOINT oo1\");\n        throw e;\n      }\n    },\n\n    /**\n       A convenience form of DB.checkRc(this,resultCode). If it does\n       not throw, it returns this object.\n    */\n    checkRc: function(resultCode){\n      return DB.checkRc(this, resultCode);\n    }\n  }/*DB.prototype*/;\n\n  /** Throws if the given Stmt has been finalized, else stmt is\n      returned. */\n  const affirmStmtOpen = function(stmt){\n    if(!stmt.pointer) toss3(\"Stmt has been closed.\");\n    return stmt;\n  };\n\n  /** Returns an opaque truthy value from the BindTypes\n      enum if v's type is a valid bindable type, else\n      returns a falsy value. As a special case, a value of\n      undefined is treated as a bind type of null. */\n  const isSupportedBindType = function(v){\n    let t = BindTypes[(null===v||undefined===v) ? 'null' : typeof v];\n    switch(t){\n        case BindTypes.boolean:\n        case BindTypes.null:\n        case BindTypes.number:\n        case BindTypes.string:\n          return t;\n        case BindTypes.bigint:\n          if(wasm.bigIntEnabled) return t;\n          /* else fall through */\n        default:\n          return util.isBindableTypedArray(v) ? BindTypes.blob : undefined;\n    }\n  };\n\n  /**\n     If isSupportedBindType(v) returns a truthy value, this\n     function returns that value, else it throws.\n  */\n  const affirmSupportedBindType = function(v){\n    //sqlite3.config.log('affirmSupportedBindType',v);\n    return isSupportedBindType(v) || toss3(\"Unsupported bind() argument type:\",typeof v);\n  };\n\n  /**\n     If key is a number and within range of stmt's bound parameter\n     count, key is returned.\n\n     If key is not a number then it is checked against named\n     parameters. If a match is found, its index is returned.\n\n     Else it throws.\n  */\n  const affirmParamIndex = function(stmt,key){\n    const n = ('number'===typeof key)\n          ? key : capi.sqlite3_bind_parameter_index(stmt.pointer, key);\n    if(0===n || !util.isInt32(n)){\n      toss3(\"Invalid bind() parameter name: \"+key);\n    }\n    else if(n<1 || n>stmt.parameterCount) toss3(\"Bind index\",key,\"is out of range.\");\n    return n;\n  };\n\n  /**\n     If stmt._isLocked is truthy, this throws an exception\n     complaining that the 2nd argument (an operation name,\n     e.g. \"bind()\") is not legal while the statement is \"locked\".\n     Locking happens before an exec()-like callback is passed a\n     statement, to ensure that the callback does not mutate or\n     finalize the statement. If it does not throw, it returns stmt.\n  */\n  const affirmUnlocked = function(stmt,currentOpName){\n    if(stmt._isLocked){\n      toss3(\"Operation is illegal when statement is locked:\",currentOpName);\n    }\n    return stmt;\n  };\n\n  /**\n     Binds a single bound parameter value on the given stmt at the\n     given index (numeric or named) using the given bindType (see\n     the BindTypes enum) and value. Throws on error. Returns stmt on\n     success.\n  */\n  const bindOne = function f(stmt,ndx,bindType,val){\n    affirmUnlocked(affirmStmtOpen(stmt), 'bind()');\n    if(!f._){\n      f._tooBigInt = (v)=>toss3(\n        \"BigInt value is too big to store without precision loss:\", v\n      );\n      /* Reminder: when not in BigInt mode, it's impossible for\n         JS to represent a number out of the range we can bind,\n         so we have no range checking. */\n      f._ = {\n        string: function(stmt, ndx, val, asBlob){\n          const [pStr, n] = wasm.allocCString(val, true);\n          const f = asBlob ? capi.sqlite3_bind_blob : capi.sqlite3_bind_text;\n          return f(stmt.pointer, ndx, pStr, n, capi.SQLITE_WASM_DEALLOC);\n        }\n      };\n    }/* static init */\n    affirmSupportedBindType(val);\n    ndx = affirmParamIndex(stmt,ndx);\n    let rc = 0;\n    switch((null===val || undefined===val) ? BindTypes.null : bindType){\n        case BindTypes.null:\n          rc = capi.sqlite3_bind_null(stmt.pointer, ndx);\n          break;\n        case BindTypes.string:\n          rc = f._.string(stmt, ndx, val, false);\n          break;\n        case BindTypes.number: {\n          let m;\n          if(util.isInt32(val)) m = capi.sqlite3_bind_int;\n          else if('bigint'===typeof val){\n            if(!util.bigIntFits64(val)){\n              f._tooBigInt(val);\n            }else if(wasm.bigIntEnabled){\n              m = capi.sqlite3_bind_int64;\n            }else if(util.bigIntFitsDouble(val)){\n              val = Number(val);\n              m = capi.sqlite3_bind_double;\n            }else{\n              f._tooBigInt(val);\n            }\n          }else{ // !int32, !bigint\n            val = Number(val);\n            if(wasm.bigIntEnabled && Number.isInteger(val)){\n              m = capi.sqlite3_bind_int64;\n            }else{\n              m = capi.sqlite3_bind_double;\n            }\n          }\n          rc = m(stmt.pointer, ndx, val);\n          break;\n        }\n        case BindTypes.boolean:\n          rc = capi.sqlite3_bind_int(stmt.pointer, ndx, val ? 1 : 0);\n          break;\n        case BindTypes.blob: {\n          if('string'===typeof val){\n            rc = f._.string(stmt, ndx, val, true);\n            break;\n          }else if(val instanceof ArrayBuffer){\n            val = new Uint8Array(val);\n          }else if(!util.isBindableTypedArray(val)){\n            toss3(\"Binding a value as a blob requires\",\n                  \"that it be a string, Uint8Array, Int8Array, or ArrayBuffer.\");\n          }\n          const pBlob = wasm.alloc(val.byteLength || 1);\n          wasm.heap8().set(val.byteLength ? val : [0], pBlob)\n          rc = capi.sqlite3_bind_blob(stmt.pointer, ndx, pBlob, val.byteLength,\n                                      capi.SQLITE_WASM_DEALLOC);\n          break;\n        }\n        default:\n          sqlite3.config.warn(\"Unsupported bind() argument type:\",val);\n          toss3(\"Unsupported bind() argument type: \"+(typeof val));\n    }\n    if(rc) DB.checkRc(stmt.db.pointer, rc);\n    stmt._mayGet = false;\n    return stmt;\n  };\n\n  Stmt.prototype = {\n    /**\n       \"Finalizes\" this statement. This is a no-op if the\n       statement has already been finalizes. Returns\n       undefined. Most methods in this class will throw if called\n       after this is.\n    */\n    finalize: function(){\n      if(this.pointer){\n        affirmUnlocked(this,'finalize()');\n        delete __stmtMap.get(this.db)[this.pointer];\n        capi.sqlite3_finalize(this.pointer);\n        __ptrMap.delete(this);\n        delete this._mayGet;\n        delete this.columnCount;\n        delete this.parameterCount;\n        delete this.db;\n        delete this._isLocked;\n      }\n    },\n    /** Clears all bound values. Returns this object.\n        Throws if this statement has been finalized. */\n    clearBindings: function(){\n      affirmUnlocked(affirmStmtOpen(this), 'clearBindings()')\n      capi.sqlite3_clear_bindings(this.pointer);\n      this._mayGet = false;\n      return this;\n    },\n    /**\n       Resets this statement so that it may be step()ed again\n       from the beginning. Returns this object. Throws if this\n       statement has been finalized.\n\n       If passed a truthy argument then this.clearBindings() is\n       also called, otherwise any existing bindings, along with\n       any memory allocated for them, are retained.\n    */\n    reset: function(alsoClearBinds){\n      affirmUnlocked(this,'reset()');\n      if(alsoClearBinds) this.clearBindings();\n      capi.sqlite3_reset(affirmStmtOpen(this).pointer);\n      this._mayGet = false;\n      return this;\n    },\n    /**\n       Binds one or more values to its bindable parameters. It\n       accepts 1 or 2 arguments:\n\n       If passed a single argument, it must be either an array, an\n       object, or a value of a bindable type (see below).\n\n       If passed 2 arguments, the first one is the 1-based bind\n       index or bindable parameter name and the second one must be\n       a value of a bindable type.\n\n       Bindable value types:\n\n       - null is bound as NULL.\n\n       - undefined as a standalone value is a no-op intended to\n         simplify certain client-side use cases: passing undefined as\n         a value to this function will not actually bind anything and\n         this function will skip confirmation that binding is even\n         legal. (Those semantics simplify certain client-side uses.)\n         Conversely, a value of undefined as an array or object\n         property when binding an array/object (see below) is treated\n         the same as null.\n\n       - Numbers are bound as either doubles or integers: doubles if\n         they are larger than 32 bits, else double or int32, depending\n         on whether they have a fractional part. Booleans are bound as\n         integer 0 or 1. It is not expected the distinction of binding\n         doubles which have no fractional parts is integers is\n         significant for the majority of clients due to sqlite3's data\n         typing model. If [BigInt] support is enabled then this\n         routine will bind BigInt values as 64-bit integers if they'll\n         fit in 64 bits. If that support disabled, it will store the\n         BigInt as an int32 or a double if it can do so without loss\n         of precision. If the BigInt is _too BigInt_ then it will\n         throw.\n\n       - Strings are bound as strings (use bindAsBlob() to force\n         blob binding).\n\n       - Uint8Array, Int8Array, and ArrayBuffer instances are bound as\n         blobs.\n\n       If passed an array, each element of the array is bound at\n       the parameter index equal to the array index plus 1\n       (because arrays are 0-based but binding is 1-based).\n\n       If passed an object, each object key is treated as a\n       bindable parameter name. The object keys _must_ match any\n       bindable parameter names, including any `$`, `@`, or `:`\n       prefix. Because `$` is a legal identifier chararacter in\n       JavaScript, that is the suggested prefix for bindable\n       parameters: `stmt.bind({$a: 1, $b: 2})`.\n\n       It returns this object on success and throws on\n       error. Errors include:\n\n       - Any bind index is out of range, a named bind parameter\n       does not match, or this statement has no bindable\n       parameters.\n\n       - Any value to bind is of an unsupported type.\n\n       - Passed no arguments or more than two.\n\n       - The statement has been finalized.\n    */\n    bind: function(/*[ndx,] arg*/){\n      affirmStmtOpen(this);\n      let ndx, arg;\n      switch(arguments.length){\n          case 1: ndx = 1; arg = arguments[0]; break;\n          case 2: ndx = arguments[0]; arg = arguments[1]; break;\n          default: toss3(\"Invalid bind() arguments.\");\n      }\n      if(undefined===arg){\n        /* It might seem intuitive to bind undefined as NULL\n           but this approach simplifies certain client-side\n           uses when passing on arguments between 2+ levels of\n           functions. */\n        return this;\n      }else if(!this.parameterCount){\n        toss3(\"This statement has no bindable parameters.\");\n      }\n      this._mayGet = false;\n      if(null===arg){\n        /* bind NULL */\n        return bindOne(this, ndx, BindTypes.null, arg);\n      }\n      else if(Array.isArray(arg)){\n        /* bind each entry by index */\n        if(1!==arguments.length){\n          toss3(\"When binding an array, an index argument is not permitted.\");\n        }\n        arg.forEach((v,i)=>bindOne(this, i+1, affirmSupportedBindType(v), v));\n        return this;\n      }else if(arg instanceof ArrayBuffer){\n        arg = new Uint8Array(arg);\n      }\n      if('object'===typeof arg/*null was checked above*/\n              && !util.isBindableTypedArray(arg)){\n        /* Treat each property of arg as a named bound parameter. */\n        if(1!==arguments.length){\n          toss3(\"When binding an object, an index argument is not permitted.\");\n        }\n        Object.keys(arg)\n          .forEach(k=>bindOne(this, k,\n                              affirmSupportedBindType(arg[k]),\n                              arg[k]));\n        return this;\n      }else{\n        return bindOne(this, ndx, affirmSupportedBindType(arg), arg);\n      }\n      toss3(\"Should not reach this point.\");\n    },\n    /**\n       Special case of bind() which binds the given value using the\n       BLOB binding mechanism instead of the default selected one for\n       the value. The ndx may be a numbered or named bind index. The\n       value must be of type string, null/undefined (both get treated\n       as null), or a TypedArray of a type supported by the bind()\n       API. This API cannot bind numbers as blobs.\n\n       If passed a single argument, a bind index of 1 is assumed and\n       the first argument is the value.\n    */\n    bindAsBlob: function(ndx,arg){\n      affirmStmtOpen(this);\n      if(1===arguments.length){\n        arg = ndx;\n        ndx = 1;\n      }\n      const t = affirmSupportedBindType(arg);\n      if(BindTypes.string !== t && BindTypes.blob !== t\n         && BindTypes.null !== t){\n        toss3(\"Invalid value type for bindAsBlob()\");\n      }\n      return bindOne(this, ndx, BindTypes.blob, arg);\n    },\n    /**\n       Steps the statement one time. If the result indicates that a\n       row of data is available, a truthy value is returned.\n       If no row of data is available, a falsy\n       value is returned.  Throws on error.\n    */\n    step: function(){\n      affirmUnlocked(this, 'step()');\n      const rc = capi.sqlite3_step(affirmStmtOpen(this).pointer);\n      switch(rc){\n          case capi.SQLITE_DONE: return this._mayGet = false;\n          case capi.SQLITE_ROW: return this._mayGet = true;\n          default:\n            this._mayGet = false;\n            sqlite3.config.warn(\"sqlite3_step() rc=\",rc,\n                         capi.sqlite3_js_rc_str(rc),\n                         \"SQL =\", capi.sqlite3_sql(this.pointer));\n            DB.checkRc(this.db.pointer, rc);\n      }\n    },\n    /**\n       Functions exactly like step() except that...\n\n       1) On success, it calls this.reset() and returns this object.\n       2) On error, it throws and does not call reset().\n\n       This is intended to simplify constructs like:\n\n       ```\n       for(...) {\n         stmt.bind(...).stepReset();\n       }\n       ```\n\n       Note that the reset() call makes it illegal to call this.get()\n       after the step.\n    */\n    stepReset: function(){\n      this.step();\n      return this.reset();\n    },\n    /**\n       Functions like step() except that it finalizes this statement\n       immediately after stepping unless the step cannot be performed\n       because the statement is locked. Throws on error, but any error\n       other than the statement-is-locked case will also trigger\n       finalization of this statement.\n\n       On success, it returns true if the step indicated that a row of\n       data was available, else it returns false.\n\n       This is intended to simplify use cases such as:\n\n       ```\n       aDb.prepare(\"insert into foo(a) values(?)\").bind(123).stepFinalize();\n       ```\n    */\n    stepFinalize: function(){\n      const rc = this.step();\n      this.finalize();\n      return rc;\n    },\n    /**\n       Fetches the value from the given 0-based column index of\n       the current data row, throwing if index is out of range.\n\n       Requires that step() has just returned a truthy value, else\n       an exception is thrown.\n\n       By default it will determine the data type of the result\n       automatically. If passed a second arugment, it must be one\n       of the enumeration values for sqlite3 types, which are\n       defined as members of the sqlite3 module: SQLITE_INTEGER,\n       SQLITE_FLOAT, SQLITE_TEXT, SQLITE_BLOB. Any other value,\n       except for undefined, will trigger an exception. Passing\n       undefined is the same as not passing a value. It is legal\n       to, e.g., fetch an integer value as a string, in which case\n       sqlite3 will convert the value to a string.\n\n       If ndx is an array, this function behaves a differently: it\n       assigns the indexes of the array, from 0 to the number of\n       result columns, to the values of the corresponding column,\n       and returns that array.\n\n       If ndx is a plain object, this function behaves even\n       differentlier: it assigns the properties of the object to\n       the values of their corresponding result columns.\n\n       Blobs are returned as Uint8Array instances.\n\n       Potential TODO: add type ID SQLITE_JSON, which fetches the\n       result as a string and passes it (if it's not null) to\n       JSON.parse(), returning the result of that. Until then,\n       getJSON() can be used for that.\n    */\n    get: function(ndx,asType){\n      if(!affirmStmtOpen(this)._mayGet){\n        toss3(\"Stmt.step() has not (recently) returned true.\");\n      }\n      if(Array.isArray(ndx)){\n        let i = 0;\n        while(i<this.columnCount){\n          ndx[i] = this.get(i++);\n        }\n        return ndx;\n      }else if(ndx && 'object'===typeof ndx){\n        let i = 0;\n        while(i<this.columnCount){\n          ndx[capi.sqlite3_column_name(this.pointer,i)] = this.get(i++);\n        }\n        return ndx;\n      }\n      affirmColIndex(this, ndx);\n      switch(undefined===asType\n             ? capi.sqlite3_column_type(this.pointer, ndx)\n             : asType){\n          case capi.SQLITE_NULL: return null;\n          case capi.SQLITE_INTEGER:{\n            if(wasm.bigIntEnabled){\n              const rc = capi.sqlite3_column_int64(this.pointer, ndx);\n              if(rc>=Number.MIN_SAFE_INTEGER && rc<=Number.MAX_SAFE_INTEGER){\n                /* Coerce \"normal\" number ranges to normal number values,\n                   and only return BigInt-type values for numbers out of this\n                   range. */\n                return Number(rc).valueOf();\n              }\n              return rc;\n            }else{\n              const rc = capi.sqlite3_column_double(this.pointer, ndx);\n              if(rc>Number.MAX_SAFE_INTEGER || rc<Number.MIN_SAFE_INTEGER){\n                /* Throwing here is arguable but, since we're explicitly\n                   extracting an SQLITE_INTEGER-type value, it seems fair to throw\n                   if the extracted number is out of range for that type.\n                   This policy may be laxened to simply pass on the number and\n                   hope for the best, as the C API would do. */\n                toss3(\"Integer is out of range for JS integer range: \"+rc);\n              }\n              //sqlite3.config.log(\"get integer rc=\",rc,isInt32(rc));\n              return util.isInt32(rc) ? (rc | 0) : rc;\n            }\n          }\n          case capi.SQLITE_FLOAT:\n            return capi.sqlite3_column_double(this.pointer, ndx);\n          case capi.SQLITE_TEXT:\n            return capi.sqlite3_column_text(this.pointer, ndx);\n          case capi.SQLITE_BLOB: {\n            const n = capi.sqlite3_column_bytes(this.pointer, ndx),\n                  ptr = capi.sqlite3_column_blob(this.pointer, ndx),\n                  rc = new Uint8Array(n);\n            //heap = n ? wasm.heap8() : false;\n            if(n) rc.set(wasm.heap8u().slice(ptr, ptr+n), 0);\n            //for(let i = 0; i < n; ++i) rc[i] = heap[ptr + i];\n            if(n && this.db._blobXfer instanceof Array){\n              /* This is an optimization soley for the\n                 Worker-based API. These values will be\n                 transfered to the main thread directly\n                 instead of being copied. */\n              this.db._blobXfer.push(rc.buffer);\n            }\n            return rc;\n          }\n          default: toss3(\"Don't know how to translate\",\n                         \"type of result column #\"+ndx+\".\");\n      }\n      toss3(\"Not reached.\");\n    },\n    /** Equivalent to get(ndx) but coerces the result to an\n        integer. */\n    getInt: function(ndx){return this.get(ndx,capi.SQLITE_INTEGER)},\n    /** Equivalent to get(ndx) but coerces the result to a\n        float. */\n    getFloat: function(ndx){return this.get(ndx,capi.SQLITE_FLOAT)},\n    /** Equivalent to get(ndx) but coerces the result to a\n        string. */\n    getString: function(ndx){return this.get(ndx,capi.SQLITE_TEXT)},\n    /** Equivalent to get(ndx) but coerces the result to a\n        Uint8Array. */\n    getBlob: function(ndx){return this.get(ndx,capi.SQLITE_BLOB)},\n    /**\n       A convenience wrapper around get() which fetches the value\n       as a string and then, if it is not null, passes it to\n       JSON.parse(), returning that result. Throws if parsing\n       fails. If the result is null, null is returned. An empty\n       string, on the other hand, will trigger an exception.\n    */\n    getJSON: function(ndx){\n      const s = this.get(ndx, capi.SQLITE_STRING);\n      return null===s ? s : JSON.parse(s);\n    },\n    // Design note: the only reason most of these getters have a 'get'\n    // prefix is for consistency with getVALUE_TYPE().  The latter\n    // arguably really need that prefix for API readability and the\n    // rest arguably don't, but consistency is a powerful thing.\n    /**\n       Returns the result column name of the given index, or\n       throws if index is out of bounds or this statement has been\n       finalized. This can be used without having run step()\n       first.\n    */\n    getColumnName: function(ndx){\n      return capi.sqlite3_column_name(\n        affirmColIndex(affirmStmtOpen(this),ndx).pointer, ndx\n      );\n    },\n    /**\n       If this statement potentially has result columns, this\n       function returns an array of all such names. If passed an\n       array, it is used as the target and all names are appended\n       to it. Returns the target array. Throws if this statement\n       cannot have result columns. This object's columnCount member\n       holds the number of columns.\n    */\n    getColumnNames: function(tgt=[]){\n      affirmColIndex(affirmStmtOpen(this),0);\n      for(let i = 0; i < this.columnCount; ++i){\n        tgt.push(capi.sqlite3_column_name(this.pointer, i));\n      }\n      return tgt;\n    },\n    /**\n       If this statement has named bindable parameters and the\n       given name matches one, its 1-based bind index is\n       returned. If no match is found, 0 is returned. If it has no\n       bindable parameters, the undefined value is returned.\n    */\n    getParamIndex: function(name){\n      return (affirmStmtOpen(this).parameterCount\n              ? capi.sqlite3_bind_parameter_index(this.pointer, name)\n              : undefined);\n    }\n  }/*Stmt.prototype*/;\n\n  {/* Add the `pointer` property to DB and Stmt. */\n    const prop = {\n      enumerable: true,\n      get: function(){return __ptrMap.get(this)},\n      set: ()=>toss3(\"The pointer property is read-only.\")\n    }\n    Object.defineProperty(Stmt.prototype, 'pointer', prop);\n    Object.defineProperty(DB.prototype, 'pointer', prop);\n  }\n\n  /** The OO API's public namespace. */\n  sqlite3.oo1 = {\n    DB,\n    Stmt\n  }/*oo1 object*/;\n\n  if(util.isUIThread()){\n    /**\n       Functionally equivalent to DB(storageName,'c','kvvfs') except\n       that it throws if the given storage name is not one of 'local'\n       or 'session'.\n    */\n    sqlite3.oo1.JsStorageDb = function(storageName='session'){\n      if('session'!==storageName && 'local'!==storageName){\n        toss3(\"JsStorageDb db name must be one of 'session' or 'local'.\");\n      }\n      dbCtorHelper.call(this, {\n        filename: storageName,\n        flags: 'c',\n        vfs: \"kvvfs\"\n      });\n    };\n    const jdb = sqlite3.oo1.JsStorageDb;\n    jdb.prototype = Object.create(DB.prototype);\n    /** Equivalent to sqlite3_js_kvvfs_clear(). */\n    jdb.clearStorage = capi.sqlite3_js_kvvfs_clear;\n    /**\n       Clears this database instance's storage or throws if this\n       instance has been closed. Returns the number of\n       database blocks which were cleaned up.\n    */\n    jdb.prototype.clearStorage = function(){\n      return jdb.clearStorage(affirmDbOpen(this).filename);\n    };\n    /** Equivalent to sqlite3_js_kvvfs_size(). */\n    jdb.storageSize = capi.sqlite3_js_kvvfs_size;\n    /**\n       Returns the _approximate_ number of bytes this database takes\n       up in its storage or throws if this instance has been closed.\n    */\n    jdb.prototype.storageSize = function(){\n      return jdb.storageSize(affirmDbOpen(this).filename);\n    };\n  }/*main-window-only bits*/\n\n});\n\n/* END FILE: api/sqlite3-api-oo1.js */\n/* BEGIN FILE: api/sqlite3-api-worker1.js */\n/**\n  2022-07-22\n\n  The author disclaims copyright to this source code.  In place of a\n  legal notice, here is a blessing:\n\n  *   May you do good and not evil.\n  *   May you find forgiveness for yourself and forgive others.\n  *   May you share freely, never taking more than you give.\n\n  ***********************************************************************\n\n  This file implements the initializer for SQLite's \"Worker API #1\", a\n  very basic DB access API intended to be scripted from a main window\n  thread via Worker-style messages. Because of limitations in that\n  type of communication, this API is minimalistic and only capable of\n  serving relatively basic DB requests (e.g. it cannot process nested\n  query loops concurrently).\n\n  This file requires that the core C-style sqlite3 API and OO API #1\n  have been loaded.\n*/\n\n/**\n  sqlite3.initWorker1API() implements a Worker-based wrapper around\n  SQLite3 OO API #1, colloquially known as \"Worker API #1\".\n\n  In order to permit this API to be loaded in worker threads without\n  automatically registering onmessage handlers, initializing the\n  worker API requires calling initWorker1API(). If this function is\n  called from a non-worker thread then it throws an exception.  It\n  must only be called once per Worker.\n\n  When initialized, it installs message listeners to receive Worker\n  messages and then it posts a message in the form:\n\n  ```\n  {type:'sqlite3-api', result:'worker1-ready'}\n  ```\n\n  to let the client know that it has been initialized. Clients may\n  optionally depend on this function not returning until\n  initialization is complete, as the initialization is synchronous.\n  In some contexts, however, listening for the above message is\n  a better fit.\n\n  Note that the worker-based interface can be slightly quirky because\n  of its async nature. In particular, any number of messages may be posted\n  to the worker before it starts handling any of them. If, e.g., an\n  \"open\" operation fails, any subsequent messages will fail. The\n  Promise-based wrapper for this API (`sqlite3-worker1-promiser.js`)\n  is more comfortable to use in that regard.\n\n  The documentation for the input and output worker messages for\n  this API follows...\n\n  ====================================================================\n  Common message format...\n\n  Each message posted to the worker has an operation-independent\n  envelope and operation-dependent arguments:\n\n  ```\n  {\n    type: string, // one of: 'open', 'close', 'exec', 'config-get'\n\n    messageId: OPTIONAL arbitrary value. The worker will copy it as-is\n    into response messages to assist in client-side dispatching.\n\n    dbId: a db identifier string (returned by 'open') which tells the\n    operation which database instance to work on. If not provided, the\n    first-opened db is used. This is an \"opaque\" value, with no\n    inherently useful syntax or information. Its value is subject to\n    change with any given build of this API and cannot be used as a\n    basis for anything useful beyond its one intended purpose.\n\n    args: ...operation-dependent arguments...\n\n    // the framework may add other properties for testing or debugging\n    // purposes.\n\n  }\n  ```\n\n  Response messages, posted back to the main thread, look like:\n\n  ```\n  {\n    type: string. Same as above except for error responses, which have the type\n    'error',\n\n    messageId: same value, if any, provided by the inbound message\n\n    dbId: the id of the db which was operated on, if any, as returned\n    by the corresponding 'open' operation.\n\n    result: ...operation-dependent result...\n\n  }\n  ```\n\n  ====================================================================\n  Error responses\n\n  Errors are reported messages in an operation-independent format:\n\n  ```\n  {\n    type: \"error\",\n\n    messageId: ...as above...,\n\n    dbId: ...as above...\n\n    result: {\n\n      operation: type of the triggering operation: 'open', 'close', ...\n\n      message: ...error message text...\n\n      errorClass: string. The ErrorClass.name property from the thrown exception.\n\n      input: the message object which triggered the error.\n\n      stack: _if available_, a stack trace array.\n\n    }\n\n  }\n  ```\n\n  ====================================================================\n  \"config-get\"\n\n  This operation fetches the serializable parts of the sqlite3 API\n  configuration.\n\n  Message format:\n\n  ```\n  {\n    type: \"config-get\",\n    messageId: ...as above...,\n    args: currently ignored and may be elided.\n  }\n  ```\n\n  Response:\n\n  ```\n  {\n    type: \"config-get\",\n    messageId: ...as above...,\n    result: {\n\n      version: sqlite3.version object\n\n      bigIntEnabled: bool. True if BigInt support is enabled.\n\n      vfsList: result of sqlite3.capi.sqlite3_js_vfs_list()\n   }\n  }\n  ```\n\n  ====================================================================\n  \"open\" a database\n\n  Message format:\n\n  ```\n  {\n    type: \"open\",\n    messageId: ...as above...,\n    args:{\n\n      filename [=\":memory:\" or \"\" (unspecified)]: the db filename.\n      See the sqlite3.oo1.DB constructor for peculiarities and\n      transformations,\n\n      vfs: sqlite3_vfs name. Ignored if filename is \":memory:\" or \"\".\n           This may change how the given filename is resolved.\n    }\n  }\n  ```\n\n  Response:\n\n  ```\n  {\n    type: \"open\",\n    messageId: ...as above...,\n    result: {\n      filename: db filename, possibly differing from the input.\n\n      dbId: an opaque ID value which must be passed in the message\n      envelope to other calls in this API to tell them which db to\n      use. If it is not provided to future calls, they will default to\n      operating on the least-recently-opened db. This property is, for\n      API consistency's sake, also part of the containing message\n      envelope.  Only the `open` operation includes it in the `result`\n      property.\n\n      persistent: true if the given filename resides in the\n      known-persistent storage, else false.\n\n      vfs: name of the VFS the \"main\" db is using.\n   }\n  }\n  ```\n\n  ====================================================================\n  \"close\" a database\n\n  Message format:\n\n  ```\n  {\n    type: \"close\",\n    messageId: ...as above...\n    dbId: ...as above...\n    args: OPTIONAL {unlink: boolean}\n  }\n  ```\n\n  If the `dbId` does not refer to an opened ID, this is a no-op. If\n  the `args` object contains a truthy `unlink` value then the database\n  will be unlinked (deleted) after closing it. The inability to close a\n  db (because it's not opened) or delete its file does not trigger an\n  error.\n\n  Response:\n\n  ```\n  {\n    type: \"close\",\n    messageId: ...as above...,\n    result: {\n\n      filename: filename of closed db, or undefined if no db was closed\n\n    }\n  }\n  ```\n\n  ====================================================================\n  \"exec\" SQL\n\n  All SQL execution is processed through the exec operation. It offers\n  most of the features of the oo1.DB.exec() method, with a few limitations\n  imposed by the state having to cross thread boundaries.\n\n  Message format:\n\n  ```\n  {\n    type: \"exec\",\n    messageId: ...as above...\n    dbId: ...as above...\n    args: string (SQL) or {... see below ...}\n  }\n  ```\n\n  Response:\n\n  ```\n  {\n    type: \"exec\",\n    messageId: ...as above...,\n    dbId: ...as above...\n    result: {\n      input arguments, possibly modified. See below.\n    }\n  }\n  ```\n\n  The arguments are in the same form accepted by oo1.DB.exec(), with\n  the exceptions noted below.\n\n  A function-type args.callback property cannot cross\n  the window/Worker boundary, so is not useful here. If\n  args.callback is a string then it is assumed to be a\n  message type key, in which case a callback function will be\n  applied which posts each row result via:\n\n  postMessage({type: thatKeyType,\n               rowNumber: 1-based-#,\n               row: theRow,\n               columnNames: anArray\n               })\n\n  And, at the end of the result set (whether or not any result rows\n  were produced), it will post an identical message with\n  (row=undefined, rowNumber=null) to alert the caller than the result\n  set is completed. Note that a row value of `null` is a legal row\n  result for certain arg.rowMode values.\n\n    (Design note: we don't use (row=undefined, rowNumber=undefined) to\n    indicate end-of-results because fetching those would be\n    indistinguishable from fetching from an empty object unless the\n    client used hasOwnProperty() (or similar) to distinguish \"missing\n    property\" from \"property with the undefined value\".  Similarly,\n    `null` is a legal value for `row` in some case , whereas the db\n    layer won't emit a result value of `undefined`.)\n\n  The callback proxy must not recurse into this interface. An exec()\n  call will tie up the Worker thread, causing any recursion attempt\n  to wait until the first exec() is completed.\n\n  The response is the input options object (or a synthesized one if\n  passed only a string), noting that options.resultRows and\n  options.columnNames may be populated by the call to db.exec().\n\n*/\nglobalThis.sqlite3ApiBootstrap.initializers.push(function(sqlite3){\nsqlite3.initWorker1API = function(){\n  'use strict';\n  const toss = (...args)=>{throw new Error(args.join(' '))};\n  if(!(globalThis.WorkerGlobalScope instanceof Function)){\n    toss(\"initWorker1API() must be run from a Worker thread.\");\n  }\n  const self = this.self;\n  const sqlite3 = this.sqlite3 || toss(\"Missing this.sqlite3 object.\");\n  const DB = sqlite3.oo1.DB;\n\n  /**\n     Returns the app-wide unique ID for the given db, creating one if\n     needed.\n  */\n  const getDbId = function(db){\n    let id = wState.idMap.get(db);\n    if(id) return id;\n    id = 'db#'+(++wState.idSeq)+'@'+db.pointer;\n    /** ^^^ can't simply use db.pointer b/c closing/opening may re-use\n        the same address, which could map pending messages to a wrong\n        instance. */\n    wState.idMap.set(db, id);\n    return id;\n  };\n\n  /**\n     Internal helper for managing Worker-level state.\n  */\n  const wState = {\n    /**\n       Each opened DB is added to this.dbList, and the first entry in\n       that list is the default db. As each db is closed, its entry is\n       removed from the list.\n    */\n    dbList: [],\n    /** Sequence number of dbId generation. */\n    idSeq: 0,\n    /** Map of DB instances to dbId. */\n    idMap: new WeakMap,\n    /** Temp holder for \"transferable\" postMessage() state. */\n    xfer: [],\n    open: function(opt){\n      const db = new DB(opt);\n      this.dbs[getDbId(db)] = db;\n      if(this.dbList.indexOf(db)<0) this.dbList.push(db);\n      return db;\n    },\n    close: function(db,alsoUnlink){\n      if(db){\n        delete this.dbs[getDbId(db)];\n        const filename = db.filename;\n        const pVfs = sqlite3.wasm.sqlite3_wasm_db_vfs(db.pointer, 0);\n        db.close();\n        const ddNdx = this.dbList.indexOf(db);\n        if(ddNdx>=0) this.dbList.splice(ddNdx, 1);\n        if(alsoUnlink && filename && pVfs){\n          sqlite3.wasm.sqlite3_wasm_vfs_unlink(pVfs, filename);\n        }\n      }\n    },\n    /**\n       Posts the given worker message value. If xferList is provided,\n       it must be an array, in which case a copy of it passed as\n       postMessage()'s second argument and xferList.length is set to\n       0.\n    */\n    post: function(msg,xferList){\n      if(xferList && xferList.length){\n        globalThis.postMessage( msg, Array.from(xferList) );\n        xferList.length = 0;\n      }else{\n        globalThis.postMessage(msg);\n      }\n    },\n    /** Map of DB IDs to DBs. */\n    dbs: Object.create(null),\n    /** Fetch the DB for the given id. Throw if require=true and the\n        id is not valid, else return the db or undefined. */\n    getDb: function(id,require=true){\n      return this.dbs[id]\n        || (require ? toss(\"Unknown (or closed) DB ID:\",id) : undefined);\n    }\n  };\n\n  /** Throws if the given db is falsy or not opened, else returns its\n      argument. */\n  const affirmDbOpen = function(db = wState.dbList[0]){\n    return (db && db.pointer) ? db : toss(\"DB is not opened.\");\n  };\n\n  /** Extract dbId from the given message payload. */\n  const getMsgDb = function(msgData,affirmExists=true){\n    const db = wState.getDb(msgData.dbId,false) || wState.dbList[0];\n    return affirmExists ? affirmDbOpen(db) : db;\n  };\n\n  const getDefaultDbId = function(){\n    return wState.dbList[0] && getDbId(wState.dbList[0]);\n  };\n\n  const guessVfs = function(filename){\n    const m = /^file:.+(vfs=(\\w+))/.exec(filename);\n    return sqlite3.capi.sqlite3_vfs_find(m ? m[2] : 0);\n  };\n\n  const isSpecialDbFilename = (n)=>{\n    return \"\"===n || ':'===n[0];\n  };\n\n  /**\n     A level of \"organizational abstraction\" for the Worker1\n     API. Each method in this object must map directly to a Worker1\n     message type key. The onmessage() dispatcher attempts to\n     dispatch all inbound messages to a method of this object,\n     passing it the event.data part of the inbound event object. All\n     methods must return a plain Object containing any result\n     state, which the dispatcher may amend. All methods must throw\n     on error.\n  */\n  const wMsgHandler = {\n    open: function(ev){\n      const oargs = Object.create(null), args = (ev.args || Object.create(null));\n      if(args.simulateError){ // undocumented internal testing option\n        toss(\"Throwing because of simulateError flag.\");\n      }\n      const rc = Object.create(null);\n      let byteArray, pVfs;\n      oargs.vfs = args.vfs;\n      if(isSpecialDbFilename(args.filename)){\n        oargs.filename = args.filename || \"\";\n      }else{\n        oargs.filename = args.filename;\n        byteArray = args.byteArray;\n        if(byteArray) pVfs = guessVfs(args.filename);\n      }\n      if(pVfs){\n        /* 2022-11-02: this feature is as-yet untested except that\n           sqlite3_wasm_vfs_create_file() has been tested from the\n           browser dev console. */\n        let pMem;\n        try{\n          pMem = sqlite3.wasm.allocFromTypedArray(byteArray);\n          const rc = sqlite3.wasm.sqlite3_wasm_vfs_create_file(\n            pVfs, oargs.filename, pMem, byteArray.byteLength\n          );\n          if(rc) sqlite3.SQLite3Error.toss(rc);\n        }catch(e){\n          throw new sqlite3.SQLite3Error(\n            e.name+' creating '+args.filename+\": \"+e.message, {\n              cause: e\n            }\n          );\n        }finally{\n          if(pMem) sqlite3.wasm.dealloc(pMem);\n        }\n      }\n      const db = wState.open(oargs);\n      rc.filename = db.filename;\n      rc.persistent = !!sqlite3.capi.sqlite3_js_db_uses_vfs(db.pointer, \"opfs\");\n      rc.dbId = getDbId(db);\n      rc.vfs = db.dbVfsName();\n      return rc;\n    },\n\n    close: function(ev){\n      const db = getMsgDb(ev,false);\n      const response = {\n        filename: db && db.filename\n      };\n      if(db){\n        const doUnlink = ((ev.args && 'object'===typeof ev.args)\n                         ? !!ev.args.unlink : false);\n        wState.close(db, doUnlink);\n      }\n      return response;\n    },\n\n    exec: function(ev){\n      const rc = (\n        'string'===typeof ev.args\n      ) ? {sql: ev.args} : (ev.args || Object.create(null));\n      if('stmt'===rc.rowMode){\n        toss(\"Invalid rowMode for 'exec': stmt mode\",\n             \"does not work in the Worker API.\");\n      }else if(!rc.sql){\n        toss(\"'exec' requires input SQL.\");\n      }\n      const db = getMsgDb(ev);\n      if(rc.callback || Array.isArray(rc.resultRows)){\n        // Part of a copy-avoidance optimization for blobs\n        db._blobXfer = wState.xfer;\n      }\n      const theCallback = rc.callback;\n      let rowNumber = 0;\n      const hadColNames = !!rc.columnNames;\n      if('string' === typeof theCallback){\n        if(!hadColNames) rc.columnNames = [];\n        /* Treat this as a worker message type and post each\n           row as a message of that type. */\n        rc.callback = function(row,stmt){\n          wState.post({\n            type: theCallback,\n            columnNames: rc.columnNames,\n            rowNumber: ++rowNumber,\n            row: row\n          }, wState.xfer);\n        }\n      }\n      try {\n        db.exec(rc);\n        if(rc.callback instanceof Function){\n          rc.callback = theCallback;\n          /* Post a sentinel message to tell the client that the end\n             of the result set has been reached (possibly with zero\n             rows). */\n          wState.post({\n            type: theCallback,\n            columnNames: rc.columnNames,\n            rowNumber: null /*null to distinguish from \"property not set\"*/,\n            row: undefined /*undefined because null is a legal row value\n                             for some rowType values, but undefined is not*/\n          });\n        }\n      }finally{\n        delete db._blobXfer;\n        if(rc.callback) rc.callback = theCallback;\n      }\n      return rc;\n    }/*exec()*/,\n\n    'config-get': function(){\n      const rc = Object.create(null), src = sqlite3.config;\n      [\n        'bigIntEnabled'\n      ].forEach(function(k){\n        if(Object.getOwnPropertyDescriptor(src, k)) rc[k] = src[k];\n      });\n      rc.version = sqlite3.version;\n      rc.vfsList = sqlite3.capi.sqlite3_js_vfs_list();\n      rc.opfsEnabled = !!sqlite3.opfs;\n      return rc;\n    },\n\n    /**\n       Exports the database to a byte array, as per\n       sqlite3_serialize(). Response is an object:\n\n       {\n         byteArray:  Uint8Array (db file contents),\n         filename: the current db filename,\n         mimetype: 'application/x-sqlite3'\n       }\n    */\n    export: function(ev){\n      const db = getMsgDb(ev);\n      const response = {\n        byteArray: sqlite3.capi.sqlite3_js_db_export(db.pointer),\n        filename: db.filename,\n        mimetype: 'application/x-sqlite3'\n      };\n      wState.xfer.push(response.byteArray.buffer);\n      return response;\n    }/*export()*/,\n\n    toss: function(ev){\n      toss(\"Testing worker exception\");\n    },\n\n    'opfs-tree': async function(ev){\n      if(!sqlite3.opfs) toss(\"OPFS support is unavailable.\");\n      const response = await sqlite3.opfs.treeList();\n      return response;\n    }\n  }/*wMsgHandler*/;\n\n  globalThis.onmessage = async function(ev){\n    ev = ev.data;\n    let result, dbId = ev.dbId, evType = ev.type;\n    const arrivalTime = performance.now();\n    try {\n      if(wMsgHandler.hasOwnProperty(evType) &&\n         wMsgHandler[evType] instanceof Function){\n        result = await wMsgHandler[evType](ev);\n      }else{\n        toss(\"Unknown db worker message type:\",ev.type);\n      }\n    }catch(err){\n      evType = 'error';\n      result = {\n        operation: ev.type,\n        message: err.message,\n        errorClass: err.name,\n        input: ev\n      };\n      if(err.stack){\n        result.stack = ('string'===typeof err.stack)\n          ? err.stack.split(/\\n\\s*/) : err.stack;\n      }\n      if(0) sqlite3.config.warn(\"Worker is propagating an exception to main thread.\",\n                                \"Reporting it _here_ for the stack trace:\",err,result);\n    }\n    if(!dbId){\n      dbId = result.dbId/*from 'open' cmd*/\n        || getDefaultDbId();\n    }\n    // Timing info is primarily for use in testing this API. It's not part of\n    // the public API. arrivalTime = when the worker got the message.\n    wState.post({\n      type: evType,\n      dbId: dbId,\n      messageId: ev.messageId,\n      workerReceivedTime: arrivalTime,\n      workerRespondTime: performance.now(),\n      departureTime: ev.departureTime,\n      // TODO: move the timing bits into...\n      //timing:{\n      //  departure: ev.departureTime,\n      //  workerReceived: arrivalTime,\n      //  workerResponse: performance.now();\n      //},\n      result: result\n    }, wState.xfer);\n  };\n  globalThis.postMessage({type:'sqlite3-api',result:'worker1-ready'});\n}.bind({self, sqlite3});\n});\n/* END FILE: api/sqlite3-api-worker1.js */\n/* BEGIN FILE: api/sqlite3-v-helper.js */\n/*\n** 2022-11-30\n**\n** The author disclaims copyright to this source code.  In place of a\n** legal notice, here is a blessing:\n**\n** *   May you do good and not evil.\n** *   May you find forgiveness for yourself and forgive others.\n** *   May you share freely, never taking more than you give.\n*/\n\n/**\n   This file installs sqlite3.vfs, and object which exists to assist\n   in the creation of JavaScript implementations of sqlite3_vfs, along\n   with its virtual table counterpart, sqlite3.vtab.\n*/\n'use strict';\nglobalThis.sqlite3ApiBootstrap.initializers.push(function(sqlite3){\n  const wasm = sqlite3.wasm, capi = sqlite3.capi, toss = sqlite3.util.toss3;\n  const vfs = Object.create(null), vtab = Object.create(null);\n\n  const StructBinder = sqlite3.StructBinder\n  /* we require a local alias b/c StructBinder is removed from the sqlite3\n     object during the final steps of the API cleanup. */;\n  sqlite3.vfs = vfs;\n  sqlite3.vtab = vtab;\n\n  const sii = capi.sqlite3_index_info;\n  /**\n     If n is >=0 and less than this.$nConstraint, this function\n     returns either a WASM pointer to the 0-based nth entry of\n     this.$aConstraint (if passed a truthy 2nd argument) or an\n     sqlite3_index_info.sqlite3_index_constraint object wrapping that\n     address (if passed a falsy value or no 2nd argument). Returns a\n     falsy value if n is out of range.\n  */\n  sii.prototype.nthConstraint = function(n, asPtr=false){\n    if(n<0 || n>=this.$nConstraint) return false;\n    const ptr = this.$aConstraint + (\n      sii.sqlite3_index_constraint.structInfo.sizeof * n\n    );\n    return asPtr ? ptr : new sii.sqlite3_index_constraint(ptr);\n  };\n\n  /**\n     Works identically to nthConstraint() but returns state from\n     this.$aConstraintUsage, so returns an\n     sqlite3_index_info.sqlite3_index_constraint_usage instance\n     if passed no 2nd argument or a falsy 2nd argument.\n  */\n  sii.prototype.nthConstraintUsage = function(n, asPtr=false){\n    if(n<0 || n>=this.$nConstraint) return false;\n    const ptr = this.$aConstraintUsage + (\n      sii.sqlite3_index_constraint_usage.structInfo.sizeof * n\n    );\n    return asPtr ? ptr : new sii.sqlite3_index_constraint_usage(ptr);\n  };\n\n  /**\n     If n is >=0 and less than this.$nOrderBy, this function\n     returns either a WASM pointer to the 0-based nth entry of\n     this.$aOrderBy (if passed a truthy 2nd argument) or an\n     sqlite3_index_info.sqlite3_index_orderby object wrapping that\n     address (if passed a falsy value or no 2nd argument). Returns a\n     falsy value if n is out of range.\n  */\n  sii.prototype.nthOrderBy = function(n, asPtr=false){\n    if(n<0 || n>=this.$nOrderBy) return false;\n    const ptr = this.$aOrderBy + (\n      sii.sqlite3_index_orderby.structInfo.sizeof * n\n    );\n    return asPtr ? ptr : new sii.sqlite3_index_orderby(ptr);\n  };\n\n  /**\n     Installs a StructBinder-bound function pointer member of the\n     given name and function in the given StructType target object.\n\n     It creates a WASM proxy for the given function and arranges for\n     that proxy to be cleaned up when tgt.dispose() is called. Throws\n     on the slightest hint of error, e.g. tgt is-not-a StructType,\n     name does not map to a struct-bound member, etc.\n\n     As a special case, if the given function is a pointer, then\n     `wasm.functionEntry()` is used to validate that it is a known\n     function. If so, it is used as-is with no extra level of proxying\n     or cleanup, else an exception is thrown. It is legal to pass a\n     value of 0, indicating a NULL pointer, with the caveat that 0\n     _is_ a legal function pointer in WASM but it will not be accepted\n     as such _here_. (Justification: the function at address zero must\n     be one which initially came from the WASM module, not a method we\n     want to bind to a virtual table or VFS.)\n\n     This function returns a proxy for itself which is bound to tgt\n     and takes 2 args (name,func). That function returns the same\n     thing as this one, permitting calls to be chained.\n\n     If called with only 1 arg, it has no side effects but returns a\n     func with the same signature as described above.\n\n     ACHTUNG: because we cannot generically know how to transform JS\n     exceptions into result codes, the installed functions do no\n     automatic catching of exceptions. It is critical, to avoid \n     undefined behavior in the C layer, that methods mapped via\n     this function do not throw. The exception, as it were, to that\n     rule is...\n\n     If applyArgcCheck is true then each JS function (as opposed to\n     function pointers) gets wrapped in a proxy which asserts that it\n     is passed the expected number of arguments, throwing if the\n     argument count does not match expectations. That is only intended\n     for dev-time usage for sanity checking, and will leave the C\n     environment in an undefined state.\n  */\n  const installMethod = function callee(\n    tgt, name, func, applyArgcCheck = callee.installMethodArgcCheck\n  ){\n    if(!(tgt instanceof StructBinder.StructType)){\n      toss(\"Usage error: target object is-not-a StructType.\");\n    }else if(!(func instanceof Function) && !wasm.isPtr(func)){\n      toss(\"Usage errror: expecting a Function or WASM pointer to one.\");\n    }\n    if(1===arguments.length){\n      return (n,f)=>callee(tgt, n, f, applyArgcCheck);\n    }\n    if(!callee.argcProxy){\n      callee.argcProxy = function(tgt, funcName, func,sig){\n        return function(...args){\n          if(func.length!==arguments.length){\n            toss(\"Argument mismatch for\",\n                 tgt.structInfo.name+\"::\"+funcName\n                 +\": Native signature is:\",sig);\n          }\n          return func.apply(this, args);\n        }\n      };\n      /* An ondispose() callback for use with\n         StructBinder-created types. */\n      callee.removeFuncList = function(){\n        if(this.ondispose.__removeFuncList){\n          this.ondispose.__removeFuncList.forEach(\n            (v,ndx)=>{\n              if('number'===typeof v){\n                try{wasm.uninstallFunction(v)}\n                catch(e){/*ignore*/}\n              }\n              /* else it's a descriptive label for the next number in\n                 the list. */\n            }\n          );\n          delete this.ondispose.__removeFuncList;\n        }\n      };\n    }/*static init*/\n    const sigN = tgt.memberSignature(name);\n    if(sigN.length<2){\n      toss(\"Member\",name,\"does not have a function pointer signature:\",sigN);\n    }\n    const memKey = tgt.memberKey(name);\n    const fProxy = (applyArgcCheck && !wasm.isPtr(func))\n    /** This middle-man proxy is only for use during development, to\n        confirm that we always pass the proper number of\n        arguments. We know that the C-level code will always use the\n        correct argument count. */\n          ? callee.argcProxy(tgt, memKey, func, sigN)\n          : func;\n    if(wasm.isPtr(fProxy)){\n      if(fProxy && !wasm.functionEntry(fProxy)){\n        toss(\"Pointer\",fProxy,\"is not a WASM function table entry.\");\n      }\n      tgt[memKey] = fProxy;\n    }else{\n      const pFunc = wasm.installFunction(fProxy, tgt.memberSignature(name, true));\n      tgt[memKey] = pFunc;\n      if(!tgt.ondispose || !tgt.ondispose.__removeFuncList){\n        tgt.addOnDispose('ondispose.__removeFuncList handler',\n                         callee.removeFuncList);\n        tgt.ondispose.__removeFuncList = [];\n      }\n      tgt.ondispose.__removeFuncList.push(memKey, pFunc);\n    }\n    return (n,f)=>callee(tgt, n, f, applyArgcCheck);\n  }/*installMethod*/;\n  installMethod.installMethodArgcCheck = false;\n\n  /**\n     Installs methods into the given StructType-type instance. Each\n     entry in the given methods object must map to a known member of\n     the given StructType, else an exception will be triggered.  See\n     installMethod() for more details, including the semantics of the\n     3rd argument.\n\n     As an exception to the above, if any two or more methods in the\n     2nd argument are the exact same function, installMethod() is\n     _not_ called for the 2nd and subsequent instances, and instead\n     those instances get assigned the same method pointer which is\n     created for the first instance. This optimization is primarily to\n     accommodate special handling of sqlite3_module::xConnect and\n     xCreate methods.\n\n     On success, returns its first argument. Throws on error.\n  */\n  const installMethods = function(\n    structInstance, methods, applyArgcCheck = installMethod.installMethodArgcCheck\n  ){\n    const seen = new Map /* map of <Function, memberName> */;\n    for(const k of Object.keys(methods)){\n      const m = methods[k];\n      const prior = seen.get(m);\n      if(prior){\n        const mkey = structInstance.memberKey(k);\n        structInstance[mkey] = structInstance[structInstance.memberKey(prior)];\n      }else{\n        installMethod(structInstance, k, m, applyArgcCheck);\n        seen.set(m, k);\n      }\n    }\n    return structInstance;\n  };\n\n  /**\n     Equivalent to calling installMethod(this,...arguments) with a\n     first argument of this object. If called with 1 or 2 arguments\n     and the first is an object, it's instead equivalent to calling\n     installMethods(this,...arguments).\n  */\n  StructBinder.StructType.prototype.installMethod = function callee(\n    name, func, applyArgcCheck = installMethod.installMethodArgcCheck\n  ){\n    return (arguments.length < 3 && name && 'object'===typeof name)\n      ? installMethods(this, ...arguments)\n      : installMethod(this, ...arguments);\n  };\n\n  /**\n     Equivalent to calling installMethods() with a first argument\n     of this object.\n  */\n  StructBinder.StructType.prototype.installMethods = function(\n    methods, applyArgcCheck = installMethod.installMethodArgcCheck\n  ){\n    return installMethods(this, methods, applyArgcCheck);\n  };\n\n  /**\n     Uses sqlite3_vfs_register() to register this\n     sqlite3.capi.sqlite3_vfs. This object must have already been\n     filled out properly. If the first argument is truthy, the VFS is\n     registered as the default VFS, else it is not.\n\n     On success, returns this object. Throws on error.\n  */\n  capi.sqlite3_vfs.prototype.registerVfs = function(asDefault=false){\n    if(!(this instanceof sqlite3.capi.sqlite3_vfs)){\n      toss(\"Expecting a sqlite3_vfs-type argument.\");\n    }\n    const rc = capi.sqlite3_vfs_register(this, asDefault ? 1 : 0);\n    if(rc){\n      toss(\"sqlite3_vfs_register(\",this,\") failed with rc\",rc);\n    }\n    if(this.pointer !== capi.sqlite3_vfs_find(this.$zName)){\n      toss(\"BUG: sqlite3_vfs_find(vfs.$zName) failed for just-installed VFS\",\n           this);\n    }\n    return this;\n  };\n\n  /**\n     A wrapper for installMethods() or registerVfs() to reduce\n     installation of a VFS and/or its I/O methods to a single\n     call.\n\n     Accepts an object which contains the properties \"io\" and/or\n     \"vfs\", each of which is itself an object with following properties:\n\n     - `struct`: an sqlite3.StructType-type struct. This must be a\n       populated (except for the methods) object of type\n       sqlite3_io_methods (for the \"io\" entry) or sqlite3_vfs (for the\n       \"vfs\" entry).\n\n     - `methods`: an object mapping sqlite3_io_methods method names\n       (e.g. 'xClose') to JS implementations of those methods. The JS\n       implementations must be call-compatible with their native\n       counterparts.\n\n     For each of those object, this function passes its (`struct`,\n     `methods`, (optional) `applyArgcCheck`) properties to\n     installMethods().\n\n     If the `vfs` entry is set then:\n\n     - Its `struct` property's registerVfs() is called. The\n       `vfs` entry may optionally have an `asDefault` property, which\n       gets passed as the argument to registerVfs().\n\n     - If `struct.$zName` is falsy and the entry has a string-type\n       `name` property, `struct.$zName` is set to the C-string form of\n       that `name` value before registerVfs() is called.\n\n     On success returns this object. Throws on error.\n  */\n  vfs.installVfs = function(opt){\n    let count = 0;\n    const propList = ['io','vfs'];\n    for(const key of propList){\n      const o = opt[key];\n      if(o){\n        ++count;\n        installMethods(o.struct, o.methods, !!o.applyArgcCheck);\n        if('vfs'===key){\n          if(!o.struct.$zName && 'string'===typeof o.name){\n            o.struct.addOnDispose(\n              o.struct.$zName = wasm.allocCString(o.name)\n            );\n          }\n          o.struct.registerVfs(!!o.asDefault);\n        }\n      }\n    }\n    if(!count) toss(\"Misuse: installVfs() options object requires at least\",\n                    \"one of:\", propList);\n    return this;\n  };\n\n  /**\n     Internal factory function for xVtab and xCursor impls.\n  */\n  const __xWrapFactory = function(methodName,StructType){\n    return function(ptr,removeMapping=false){\n      if(0===arguments.length) ptr = new StructType;\n      if(ptr instanceof StructType){\n        //T.assert(!this.has(ptr.pointer));\n        this.set(ptr.pointer, ptr);\n        return ptr;\n      }else if(!wasm.isPtr(ptr)){\n        sqlite3.SQLite3Error.toss(\"Invalid argument to\",methodName+\"()\");\n      }\n      let rc = this.get(ptr);\n      if(removeMapping) this.delete(ptr);\n      return rc;\n    }.bind(new Map);\n  };\n\n  /**\n     A factory function which implements a simple lifetime manager for\n     mappings between C struct pointers and their JS-level wrappers.\n     The first argument must be the logical name of the manager\n     (e.g. 'xVtab' or 'xCursor'), which is only used for error\n     reporting. The second must be the capi.XYZ struct-type value,\n     e.g. capi.sqlite3_vtab or capi.sqlite3_vtab_cursor.\n\n     Returns an object with 4 methods: create(), get(), unget(), and\n     dispose(), plus a StructType member with the value of the 2nd\n     argument. The methods are documented in the body of this\n     function.\n  */\n  const StructPtrMapper = function(name, StructType){\n    const __xWrap = __xWrapFactory(name,StructType);\n    /**\n       This object houses a small API for managing mappings of (`T*`)\n       to StructType<T> objects, specifically within the lifetime\n       requirements of sqlite3_module methods.\n    */\n    return Object.assign(Object.create(null),{\n      /** The StructType object for this object's API. */\n      StructType,\n      /**\n         Creates a new StructType object, writes its `pointer`\n         value to the given output pointer, and returns that\n         object. Its intended usage depends on StructType:\n\n         sqlite3_vtab: to be called from sqlite3_module::xConnect()\n         or xCreate() implementations.\n\n         sqlite3_vtab_cursor: to be called from xOpen().\n\n         This will throw if allocation of the StructType instance\n         fails or if ppOut is not a pointer-type value.\n      */\n      create: (ppOut)=>{\n        const rc = __xWrap();\n        wasm.pokePtr(ppOut, rc.pointer);\n        return rc;\n      },\n      /**\n         Returns the StructType object previously mapped to the\n         given pointer using create(). Its intended usage depends\n         on StructType:\n\n         sqlite3_vtab: to be called from sqlite3_module methods which\n         take a (sqlite3_vtab*) pointer _except_ for\n         xDestroy()/xDisconnect(), in which case unget() or dispose().\n\n         sqlite3_vtab_cursor: to be called from any sqlite3_module methods\n         which take a `sqlite3_vtab_cursor*` argument except xClose(),\n         in which case use unget() or dispose().\n\n         Rule to remember: _never_ call dispose() on an instance\n         returned by this function.\n      */\n      get: (pCObj)=>__xWrap(pCObj),\n      /**\n         Identical to get() but also disconnects the mapping between the\n         given pointer and the returned StructType object, such that\n         future calls to this function or get() with the same pointer\n         will return the undefined value. Its intended usage depends\n         on StructType:\n\n         sqlite3_vtab: to be called from sqlite3_module::xDisconnect() or\n         xDestroy() implementations or in error handling of a failed\n         xCreate() or xConnect().\n\n         sqlite3_vtab_cursor: to be called from xClose() or during\n         cleanup in a failed xOpen().\n\n         Calling this method obligates the caller to call dispose() on\n         the returned object when they're done with it.\n      */\n      unget: (pCObj)=>__xWrap(pCObj,true),\n      /**\n         Works like unget() plus it calls dispose() on the\n         StructType object.\n      */\n      dispose: (pCObj)=>{\n        const o = __xWrap(pCObj,true);\n        if(o) o.dispose();\n      }\n    });\n  };\n\n  /**\n     A lifetime-management object for mapping `sqlite3_vtab*`\n     instances in sqlite3_module methods to capi.sqlite3_vtab\n     objects.\n\n     The API docs are in the API-internal StructPtrMapper().\n  */\n  vtab.xVtab = StructPtrMapper('xVtab', capi.sqlite3_vtab);\n\n  /**\n     A lifetime-management object for mapping `sqlite3_vtab_cursor*`\n     instances in sqlite3_module methods to capi.sqlite3_vtab_cursor\n     objects.\n\n     The API docs are in the API-internal StructPtrMapper().\n  */\n  vtab.xCursor = StructPtrMapper('xCursor', capi.sqlite3_vtab_cursor);\n\n  /**\n     Convenience form of creating an sqlite3_index_info wrapper,\n     intended for use in xBestIndex implementations. Note that the\n     caller is expected to call dispose() on the returned object\n     before returning. Though not _strictly_ required, as that object\n     does not own the pIdxInfo memory, it is nonetheless good form.\n  */\n  vtab.xIndexInfo = (pIdxInfo)=>new capi.sqlite3_index_info(pIdxInfo);\n\n  /**\n     Given an error object, this function returns\n     sqlite3.capi.SQLITE_NOMEM if (e instanceof\n     sqlite3.WasmAllocError), else it returns its\n     second argument. Its intended usage is in the methods\n     of a sqlite3_vfs or sqlite3_module:\n\n     ```\n     try{\n      let rc = ...\n      return rc;\n     }catch(e){\n       return sqlite3.vtab.exceptionToRc(e, sqlite3.capi.SQLITE_XYZ);\n       // where SQLITE_XYZ is some call-appropriate result code.\n     }\n     ```\n  */\n  /**vfs.exceptionToRc = vtab.exceptionToRc =\n    (e, defaultRc=capi.SQLITE_ERROR)=>(\n      (e instanceof sqlite3.WasmAllocError)\n        ? capi.SQLITE_NOMEM\n        : defaultRc\n    );*/\n\n  /**\n     Given an sqlite3_module method name and error object, this\n     function returns sqlite3.capi.SQLITE_NOMEM if (e instanceof\n     sqlite3.WasmAllocError), else it returns its second argument. Its\n     intended usage is in the methods of a sqlite3_vfs or\n     sqlite3_module:\n\n     ```\n     try{\n      let rc = ...\n      return rc;\n     }catch(e){\n       return sqlite3.vtab.xError(\n                'xColumn', e, sqlite3.capi.SQLITE_XYZ);\n       // where SQLITE_XYZ is some call-appropriate result code.\n     }\n     ```\n\n     If no 3rd argument is provided, its default depends on\n     the error type:\n\n     - An sqlite3.WasmAllocError always resolves to capi.SQLITE_NOMEM.\n\n     - If err is an SQLite3Error then its `resultCode` property\n       is used.\n\n     - If all else fails, capi.SQLITE_ERROR is used.\n\n     If xError.errorReporter is a function, it is called in\n     order to report the error, else the error is not reported.\n     If that function throws, that exception is ignored.\n  */\n  vtab.xError = function f(methodName, err, defaultRc){\n    if(f.errorReporter instanceof Function){\n      try{f.errorReporter(\"sqlite3_module::\"+methodName+\"(): \"+err.message);}\n      catch(e){/*ignored*/}\n    }\n    let rc;\n    if(err instanceof sqlite3.WasmAllocError) rc = capi.SQLITE_NOMEM;\n    else if(arguments.length>2) rc = defaultRc;\n    else if(err instanceof sqlite3.SQLite3Error) rc = err.resultCode;\n    return rc || capi.SQLITE_ERROR;\n  };\n  vtab.xError.errorReporter = 1 ? console.error.bind(console) : false;\n\n  /**\n     \"The problem\" with this is that it introduces an outer function with\n     a different arity than the passed-in method callback. That means we\n     cannot do argc validation on these. Additionally, some methods (namely\n     xConnect) may have call-specific error handling. It would be a shame to\n     hard-coded that per-method support in this function.\n  */\n  /** vtab.methodCatcher = function(methodName, method, defaultErrRc=capi.SQLITE_ERROR){\n    return function(...args){\n      try { method(...args); }\n      }catch(e){ return vtab.xError(methodName, e, defaultRc) }\n  };\n  */\n\n  /**\n     A helper for sqlite3_vtab::xRowid() and xUpdate()\n     implementations. It must be passed the final argument to one of\n     those methods (an output pointer to an int64 row ID) and the\n     value to store at the output pointer's address. Returns the same\n     as wasm.poke() and will throw if the 1st or 2nd arguments\n     are invalid for that function.\n\n     Example xRowid impl:\n\n     ```\n     const xRowid = (pCursor, ppRowid64)=>{\n       const c = vtab.xCursor(pCursor);\n       vtab.xRowid(ppRowid64, c.myRowId);\n       return 0;\n     };\n     ```\n  */\n  vtab.xRowid = (ppRowid64, value)=>wasm.poke(ppRowid64, value, 'i64');\n\n  /**\n     A helper to initialize and set up an sqlite3_module object for\n     later installation into individual databases using\n     sqlite3_create_module(). Requires an object with the following\n     properties:\n\n     - `methods`: an object containing a mapping of properties with\n       the C-side names of the sqlite3_module methods, e.g. xCreate,\n       xBestIndex, etc., to JS implementations for those functions.\n       Certain special-case handling is performed, as described below.\n\n     - `catchExceptions` (default=false): if truthy, the given methods\n       are not mapped as-is, but are instead wrapped inside wrappers\n       which translate exceptions into result codes of SQLITE_ERROR or\n       SQLITE_NOMEM, depending on whether the exception is an\n       sqlite3.WasmAllocError. In the case of the xConnect and xCreate\n       methods, the exception handler also sets the output error\n       string to the exception's error string.\n\n     - OPTIONAL `struct`: a sqlite3.capi.sqlite3_module() instance. If\n       not set, one will be created automatically. If the current\n       \"this\" is-a sqlite3_module then it is unconditionally used in\n       place of `struct`.\n\n     - OPTIONAL `iVersion`: if set, it must be an integer value and it\n       gets assigned to the `$iVersion` member of the struct object.\n       If it's _not_ set, and the passed-in `struct` object's `$iVersion`\n       is 0 (the default) then this function attempts to define a value\n       for that property based on the list of methods it has.\n\n     If `catchExceptions` is false, it is up to the client to ensure\n     that no exceptions escape the methods, as doing so would move\n     them through the C API, leading to undefined\n     behavior. (vtab.xError() is intended to assist in reporting\n     such exceptions.)\n\n     Certain methods may refer to the same implementation. To simplify\n     the definition of such methods:\n\n     - If `methods.xConnect` is `true` then the value of\n       `methods.xCreate` is used in its place, and vice versa. sqlite\n       treats xConnect/xCreate functions specially if they are exactly\n       the same function (same pointer value).\n\n     - If `methods.xDisconnect` is true then the value of\n       `methods.xDestroy` is used in its place, and vice versa.\n\n     This is to facilitate creation of those methods inline in the\n     passed-in object without requiring the client to explicitly get a\n     reference to one of them in order to assign it to the other\n     one. \n\n     The `catchExceptions`-installed handlers will account for\n     identical references to the above functions and will install the\n     same wrapper function for both.\n\n     The given methods are expected to return integer values, as\n     expected by the C API. If `catchExceptions` is truthy, the return\n     value of the wrapped function will be used as-is and will be\n     translated to 0 if the function returns a falsy value (e.g. if it\n     does not have an explicit return). If `catchExceptions` is _not_\n     active, the method implementations must explicitly return integer\n     values.\n\n     Throws on error. On success, returns the sqlite3_module object\n     (`this` or `opt.struct` or a new sqlite3_module instance,\n     depending on how it's called).\n  */\n  vtab.setupModule = function(opt){\n    let createdMod = false;\n    const mod = (this instanceof capi.sqlite3_module)\n          ? this : (opt.struct || (createdMod = new capi.sqlite3_module()));\n    try{\n      const methods = opt.methods || toss(\"Missing 'methods' object.\");\n      for(const e of Object.entries({\n        // -----^ ==> [k,v] triggers a broken code transformation in\n        // some versions of the emsdk toolchain.\n        xConnect: 'xCreate', xDisconnect: 'xDestroy'\n      })){\n        // Remap X=true to X=Y for certain X/Y combinations\n        const k = e[0], v = e[1];\n        if(true === methods[k]) methods[k] = methods[v];\n        else if(true === methods[v]) methods[v] = methods[k];\n      }\n      if(opt.catchExceptions){\n        const fwrap = function(methodName, func){\n          if(['xConnect','xCreate'].indexOf(methodName) >= 0){\n            return function(pDb, pAux, argc, argv, ppVtab, pzErr){\n              try{return func(...arguments) || 0}\n              catch(e){\n                if(!(e instanceof sqlite3.WasmAllocError)){\n                  wasm.dealloc(wasm.peekPtr(pzErr));\n                  wasm.pokePtr(pzErr, wasm.allocCString(e.message));\n                }\n                return vtab.xError(methodName, e);\n              }\n            };\n          }else{\n            return function(...args){\n              try{return func(...args) || 0}\n              catch(e){\n                return vtab.xError(methodName, e);\n              }\n            };\n          }\n        };\n        const mnames = [\n          'xCreate', 'xConnect', 'xBestIndex', 'xDisconnect',\n          'xDestroy', 'xOpen', 'xClose', 'xFilter', 'xNext',\n          'xEof', 'xColumn', 'xRowid', 'xUpdate',\n          'xBegin', 'xSync', 'xCommit', 'xRollback',\n          'xFindFunction', 'xRename', 'xSavepoint', 'xRelease',\n          'xRollbackTo', 'xShadowName'\n        ];\n        const remethods = Object.create(null);\n        for(const k of mnames){\n          const m = methods[k];\n          if(!(m instanceof Function)) continue;\n          else if('xConnect'===k && methods.xCreate===m){\n            remethods[k] = methods.xCreate;\n          }else if('xCreate'===k && methods.xConnect===m){\n            remethods[k] = methods.xConnect;\n          }else{\n            remethods[k] = fwrap(k, m);\n          }\n        }\n        installMethods(mod, remethods, false);\n      }else{\n        // No automatic exception handling. Trust the client\n        // to not throw.\n        installMethods(\n          mod, methods, !!opt.applyArgcCheck/*undocumented option*/\n        );\n      }\n      if(0===mod.$iVersion){\n        let v;\n        if('number'===typeof opt.iVersion) v = opt.iVersion;\n        else if(mod.$xShadowName) v = 3;\n        else if(mod.$xSavePoint || mod.$xRelease || mod.$xRollbackTo) v = 2;\n        else v = 1;\n        mod.$iVersion = v;\n      }\n    }catch(e){\n      if(createdMod) createdMod.dispose();\n      throw e;\n    }\n    return mod;\n  }/*setupModule()*/;\n\n  /**\n     Equivalent to calling vtab.setupModule() with this sqlite3_module\n     object as the call's `this`.\n  */\n  capi.sqlite3_module.prototype.setupModule = function(opt){\n    return vtab.setupModule.call(this, opt);\n  };\n}/*sqlite3ApiBootstrap.initializers.push()*/);\n/* END FILE: api/sqlite3-v-helper.js */\n/* BEGIN FILE: api/sqlite3-vfs-opfs.c-pp.js */\n/*\n  2022-09-18\n\n  The author disclaims copyright to this source code.  In place of a\n  legal notice, here is a blessing:\n\n  *   May you do good and not evil.\n  *   May you find forgiveness for yourself and forgive others.\n  *   May you share freely, never taking more than you give.\n\n  ***********************************************************************\n\n  This file holds the synchronous half of an sqlite3_vfs\n  implementation which proxies, in a synchronous fashion, the\n  asynchronous Origin-Private FileSystem (OPFS) APIs using a second\n  Worker, implemented in sqlite3-opfs-async-proxy.js.  This file is\n  intended to be appended to the main sqlite3 JS deliverable somewhere\n  after sqlite3-api-oo1.js and before sqlite3-api-cleanup.js.\n*/\n'use strict';\nglobalThis.sqlite3ApiBootstrap.initializers.push(function(sqlite3){\n/**\n   installOpfsVfs() returns a Promise which, on success, installs an\n   sqlite3_vfs named \"opfs\", suitable for use with all sqlite3 APIs\n   which accept a VFS. It is intended to be called via\n   sqlite3ApiBootstrap.initializersAsync or an equivalent mechanism.\n\n   The installed VFS uses the Origin-Private FileSystem API for\n   all file storage. On error it is rejected with an exception\n   explaining the problem. Reasons for rejection include, but are\n   not limited to:\n\n   - The counterpart Worker (see below) could not be loaded.\n\n   - The environment does not support OPFS. That includes when\n     this function is called from the main window thread.\n\n  Significant notes and limitations:\n\n  - As of this writing, OPFS is still very much in flux and only\n    available in bleeding-edge versions of Chrome (v102+, noting that\n    that number will increase as the OPFS API matures).\n\n  - The OPFS features used here are only available in dedicated Worker\n    threads. This file tries to detect that case, resulting in a\n    rejected Promise if those features do not seem to be available.\n\n  - It requires the SharedArrayBuffer and Atomics classes, and the\n    former is only available if the HTTP server emits the so-called\n    COOP and COEP response headers. These features are required for\n    proxying OPFS's synchronous API via the synchronous interface\n    required by the sqlite3_vfs API.\n\n  - This function may only be called a single time. When called, this\n    function removes itself from the sqlite3 object.\n\n  All arguments to this function are for internal/development purposes\n  only. They do not constitute a public API and may change at any\n  time.\n\n  The argument may optionally be a plain object with the following\n  configuration options:\n\n  - proxyUri: as described above\n\n  - verbose (=2): an integer 0-3. 0 disables all logging, 1 enables\n    logging of errors. 2 enables logging of warnings and errors. 3\n    additionally enables debugging info.\n\n  - sanityChecks (=false): if true, some basic sanity tests are\n    run on the OPFS VFS API after it's initialized, before the\n    returned Promise resolves.\n\n  On success, the Promise resolves to the top-most sqlite3 namespace\n  object and that object gets a new object installed in its\n  `opfs` property, containing several OPFS-specific utilities.\n*/\nconst installOpfsVfs = function callee(options){\n  if(!globalThis.SharedArrayBuffer\n    || !globalThis.Atomics){\n    return Promise.reject(\n      new Error(\"Cannot install OPFS: Missing SharedArrayBuffer and/or Atomics. \"+\n                \"The server must emit the COOP/COEP response headers to enable those. \"+\n                \"See https://sqlite.org/wasm/doc/trunk/persistence.md#coop-coep\")\n    );\n  }else if('undefined'===typeof WorkerGlobalScope){\n    return Promise.reject(\n      new Error(\"The OPFS sqlite3_vfs cannot run in the main thread \"+\n                \"because it requires Atomics.wait().\")\n    );\n  }else if(!globalThis.FileSystemHandle ||\n           !globalThis.FileSystemDirectoryHandle ||\n           !globalThis.FileSystemFileHandle ||\n           !globalThis.FileSystemFileHandle.prototype.createSyncAccessHandle ||\n           !navigator?.storage?.getDirectory){\n    return Promise.reject(\n      new Error(\"Missing required OPFS APIs.\")\n    );\n  }\n  if(!options || 'object'!==typeof options){\n    options = Object.create(null);\n  }\n  const urlParams = new URL(globalThis.location.href).searchParams;\n  if(undefined===options.verbose){\n    options.verbose = urlParams.has('opfs-verbose')\n      ? (+urlParams.get('opfs-verbose') || 2) : 1;\n  }\n  if(undefined===options.sanityChecks){\n    options.sanityChecks = urlParams.has('opfs-sanity-check');\n  }\n  if(undefined===options.proxyUri){\n    options.proxyUri = callee.defaultProxyUri;\n  }\n\n  //sqlite3.config.warn(\"OPFS options =\",options,globalThis.location);\n\n  if('function' === typeof options.proxyUri){\n    options.proxyUri = options.proxyUri();\n  }\n  const thePromise = new Promise(function(promiseResolve_, promiseReject_){\n    const loggers = {\n      0:sqlite3.config.error,\n      1:sqlite3.config.warn,\n      2:sqlite3.config.log\n    };\n    const logImpl = (level,...args)=>{\n      if(options.verbose>level) loggers[level](\"OPFS syncer:\",...args);\n    };\n    const log =    (...args)=>logImpl(2, ...args);\n    const warn =   (...args)=>logImpl(1, ...args);\n    const error =  (...args)=>logImpl(0, ...args);\n    const toss = sqlite3.util.toss;\n    const capi = sqlite3.capi;\n    const wasm = sqlite3.wasm;\n    const sqlite3_vfs = capi.sqlite3_vfs;\n    const sqlite3_file = capi.sqlite3_file;\n    const sqlite3_io_methods = capi.sqlite3_io_methods;\n    /**\n       Generic utilities for working with OPFS. This will get filled out\n       by the Promise setup and, on success, installed as sqlite3.opfs.\n\n       ACHTUNG: do not rely on these APIs in client code. They are\n       experimental and subject to change or removal as the\n       OPFS-specific sqlite3_vfs evolves.\n    */\n    const opfsUtil = Object.create(null);\n\n    /**\n       Returns true if _this_ thread has access to the OPFS APIs.\n    */\n    const thisThreadHasOPFS = ()=>{\n      return globalThis.FileSystemHandle &&\n        globalThis.FileSystemDirectoryHandle &&\n        globalThis.FileSystemFileHandle &&\n        globalThis.FileSystemFileHandle.prototype.createSyncAccessHandle &&\n        navigator?.storage?.getDirectory;\n    };\n\n    /**\n       Not part of the public API. Solely for internal/development\n       use.\n    */\n    opfsUtil.metrics = {\n      dump: function(){\n        let k, n = 0, t = 0, w = 0;\n        for(k in state.opIds){\n          const m = metrics[k];\n          n += m.count;\n          t += m.time;\n          w += m.wait;\n          m.avgTime = (m.count && m.time) ? (m.time / m.count) : 0;\n          m.avgWait = (m.count && m.wait) ? (m.wait / m.count) : 0;\n        }\n        sqlite3.config.log(globalThis.location.href,\n                    \"metrics for\",globalThis.location.href,\":\",metrics,\n                    \"\\nTotal of\",n,\"op(s) for\",t,\n                    \"ms (incl. \"+w+\" ms of waiting on the async side)\");\n        sqlite3.config.log(\"Serialization metrics:\",metrics.s11n);\n        W.postMessage({type:'opfs-async-metrics'});\n      },\n      reset: function(){\n        let k;\n        const r = (m)=>(m.count = m.time = m.wait = 0);\n        for(k in state.opIds){\n          r(metrics[k] = Object.create(null));\n        }\n        let s = metrics.s11n = Object.create(null);\n        s = s.serialize = Object.create(null);\n        s.count = s.time = 0;\n        s = metrics.s11n.deserialize = Object.create(null);\n        s.count = s.time = 0;\n      }\n    }/*metrics*/;\n    const opfsVfs = new sqlite3_vfs();\n    const opfsIoMethods = new sqlite3_io_methods();\n    let promiseWasRejected = undefined;\n    const promiseReject = (err)=>{\n      promiseWasRejected = true;\n      opfsVfs.dispose();\n      return promiseReject_(err);\n    };\n    const promiseResolve = (value)=>{\n      promiseWasRejected = false;\n      return promiseResolve_(value);\n    };\n    const W =\n    new Worker(new URL(\"sqlite3-opfs-async-proxy.js\", import.meta.url));\n    setTimeout(()=>{\n      /* At attempt to work around a browser-specific quirk in which\n         the Worker load is failing in such a way that we neither\n         resolve nor reject it. This workaround gives that resolve/reject\n         a time limit and rejects if that timer expires. Discussion:\n         https://sqlite.org/forum/forumpost/a708c98dcb3ef */\n      if(undefined===promiseWasRejected){\n        promiseReject(\n          new Error(\"Timeout while waiting for OPFS async proxy worker.\")\n        );\n      }\n    }, 4000);\n    W._originalOnError = W.onerror /* will be restored later */;\n    W.onerror = function(err){\n      // The error object doesn't contain any useful info when the\n      // failure is, e.g., that the remote script is 404.\n      error(\"Error initializing OPFS asyncer:\",err);\n      promiseReject(new Error(\"Loading OPFS async Worker failed for unknown reasons.\"));\n    };\n    const pDVfs = capi.sqlite3_vfs_find(null)/*pointer to default VFS*/;\n    const dVfs = pDVfs\n          ? new sqlite3_vfs(pDVfs)\n          : null /* dVfs will be null when sqlite3 is built with\n                    SQLITE_OS_OTHER. */;\n    opfsVfs.$iVersion = 2/*yes, two*/;\n    opfsVfs.$szOsFile = capi.sqlite3_file.structInfo.sizeof;\n    opfsVfs.$mxPathname = 1024/*sure, why not?*/;\n    opfsVfs.$zName = wasm.allocCString(\"opfs\");\n    // All C-side memory of opfsVfs is zeroed out, but just to be explicit:\n    opfsVfs.$xDlOpen = opfsVfs.$xDlError = opfsVfs.$xDlSym = opfsVfs.$xDlClose = null;\n    opfsVfs.ondispose = [\n      '$zName', opfsVfs.$zName,\n      'cleanup default VFS wrapper', ()=>(dVfs ? dVfs.dispose() : null),\n      'cleanup opfsIoMethods', ()=>opfsIoMethods.dispose()\n    ];\n    /**\n       Pedantic sidebar about opfsVfs.ondispose: the entries in that array\n       are items to clean up when opfsVfs.dispose() is called, but in this\n       environment it will never be called. The VFS instance simply\n       hangs around until the WASM module instance is cleaned up. We\n       \"could\" _hypothetically_ clean it up by \"importing\" an\n       sqlite3_os_end() impl into the wasm build, but the shutdown order\n       of the wasm engine and the JS one are undefined so there is no\n       guaranty that the opfsVfs instance would be available in one\n       environment or the other when sqlite3_os_end() is called (_if_ it\n       gets called at all in a wasm build, which is undefined).\n    */\n    /**\n       State which we send to the async-api Worker or share with it.\n       This object must initially contain only cloneable or sharable\n       objects. After the worker's \"inited\" message arrives, other types\n       of data may be added to it.\n\n       For purposes of Atomics.wait() and Atomics.notify(), we use a\n       SharedArrayBuffer with one slot reserved for each of the API\n       proxy's methods. The sync side of the API uses Atomics.wait()\n       on the corresponding slot and the async side uses\n       Atomics.notify() on that slot.\n\n       The approach of using a single SAB to serialize comms for all\n       instances might(?) lead to deadlock situations in multi-db\n       cases. We should probably have one SAB here with a single slot\n       for locking a per-file initialization step and then allocate a\n       separate SAB like the above one for each file. That will\n       require a bit of acrobatics but should be feasible. The most\n       problematic part is that xOpen() would have to use\n       postMessage() to communicate its SharedArrayBuffer, and mixing\n       that approach with Atomics.wait/notify() gets a bit messy.\n    */\n    const state = Object.create(null);\n    state.verbose = options.verbose;\n    state.littleEndian = (()=>{\n      const buffer = new ArrayBuffer(2);\n      new DataView(buffer).setInt16(0, 256, true /* ==>littleEndian */);\n      // Int16Array uses the platform's endianness.\n      return new Int16Array(buffer)[0] === 256;\n    })();\n    /**\n       asyncIdleWaitTime is how long (ms) to wait, in the async proxy,\n       for each Atomics.wait() when waiting on inbound VFS API calls.\n       We need to wake up periodically to give the thread a chance to\n       do other things. If this is too high (e.g. 500ms) then even two\n       workers/tabs can easily run into locking errors. Some multiple\n       of this value is also used for determining how long to wait on\n       lock contention to free up.\n    */\n    state.asyncIdleWaitTime = 150;\n    /**\n       Whether the async counterpart should log exceptions to\n       the serialization channel. That produces a great deal of\n       noise for seemingly innocuous things like xAccess() checks\n       for missing files, so this option may have one of 3 values:\n\n       0 = no exception logging.\n\n       1 = only log exceptions for \"significant\" ops like xOpen(),\n       xRead(), and xWrite().\n\n       2 = log all exceptions.\n    */\n    state.asyncS11nExceptions = 1;\n    /* Size of file I/O buffer block. 64k = max sqlite3 page size, and\n       xRead/xWrite() will never deal in blocks larger than that. */\n    state.fileBufferSize = 1024 * 64;\n    state.sabS11nOffset = state.fileBufferSize;\n    /**\n       The size of the block in our SAB for serializing arguments and\n       result values. Needs to be large enough to hold serialized\n       values of any of the proxied APIs. Filenames are the largest\n       part but are limited to opfsVfs.$mxPathname bytes. We also\n       store exceptions there, so it needs to be long enough to hold\n       a reasonably long exception string.\n    */\n    state.sabS11nSize = opfsVfs.$mxPathname * 2;\n    /**\n       The SAB used for all data I/O between the synchronous and\n       async halves (file i/o and arg/result s11n).\n    */\n    state.sabIO = new SharedArrayBuffer(\n      state.fileBufferSize/* file i/o block */\n      + state.sabS11nSize/* argument/result serialization block */\n    );\n    state.opIds = Object.create(null);\n    const metrics = Object.create(null);\n    {\n      /* Indexes for use in our SharedArrayBuffer... */\n      let i = 0;\n      /* SAB slot used to communicate which operation is desired\n         between both workers. This worker writes to it and the other\n         listens for changes. */\n      state.opIds.whichOp = i++;\n      /* Slot for storing return values. This worker listens to that\n         slot and the other worker writes to it. */\n      state.opIds.rc = i++;\n      /* Each function gets an ID which this worker writes to\n         the whichOp slot. The async-api worker uses Atomic.wait()\n         on the whichOp slot to figure out which operation to run\n         next. */\n      state.opIds.xAccess = i++;\n      state.opIds.xClose = i++;\n      state.opIds.xDelete = i++;\n      state.opIds.xDeleteNoWait = i++;\n      state.opIds.xFileControl = i++;\n      state.opIds.xFileSize = i++;\n      state.opIds.xLock = i++;\n      state.opIds.xOpen = i++;\n      state.opIds.xRead = i++;\n      state.opIds.xSleep = i++;\n      state.opIds.xSync = i++;\n      state.opIds.xTruncate = i++;\n      state.opIds.xUnlock = i++;\n      state.opIds.xWrite = i++;\n      state.opIds.mkdir = i++;\n      state.opIds['opfs-async-metrics'] = i++;\n      state.opIds['opfs-async-shutdown'] = i++;\n      /* The retry slot is used by the async part for wait-and-retry\n         semantics. Though we could hypothetically use the xSleep slot\n         for that, doing so might lead to undesired side effects. */\n      state.opIds.retry = i++;\n      state.sabOP = new SharedArrayBuffer(\n        i * 4/* ==sizeof int32, noting that Atomics.wait() and friends\n                can only function on Int32Array views of an SAB. */);\n      opfsUtil.metrics.reset();\n    }\n    /**\n       SQLITE_xxx constants to export to the async worker\n       counterpart...\n    */\n    state.sq3Codes = Object.create(null);\n    [\n      'SQLITE_ACCESS_EXISTS',\n      'SQLITE_ACCESS_READWRITE',\n      'SQLITE_BUSY',\n      'SQLITE_ERROR',\n      'SQLITE_IOERR',\n      'SQLITE_IOERR_ACCESS',\n      'SQLITE_IOERR_CLOSE',\n      'SQLITE_IOERR_DELETE',\n      'SQLITE_IOERR_FSYNC',\n      'SQLITE_IOERR_LOCK',\n      'SQLITE_IOERR_READ',\n      'SQLITE_IOERR_SHORT_READ',\n      'SQLITE_IOERR_TRUNCATE',\n      'SQLITE_IOERR_UNLOCK',\n      'SQLITE_IOERR_WRITE',\n      'SQLITE_LOCK_EXCLUSIVE',\n      'SQLITE_LOCK_NONE',\n      'SQLITE_LOCK_PENDING',\n      'SQLITE_LOCK_RESERVED',\n      'SQLITE_LOCK_SHARED',\n      'SQLITE_LOCKED',\n      'SQLITE_MISUSE',\n      'SQLITE_NOTFOUND',\n      'SQLITE_OPEN_CREATE',\n      'SQLITE_OPEN_DELETEONCLOSE',\n      'SQLITE_OPEN_MAIN_DB',\n      'SQLITE_OPEN_READONLY'\n    ].forEach((k)=>{\n      if(undefined === (state.sq3Codes[k] = capi[k])){\n        toss(\"Maintenance required: not found:\",k);\n      }\n    });\n    state.opfsFlags = Object.assign(Object.create(null),{\n      /**\n         Flag for use with xOpen(). \"opfs-unlock-asap=1\" enables\n         this. See defaultUnlockAsap, below.\n       */\n      OPFS_UNLOCK_ASAP: 0x01,\n      /**\n         If true, any async routine which implicitly acquires a sync\n         access handle (i.e. an OPFS lock) will release that locks at\n         the end of the call which acquires it. If false, such\n         \"autolocks\" are not released until the VFS is idle for some\n         brief amount of time.\n\n         The benefit of enabling this is much higher concurrency. The\n         down-side is much-reduced performance (as much as a 4x decrease\n         in speedtest1).\n      */\n      defaultUnlockAsap: false\n    });\n\n    /**\n       Runs the given operation (by name) in the async worker\n       counterpart, waits for its response, and returns the result\n       which the async worker writes to SAB[state.opIds.rc]. The\n       2nd and subsequent arguments must be the aruguments for the\n       async op.\n    */\n    const opRun = (op,...args)=>{\n      const opNdx = state.opIds[op] || toss(\"Invalid op ID:\",op);\n      state.s11n.serialize(...args);\n      Atomics.store(state.sabOPView, state.opIds.rc, -1);\n      Atomics.store(state.sabOPView, state.opIds.whichOp, opNdx);\n      Atomics.notify(state.sabOPView, state.opIds.whichOp)\n      /* async thread will take over here */;\n      const t = performance.now();\n      Atomics.wait(state.sabOPView, state.opIds.rc, -1)\n      /* When this wait() call returns, the async half will have\n         completed the operation and reported its results. */;\n      const rc = Atomics.load(state.sabOPView, state.opIds.rc);\n      metrics[op].wait += performance.now() - t;\n      if(rc && state.asyncS11nExceptions){\n        const err = state.s11n.deserialize();\n        if(err) error(op+\"() async error:\",...err);\n      }\n      return rc;\n    };\n\n    /**\n       Not part of the public API. Only for test/development use.\n    */\n    opfsUtil.debug = {\n      asyncShutdown: ()=>{\n        warn(\"Shutting down OPFS async listener. The OPFS VFS will no longer work.\");\n        opRun('opfs-async-shutdown');\n      },\n      asyncRestart: ()=>{\n        warn(\"Attempting to restart OPFS VFS async listener. Might work, might not.\");\n        W.postMessage({type: 'opfs-async-restart'});\n      }\n    };\n\n    const initS11n = ()=>{\n      /**\n         !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n         ACHTUNG: this code is 100% duplicated in the other half of\n         this proxy! The documentation is maintained in the\n         \"synchronous half\".\n         !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n         This proxy de/serializes cross-thread function arguments and\n         output-pointer values via the state.sabIO SharedArrayBuffer,\n         using the region defined by (state.sabS11nOffset,\n         state.sabS11nOffset]. Only one dataset is recorded at a time.\n\n         This is not a general-purpose format. It only supports the\n         range of operations, and data sizes, needed by the\n         sqlite3_vfs and sqlite3_io_methods operations. Serialized\n         data are transient and this serialization algorithm may\n         change at any time.\n\n         The data format can be succinctly summarized as:\n\n         Nt...Td...D\n\n         Where:\n\n         - N = number of entries (1 byte)\n\n         - t = type ID of first argument (1 byte)\n\n         - ...T = type IDs of the 2nd and subsequent arguments (1 byte\n         each).\n\n         - d = raw bytes of first argument (per-type size).\n\n         - ...D = raw bytes of the 2nd and subsequent arguments (per-type\n         size).\n\n         All types except strings have fixed sizes. Strings are stored\n         using their TextEncoder/TextDecoder representations. It would\n         arguably make more sense to store them as Int16Arrays of\n         their JS character values, but how best/fastest to get that\n         in and out of string form is an open point. Initial\n         experimentation with that approach did not gain us any speed.\n\n         Historical note: this impl was initially about 1% this size by\n         using using JSON.stringify/parse(), but using fit-to-purpose\n         serialization saves considerable runtime.\n      */\n      if(state.s11n) return state.s11n;\n      const textDecoder = new TextDecoder(),\n            textEncoder = new TextEncoder('utf-8'),\n            viewU8 = new Uint8Array(state.sabIO, state.sabS11nOffset, state.sabS11nSize),\n            viewDV = new DataView(state.sabIO, state.sabS11nOffset, state.sabS11nSize);\n      state.s11n = Object.create(null);\n      /* Only arguments and return values of these types may be\n         serialized. This covers the whole range of types needed by the\n         sqlite3_vfs API. */\n      const TypeIds = Object.create(null);\n      TypeIds.number  = { id: 1, size: 8, getter: 'getFloat64', setter: 'setFloat64' };\n      TypeIds.bigint  = { id: 2, size: 8, getter: 'getBigInt64', setter: 'setBigInt64' };\n      TypeIds.boolean = { id: 3, size: 4, getter: 'getInt32', setter: 'setInt32' };\n      TypeIds.string =  { id: 4 };\n\n      const getTypeId = (v)=>(\n        TypeIds[typeof v]\n          || toss(\"Maintenance required: this value type cannot be serialized.\",v)\n      );\n      const getTypeIdById = (tid)=>{\n        switch(tid){\n            case TypeIds.number.id: return TypeIds.number;\n            case TypeIds.bigint.id: return TypeIds.bigint;\n            case TypeIds.boolean.id: return TypeIds.boolean;\n            case TypeIds.string.id: return TypeIds.string;\n            default: toss(\"Invalid type ID:\",tid);\n        }\n      };\n\n      /**\n         Returns an array of the deserialized state stored by the most\n         recent serialize() operation (from from this thread or the\n         counterpart thread), or null if the serialization buffer is\n         empty.  If passed a truthy argument, the serialization buffer\n         is cleared after deserialization.\n      */\n      state.s11n.deserialize = function(clear=false){\n        ++metrics.s11n.deserialize.count;\n        const t = performance.now();\n        const argc = viewU8[0];\n        const rc = argc ? [] : null;\n        if(argc){\n          const typeIds = [];\n          let offset = 1, i, n, v;\n          for(i = 0; i < argc; ++i, ++offset){\n            typeIds.push(getTypeIdById(viewU8[offset]));\n          }\n          for(i = 0; i < argc; ++i){\n            const t = typeIds[i];\n            if(t.getter){\n              v = viewDV[t.getter](offset, state.littleEndian);\n              offset += t.size;\n            }else{/*String*/\n              n = viewDV.getInt32(offset, state.littleEndian);\n              offset += 4;\n              v = textDecoder.decode(viewU8.slice(offset, offset+n));\n              offset += n;\n            }\n            rc.push(v);\n          }\n        }\n        if(clear) viewU8[0] = 0;\n        //log(\"deserialize:\",argc, rc);\n        metrics.s11n.deserialize.time += performance.now() - t;\n        return rc;\n      };\n\n      /**\n         Serializes all arguments to the shared buffer for consumption\n         by the counterpart thread.\n\n         This routine is only intended for serializing OPFS VFS\n         arguments and (in at least one special case) result values,\n         and the buffer is sized to be able to comfortably handle\n         those.\n\n         If passed no arguments then it zeroes out the serialization\n         state.\n      */\n      state.s11n.serialize = function(...args){\n        const t = performance.now();\n        ++metrics.s11n.serialize.count;\n        if(args.length){\n          //log(\"serialize():\",args);\n          const typeIds = [];\n          let i = 0, offset = 1;\n          viewU8[0] = args.length & 0xff /* header = # of args */;\n          for(; i < args.length; ++i, ++offset){\n            /* Write the TypeIds.id value into the next args.length\n               bytes. */\n            typeIds.push(getTypeId(args[i]));\n            viewU8[offset] = typeIds[i].id;\n          }\n          for(i = 0; i < args.length; ++i) {\n            /* Deserialize the following bytes based on their\n               corresponding TypeIds.id from the header. */\n            const t = typeIds[i];\n            if(t.setter){\n              viewDV[t.setter](offset, args[i], state.littleEndian);\n              offset += t.size;\n            }else{/*String*/\n              const s = textEncoder.encode(args[i]);\n              viewDV.setInt32(offset, s.byteLength, state.littleEndian);\n              offset += 4;\n              viewU8.set(s, offset);\n              offset += s.byteLength;\n            }\n          }\n          //log(\"serialize() result:\",viewU8.slice(0,offset));\n        }else{\n          viewU8[0] = 0;\n        }\n        metrics.s11n.serialize.time += performance.now() - t;\n      };\n      return state.s11n;\n    }/*initS11n()*/;\n\n    /**\n       Generates a random ASCII string len characters long, intended for\n       use as a temporary file name.\n    */\n    const randomFilename = function f(len=16){\n      if(!f._chars){\n        f._chars = \"abcdefghijklmnopqrstuvwxyz\"+\n          \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"+\n          \"012346789\";\n        f._n = f._chars.length;\n      }\n      const a = [];\n      let i = 0;\n      for( ; i < len; ++i){\n        const ndx = Math.random() * (f._n * 64) % f._n | 0;\n        a[i] = f._chars[ndx];\n      }\n      return a.join(\"\");\n      /*\n        An alternative impl. with an unpredictable length\n        but much simpler:\n\n        Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(36)\n      */\n    };\n\n    /**\n       Map of sqlite3_file pointers to objects constructed by xOpen().\n    */\n    const __openFiles = Object.create(null);\n\n    const opTimer = Object.create(null);\n    opTimer.op = undefined;\n    opTimer.start = undefined;\n    const mTimeStart = (op)=>{\n      opTimer.start = performance.now();\n      opTimer.op = op;\n      ++metrics[op].count;\n    };\n    const mTimeEnd = ()=>(\n      metrics[opTimer.op].time += performance.now() - opTimer.start\n    );\n\n    /**\n       Impls for the sqlite3_io_methods methods. Maintenance reminder:\n       members are in alphabetical order to simplify finding them.\n    */\n    const ioSyncWrappers = {\n      xCheckReservedLock: function(pFile,pOut){\n        /**\n           As of late 2022, only a single lock can be held on an OPFS\n           file. We have no way of checking whether any _other_ db\n           connection has a lock except by trying to obtain and (on\n           success) release a sync-handle for it, but doing so would\n           involve an inherent race condition. For the time being,\n           pending a better solution, we simply report whether the\n           given pFile is open.\n        */\n        const f = __openFiles[pFile];\n        wasm.poke(pOut, f.lockType ? 1 : 0, 'i32');\n        return 0;\n      },\n      xClose: function(pFile){\n        mTimeStart('xClose');\n        let rc = 0;\n        const f = __openFiles[pFile];\n        if(f){\n          delete __openFiles[pFile];\n          rc = opRun('xClose', pFile);\n          if(f.sq3File) f.sq3File.dispose();\n        }\n        mTimeEnd();\n        return rc;\n      },\n      xDeviceCharacteristics: function(pFile){\n        //debug(\"xDeviceCharacteristics(\",pFile,\")\");\n        return capi.SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN;\n      },\n      xFileControl: function(pFile, opId, pArg){\n        mTimeStart('xFileControl');\n        const rc = (capi.SQLITE_FCNTL_SYNC===opId)\n              ? opRun('xSync', pFile, 0)\n              : capi.SQLITE_NOTFOUND;\n        mTimeEnd();\n        return rc;\n      },\n      xFileSize: function(pFile,pSz64){\n        mTimeStart('xFileSize');\n        let rc = opRun('xFileSize', pFile);\n        if(0==rc){\n          try {\n            const sz = state.s11n.deserialize()[0];\n            wasm.poke(pSz64, sz, 'i64');\n          }catch(e){\n            error(\"Unexpected error reading xFileSize() result:\",e);\n            rc = state.sq3Codes.SQLITE_IOERR;\n          }\n        }\n        mTimeEnd();\n        return rc;\n      },\n      xLock: function(pFile,lockType){\n        mTimeStart('xLock');\n        const f = __openFiles[pFile];\n        let rc = 0;\n        /* All OPFS locks are exclusive locks. If xLock() has\n           previously succeeded, do nothing except record the lock\n           type. If no lock is active, have the async counterpart\n           lock the file. */\n        if( !f.lockType ) {\n          rc = opRun('xLock', pFile, lockType);\n          if( 0===rc ) f.lockType = lockType;\n        }else{\n          f.lockType = lockType;\n        }\n        mTimeEnd();\n        return rc;\n      },\n      xRead: function(pFile,pDest,n,offset64){\n        mTimeStart('xRead');\n        const f = __openFiles[pFile];\n        let rc;\n        try {\n          rc = opRun('xRead',pFile, n, Number(offset64));\n          if(0===rc || capi.SQLITE_IOERR_SHORT_READ===rc){\n            /**\n               Results get written to the SharedArrayBuffer f.sabView.\n               Because the heap is _not_ a SharedArrayBuffer, we have\n               to copy the results. TypedArray.set() seems to be the\n               fastest way to copy this. */\n            wasm.heap8u().set(f.sabView.subarray(0, n), pDest);\n          }\n        }catch(e){\n          error(\"xRead(\",arguments,\") failed:\",e,f);\n          rc = capi.SQLITE_IOERR_READ;\n        }\n        mTimeEnd();\n        return rc;\n      },\n      xSync: function(pFile,flags){\n        ++metrics.xSync.count;\n        return 0; // impl'd in xFileControl()\n      },\n      xTruncate: function(pFile,sz64){\n        mTimeStart('xTruncate');\n        const rc = opRun('xTruncate', pFile, Number(sz64));\n        mTimeEnd();\n        return rc;\n      },\n      xUnlock: function(pFile,lockType){\n        mTimeStart('xUnlock');\n        const f = __openFiles[pFile];\n        let rc = 0;\n        if( capi.SQLITE_LOCK_NONE === lockType\n          && f.lockType ){\n          rc = opRun('xUnlock', pFile, lockType);\n        }\n        if( 0===rc ) f.lockType = lockType;\n        mTimeEnd();\n        return rc;\n      },\n      xWrite: function(pFile,pSrc,n,offset64){\n        mTimeStart('xWrite');\n        const f = __openFiles[pFile];\n        let rc;\n        try {\n          f.sabView.set(wasm.heap8u().subarray(pSrc, pSrc+n));\n          rc = opRun('xWrite', pFile, n, Number(offset64));\n        }catch(e){\n          error(\"xWrite(\",arguments,\") failed:\",e,f);\n          rc = capi.SQLITE_IOERR_WRITE;\n        }\n        mTimeEnd();\n        return rc;\n      }\n    }/*ioSyncWrappers*/;\n\n    /**\n       Impls for the sqlite3_vfs methods. Maintenance reminder: members\n       are in alphabetical order to simplify finding them.\n    */\n    const vfsSyncWrappers = {\n      xAccess: function(pVfs,zName,flags,pOut){\n        mTimeStart('xAccess');\n        const rc = opRun('xAccess', wasm.cstrToJs(zName));\n        wasm.poke( pOut, (rc ? 0 : 1), 'i32' );\n        mTimeEnd();\n        return 0;\n      },\n      xCurrentTime: function(pVfs,pOut){\n        /* If it turns out that we need to adjust for timezone, see:\n           https://stackoverflow.com/a/11760121/1458521 */\n        wasm.poke(pOut, 2440587.5 + (new Date().getTime()/86400000),\n                         'double');\n        return 0;\n      },\n      xCurrentTimeInt64: function(pVfs,pOut){\n        // TODO: confirm that this calculation is correct\n        wasm.poke(pOut, (2440587.5 * 86400000) + new Date().getTime(),\n                         'i64');\n        return 0;\n      },\n      xDelete: function(pVfs, zName, doSyncDir){\n        mTimeStart('xDelete');\n        opRun('xDelete', wasm.cstrToJs(zName), doSyncDir, false);\n        /* We're ignoring errors because we cannot yet differentiate\n           between harmless and non-harmless failures. */\n        mTimeEnd();\n        return 0;\n      },\n      xFullPathname: function(pVfs,zName,nOut,pOut){\n        /* Until/unless we have some notion of \"current dir\"\n           in OPFS, simply copy zName to pOut... */\n        const i = wasm.cstrncpy(pOut, zName, nOut);\n        return i<nOut ? 0 : capi.SQLITE_CANTOPEN\n        /*CANTOPEN is required by the docs but SQLITE_RANGE would be a closer match*/;\n      },\n      xGetLastError: function(pVfs,nOut,pOut){\n        /* TODO: store exception.message values from the async\n           partner in a dedicated SharedArrayBuffer, noting that we'd have\n           to encode them... TextEncoder can do that for us. */\n        warn(\"OPFS xGetLastError() has nothing sensible to return.\");\n        return 0;\n      },\n      //xSleep is optionally defined below\n      xOpen: function f(pVfs, zName, pFile, flags, pOutFlags){\n        mTimeStart('xOpen');\n        let opfsFlags = 0;\n        if(0===zName){\n          zName = randomFilename();\n        }else if('number'===typeof zName){\n          if(capi.sqlite3_uri_boolean(zName, \"opfs-unlock-asap\", 0)){\n            /* -----------------------^^^^^ MUST pass the untranslated\n               C-string here. */\n            opfsFlags |= state.opfsFlags.OPFS_UNLOCK_ASAP;\n          }\n          zName = wasm.cstrToJs(zName);\n        }\n        const fh = Object.create(null);\n        fh.fid = pFile;\n        fh.filename = zName;\n        fh.sab = new SharedArrayBuffer(state.fileBufferSize);\n        fh.flags = flags;\n        const rc = opRun('xOpen', pFile, zName, flags, opfsFlags);\n        if(!rc){\n          /* Recall that sqlite3_vfs::xClose() will be called, even on\n             error, unless pFile->pMethods is NULL. */\n          if(fh.readOnly){\n            wasm.poke(pOutFlags, capi.SQLITE_OPEN_READONLY, 'i32');\n          }\n          __openFiles[pFile] = fh;\n          fh.sabView = state.sabFileBufView;\n          fh.sq3File = new sqlite3_file(pFile);\n          fh.sq3File.$pMethods = opfsIoMethods.pointer;\n          fh.lockType = capi.SQLITE_LOCK_NONE;\n        }\n        mTimeEnd();\n        return rc;\n      }/*xOpen()*/\n    }/*vfsSyncWrappers*/;\n\n    if(dVfs){\n      opfsVfs.$xRandomness = dVfs.$xRandomness;\n      opfsVfs.$xSleep = dVfs.$xSleep;\n    }\n    if(!opfsVfs.$xRandomness){\n      /* If the default VFS has no xRandomness(), add a basic JS impl... */\n      vfsSyncWrappers.xRandomness = function(pVfs, nOut, pOut){\n        const heap = wasm.heap8u();\n        let i = 0;\n        for(; i < nOut; ++i) heap[pOut + i] = (Math.random()*255000) & 0xFF;\n        return i;\n      };\n    }\n    if(!opfsVfs.$xSleep){\n      /* If we can inherit an xSleep() impl from the default VFS then\n         assume it's sane and use it, otherwise install a JS-based\n         one. */\n      vfsSyncWrappers.xSleep = function(pVfs,ms){\n        Atomics.wait(state.sabOPView, state.opIds.xSleep, 0, ms);\n        return 0;\n      };\n    }\n\n    /**\n       Expects an OPFS file path. It gets resolved, such that \"..\"\n       components are properly expanded, and returned. If the 2nd arg\n       is true, the result is returned as an array of path elements,\n       else an absolute path string is returned.\n    */\n    opfsUtil.getResolvedPath = function(filename,splitIt){\n      const p = new URL(filename, \"file://irrelevant\").pathname;\n      return splitIt ? p.split('/').filter((v)=>!!v) : p;\n    };\n\n    /**\n       Takes the absolute path to a filesystem element. Returns an\n       array of [handleOfContainingDir, filename]. If the 2nd argument\n       is truthy then each directory element leading to the file is\n       created along the way. Throws if any creation or resolution\n       fails.\n    */\n    opfsUtil.getDirForFilename = async function f(absFilename, createDirs = false){\n      const path = opfsUtil.getResolvedPath(absFilename, true);\n      const filename = path.pop();\n      let dh = opfsUtil.rootDirectory;\n      for(const dirName of path){\n        if(dirName){\n          dh = await dh.getDirectoryHandle(dirName, {create: !!createDirs});\n        }\n      }\n      return [dh, filename];\n    };\n\n    /**\n       Creates the given directory name, recursively, in\n       the OPFS filesystem. Returns true if it succeeds or the\n       directory already exists, else false.\n    */\n    opfsUtil.mkdir = async function(absDirName){\n      try {\n        await opfsUtil.getDirForFilename(absDirName+\"/filepart\", true);\n        return true;\n      }catch(e){\n        //sqlite3.config.warn(\"mkdir(\",absDirName,\") failed:\",e);\n        return false;\n      }\n    };\n    /**\n       Checks whether the given OPFS filesystem entry exists,\n       returning true if it does, false if it doesn't.\n    */\n    opfsUtil.entryExists = async function(fsEntryName){\n      try {\n        const [dh, fn] = await opfsUtil.getDirForFilename(fsEntryName);\n        await dh.getFileHandle(fn);\n        return true;\n      }catch(e){\n        return false;\n      }\n    };\n\n    /**\n       Generates a random ASCII string, intended for use as a\n       temporary file name. Its argument is the length of the string,\n       defaulting to 16.\n    */\n    opfsUtil.randomFilename = randomFilename;\n\n    /**\n       Re-registers the OPFS VFS. This is intended only for odd use\n       cases which have to call sqlite3_shutdown() as part of their\n       initialization process, which will unregister the VFS\n       registered by installOpfsVfs(). If passed a truthy value, the\n       OPFS VFS is registered as the default VFS, else it is not made\n       the default. Returns the result of the the\n       sqlite3_vfs_register() call.\n\n       Design note: the problem of having to re-register things after\n       a shutdown/initialize pair is more general. How to best plug\n       that in to the library is unclear. In particular, we cannot\n       hook in to any C-side calls to sqlite3_initialize(), so we\n       cannot add an after-initialize callback mechanism.\n    */\n    opfsUtil.registerVfs = (asDefault=false)=>{\n      return wasm.exports.sqlite3_vfs_register(\n        opfsVfs.pointer, asDefault ? 1 : 0\n      );\n    };\n\n    /**\n       Returns a promise which resolves to an object which represents\n       all files and directories in the OPFS tree. The top-most object\n       has two properties: `dirs` is an array of directory entries\n       (described below) and `files` is a list of file names for all\n       files in that directory.\n\n       Traversal starts at sqlite3.opfs.rootDirectory.\n\n       Each `dirs` entry is an object in this form:\n\n       ```\n       { name: directoryName,\n         dirs: [...subdirs],\n         files: [...file names]\n       }\n       ```\n\n       The `files` and `subdirs` entries are always set but may be\n       empty arrays.\n\n       The returned object has the same structure but its `name` is\n       an empty string. All returned objects are created with\n       Object.create(null), so have no prototype.\n\n       Design note: the entries do not contain more information,\n       e.g. file sizes, because getting such info is not only\n       expensive but is subject to locking-related errors.\n    */\n    opfsUtil.treeList = async function(){\n      const doDir = async function callee(dirHandle,tgt){\n        tgt.name = dirHandle.name;\n        tgt.dirs = [];\n        tgt.files = [];\n        for await (const handle of dirHandle.values()){\n          if('directory' === handle.kind){\n            const subDir = Object.create(null);\n            tgt.dirs.push(subDir);\n            await callee(handle, subDir);\n          }else{\n            tgt.files.push(handle.name);\n          }\n        }\n      };\n      const root = Object.create(null);\n      await doDir(opfsUtil.rootDirectory, root);\n      return root;\n    };\n\n    /**\n       Irrevocably deletes _all_ files in the current origin's OPFS.\n       Obviously, this must be used with great caution. It may throw\n       an exception if removal of anything fails (e.g. a file is\n       locked), but the precise conditions under which the underlying\n       APIs will throw are not documented (so we cannot tell you what\n       they are).\n    */\n    opfsUtil.rmfr = async function(){\n      const dir = opfsUtil.rootDirectory, opt = {recurse: true};\n      for await (const handle of dir.values()){\n        dir.removeEntry(handle.name, opt);\n      }\n    };\n\n    /**\n       Deletes the given OPFS filesystem entry.  As this environment\n       has no notion of \"current directory\", the given name must be an\n       absolute path. If the 2nd argument is truthy, deletion is\n       recursive (use with caution!).\n\n       The returned Promise resolves to true if the deletion was\n       successful, else false (but...). The OPFS API reports the\n       reason for the failure only in human-readable form, not\n       exceptions which can be type-checked to determine the\n       failure. Because of that...\n\n       If the final argument is truthy then this function will\n       propagate any exception on error, rather than returning false.\n    */\n    opfsUtil.unlink = async function(fsEntryName, recursive = false,\n                                          throwOnError = false){\n      try {\n        const [hDir, filenamePart] =\n              await opfsUtil.getDirForFilename(fsEntryName, false);\n        await hDir.removeEntry(filenamePart, {recursive});\n        return true;\n      }catch(e){\n        if(throwOnError){\n          throw new Error(\"unlink(\",arguments[0],\") failed: \"+e.message,{\n            cause: e\n          });\n        }\n        return false;\n      }\n    };\n\n    /**\n       Traverses the OPFS filesystem, calling a callback for each one.\n       The argument may be either a callback function or an options object\n       with any of the following properties:\n\n       - `callback`: function which gets called for each filesystem\n         entry.  It gets passed 3 arguments: 1) the\n         FileSystemFileHandle or FileSystemDirectoryHandle of each\n         entry (noting that both are instanceof FileSystemHandle). 2)\n         the FileSystemDirectoryHandle of the parent directory. 3) the\n         current depth level, with 0 being at the top of the tree\n         relative to the starting directory. If the callback returns a\n         literal false, as opposed to any other falsy value, traversal\n         stops without an error. Any exceptions it throws are\n         propagated. Results are undefined if the callback manipulate\n         the filesystem (e.g. removing or adding entries) because the\n         how OPFS iterators behave in the face of such changes is\n         undocumented.\n\n       - `recursive` [bool=true]: specifies whether to recurse into\n         subdirectories or not. Whether recursion is depth-first or\n         breadth-first is unspecified!\n\n       - `directory` [FileSystemDirectoryEntry=sqlite3.opfs.rootDirectory]\n         specifies the starting directory.\n\n       If this function is passed a function, it is assumed to be the\n       callback.\n\n       Returns a promise because it has to (by virtue of being async)\n       but that promise has no specific meaning: the traversal it\n       performs is synchronous. The promise must be used to catch any\n       exceptions propagated by the callback, however.\n\n       TODO: add an option which specifies whether to traverse\n       depth-first or breadth-first. We currently do depth-first but\n       an incremental file browsing widget would benefit more from\n       breadth-first.\n    */\n    opfsUtil.traverse = async function(opt){\n      const defaultOpt = {\n        recursive: true,\n        directory: opfsUtil.rootDirectory\n      };\n      if('function'===typeof opt){\n        opt = {callback:opt};\n      }\n      opt = Object.assign(defaultOpt, opt||{});\n      const doDir = async function callee(dirHandle, depth){\n        for await (const handle of dirHandle.values()){\n          if(false === opt.callback(handle, dirHandle, depth)) return false;\n          else if(opt.recursive && 'directory' === handle.kind){\n            if(false === await callee(handle, depth + 1)) break;\n          }\n        }\n      };\n      doDir(opt.directory, 0);\n    };\n\n    //TODO to support fiddle and worker1 db upload:\n    //opfsUtil.createFile = function(absName, content=undefined){...}\n    //We have sqlite3.wasm.sqlite3_wasm_vfs_create_file() for this\n    //purpose but its interface and name are still under\n    //consideration.\n\n    if(sqlite3.oo1){\n      const OpfsDb = function(...args){\n        const opt = sqlite3.oo1.DB.dbCtorHelper.normalizeArgs(...args);\n        opt.vfs = opfsVfs.$zName;\n        sqlite3.oo1.DB.dbCtorHelper.call(this, opt);\n      };\n      OpfsDb.prototype = Object.create(sqlite3.oo1.DB.prototype);\n      sqlite3.oo1.OpfsDb = OpfsDb;\n      sqlite3.oo1.DB.dbCtorHelper.setVfsPostOpenSql(\n        opfsVfs.pointer,\n        function(oo1Db, sqlite3){\n          /* Set a relatively high default busy-timeout handler to\n             help OPFS dbs deal with multi-tab/multi-worker\n             contention. */\n          sqlite3.capi.sqlite3_busy_timeout(oo1Db, 10000);\n          sqlite3.capi.sqlite3_exec(oo1Db, [\n            /* Truncate journal mode is faster than delete for\n               this vfs, per speedtest1. That gap seems to have closed with\n               Chrome version 108 or 109, but \"persist\" is very roughly 5-6%\n               faster than truncate in initial tests. */\n            \"pragma journal_mode=persist;\",\n            /*\n              This vfs benefits hugely from cache on moderate/large\n              speedtest1 --size 50 and --size 100 workloads. We\n              currently rely on setting a non-default cache size when\n              building sqlite3.wasm. If that policy changes, the cache\n              can be set here.\n            */\n            \"pragma cache_size=-16384;\"\n          ], 0, 0, 0);\n        }\n      );\n    }/*extend sqlite3.oo1*/\n\n    const sanityCheck = function(){\n      const scope = wasm.scopedAllocPush();\n      const sq3File = new sqlite3_file();\n      try{\n        const fid = sq3File.pointer;\n        const openFlags = capi.SQLITE_OPEN_CREATE\n              | capi.SQLITE_OPEN_READWRITE\n        //| capi.SQLITE_OPEN_DELETEONCLOSE\n              | capi.SQLITE_OPEN_MAIN_DB;\n        const pOut = wasm.scopedAlloc(8);\n        const dbFile = \"/sanity/check/file\"+randomFilename(8);\n        const zDbFile = wasm.scopedAllocCString(dbFile);\n        let rc;\n        state.s11n.serialize(\"This is ä string.\");\n        rc = state.s11n.deserialize();\n        log(\"deserialize() says:\",rc);\n        if(\"This is ä string.\"!==rc[0]) toss(\"String d13n error.\");\n        vfsSyncWrappers.xAccess(opfsVfs.pointer, zDbFile, 0, pOut);\n        rc = wasm.peek(pOut,'i32');\n        log(\"xAccess(\",dbFile,\") exists ?=\",rc);\n        rc = vfsSyncWrappers.xOpen(opfsVfs.pointer, zDbFile,\n                                   fid, openFlags, pOut);\n        log(\"open rc =\",rc,\"state.sabOPView[xOpen] =\",\n            state.sabOPView[state.opIds.xOpen]);\n        if(0!==rc){\n          error(\"open failed with code\",rc);\n          return;\n        }\n        vfsSyncWrappers.xAccess(opfsVfs.pointer, zDbFile, 0, pOut);\n        rc = wasm.peek(pOut,'i32');\n        if(!rc) toss(\"xAccess() failed to detect file.\");\n        rc = ioSyncWrappers.xSync(sq3File.pointer, 0);\n        if(rc) toss('sync failed w/ rc',rc);\n        rc = ioSyncWrappers.xTruncate(sq3File.pointer, 1024);\n        if(rc) toss('truncate failed w/ rc',rc);\n        wasm.poke(pOut,0,'i64');\n        rc = ioSyncWrappers.xFileSize(sq3File.pointer, pOut);\n        if(rc) toss('xFileSize failed w/ rc',rc);\n        log(\"xFileSize says:\",wasm.peek(pOut, 'i64'));\n        rc = ioSyncWrappers.xWrite(sq3File.pointer, zDbFile, 10, 1);\n        if(rc) toss(\"xWrite() failed!\");\n        const readBuf = wasm.scopedAlloc(16);\n        rc = ioSyncWrappers.xRead(sq3File.pointer, readBuf, 6, 2);\n        wasm.poke(readBuf+6,0);\n        let jRead = wasm.cstrToJs(readBuf);\n        log(\"xRead() got:\",jRead);\n        if(\"sanity\"!==jRead) toss(\"Unexpected xRead() value.\");\n        if(vfsSyncWrappers.xSleep){\n          log(\"xSleep()ing before close()ing...\");\n          vfsSyncWrappers.xSleep(opfsVfs.pointer,2000);\n          log(\"waking up from xSleep()\");\n        }\n        rc = ioSyncWrappers.xClose(fid);\n        log(\"xClose rc =\",rc,\"sabOPView =\",state.sabOPView);\n        log(\"Deleting file:\",dbFile);\n        vfsSyncWrappers.xDelete(opfsVfs.pointer, zDbFile, 0x1234);\n        vfsSyncWrappers.xAccess(opfsVfs.pointer, zDbFile, 0, pOut);\n        rc = wasm.peek(pOut,'i32');\n        if(rc) toss(\"Expecting 0 from xAccess(\",dbFile,\") after xDelete().\");\n        warn(\"End of OPFS sanity checks.\");\n      }finally{\n        sq3File.dispose();\n        wasm.scopedAllocPop(scope);\n      }\n    }/*sanityCheck()*/;\n\n    W.onmessage = function({data}){\n      //log(\"Worker.onmessage:\",data);\n      switch(data.type){\n          case 'opfs-unavailable':\n            /* Async proxy has determined that OPFS is unavailable. There's\n               nothing more for us to do here. */\n            promiseReject(new Error(data.payload.join(' ')));\n            break;\n          case 'opfs-async-loaded':\n            /*Arrives as soon as the asyc proxy finishes loading.\n              Pass our config and shared state on to the async worker.*/\n            W.postMessage({type: 'opfs-async-init',args: state});\n            break;\n          case 'opfs-async-inited':{\n            /*Indicates that the async partner has received the 'init'\n              and has finished initializing, so the real work can\n              begin...*/\n            if(true===promiseWasRejected){\n              break /* promise was already rejected via timer */;\n            }\n            try {\n              sqlite3.vfs.installVfs({\n                io: {struct: opfsIoMethods, methods: ioSyncWrappers},\n                vfs: {struct: opfsVfs, methods: vfsSyncWrappers}\n              });\n              state.sabOPView = new Int32Array(state.sabOP);\n              state.sabFileBufView = new Uint8Array(state.sabIO, 0, state.fileBufferSize);\n              state.sabS11nView = new Uint8Array(state.sabIO, state.sabS11nOffset, state.sabS11nSize);\n              initS11n();\n              if(options.sanityChecks){\n                warn(\"Running sanity checks because of opfs-sanity-check URL arg...\");\n                sanityCheck();\n              }\n              if(thisThreadHasOPFS()){\n                navigator.storage.getDirectory().then((d)=>{\n                  W.onerror = W._originalOnError;\n                  delete W._originalOnError;\n                  sqlite3.opfs = opfsUtil;\n                  opfsUtil.rootDirectory = d;\n                  log(\"End of OPFS sqlite3_vfs setup.\", opfsVfs);\n                  promiseResolve(sqlite3);\n                }).catch(promiseReject);\n              }else{\n                promiseResolve(sqlite3);\n              }\n            }catch(e){\n              error(e);\n              promiseReject(e);\n            }\n            break;\n          }\n          default:\n            promiseReject(e);\n            error(\"Unexpected message from the async worker:\",data);\n            break;\n      }/*switch(data.type)*/\n    }/*W.onmessage()*/;\n  })/*thePromise*/;\n  return thePromise;\n}/*installOpfsVfs()*/;\ninstallOpfsVfs.defaultProxyUri =\n  \"sqlite3-opfs-async-proxy.js\";\nglobalThis.sqlite3ApiBootstrap.initializersAsync.push(async (sqlite3)=>{\n  try{\n    let proxyJs = installOpfsVfs.defaultProxyUri;\n    if(sqlite3.scriptInfo.sqlite3Dir){\n      installOpfsVfs.defaultProxyUri =\n        sqlite3.scriptInfo.sqlite3Dir + proxyJs;\n      //sqlite3.config.warn(\"installOpfsVfs.defaultProxyUri =\",installOpfsVfs.defaultProxyUri);\n    }\n    return installOpfsVfs().catch((e)=>{\n      sqlite3.config.warn(\"Ignoring inability to install OPFS sqlite3_vfs:\",e.message);\n    });\n  }catch(e){\n    sqlite3.config.error(\"installOpfsVfs() exception:\",e);\n    throw e;\n  }\n});\n}/*sqlite3ApiBootstrap.initializers.push()*/);\n/* END FILE: api/sqlite3-vfs-opfs.c-pp.js */\n/* BEGIN FILE: api/sqlite3-api-cleanup.js */\n/*\n  2022-07-22\n\n  The author disclaims copyright to this source code.  In place of a\n  legal notice, here is a blessing:\n\n  *   May you do good and not evil.\n  *   May you find forgiveness for yourself and forgive others.\n  *   May you share freely, never taking more than you give.\n\n  ***********************************************************************\n\n  This file is the tail end of the sqlite3-api.js constellation,\n  intended to be appended after all other sqlite3-api-*.js files so\n  that it can finalize any setup and clean up any global symbols\n  temporarily used for setting up the API's various subsystems.\n*/\n'use strict';\nif('undefined' !== typeof Module){ // presumably an Emscripten build\n  /**\n     Install a suitable default configuration for sqlite3ApiBootstrap().\n  */\n  const SABC = Object.assign(\n    Object.create(null), {\n      exports: Module['asm'],\n      memory: Module.wasmMemory /* gets set if built with -sIMPORT_MEMORY */\n    },\n    globalThis.sqlite3ApiConfig || {}\n  );\n\n  /**\n     For current (2022-08-22) purposes, automatically call\n     sqlite3ApiBootstrap().  That decision will be revisited at some\n     point, as we really want client code to be able to call this to\n     configure certain parts. Clients may modify\n     globalThis.sqlite3ApiBootstrap.defaultConfig to tweak the default\n     configuration used by a no-args call to sqlite3ApiBootstrap(),\n     but must have first loaded their WASM module in order to be\n     able to provide the necessary configuration state.\n  */\n  //console.warn(\"globalThis.sqlite3ApiConfig = \",globalThis.sqlite3ApiConfig);\n  globalThis.sqlite3ApiConfig = SABC;\n  let sqlite3;\n  try{\n    sqlite3 = globalThis.sqlite3ApiBootstrap();\n  }catch(e){\n    console.error(\"sqlite3ApiBootstrap() error:\",e);\n    throw e;\n  }finally{\n    delete globalThis.sqlite3ApiBootstrap;\n    delete globalThis.sqlite3ApiConfig;\n  }\n\n  Module.sqlite3 = sqlite3 /* Needed for customized sqlite3InitModule() to be able to\n                              pass the sqlite3 object off to the client. */;\n}else{\n  console.warn(\"This is not running in an Emscripten module context, so\",\n               \"globalThis.sqlite3ApiBootstrap() is _not_ being called due to lack\",\n               \"of config info for the WASM environment.\",\n               \"It must be called manually.\");\n}\n/* END FILE: api/sqlite3-api-cleanup.js */\n/* END FILE: ./bld/sqlite3-api.c-pp.js */\n/* BEGIN FILE: api/post-js-footer.js */\n/* The current function scope was opened via post-js-header.js, which\n   gets prepended to this at build-time. This file closes that\n   scope. */\n})/*postRun.push(...)*/;\n/* END FILE: api/post-js-footer.js */\n\n\n// end include: /home/mmom/src/sqlite-wasm-http/deps/sqlite/ext/wasm/bld/post-js.bundler-friendly.js\n\n\n  return sqlite3InitModule.ready\n}\n\n);\n})();\n/* ^^^^ ACHTUNG: blank line at the start is necessary because\n   Emscripten will not add a newline in some cases and we need\n   a blank line for a sed-based kludge for the ES6 build. */\n/* extern-post-js.js must be appended to the resulting sqlite3.js\n   file. It gets its name from being used as the value for the\n   --extern-post-js=... Emscripten flag. Note that this code, unlike\n   most of the associated JS code, runs outside of the\n   Emscripten-generated module init scope, in the current\n   global scope. */\nconst toExportForESM =\n(function(){\n  /**\n     In order to hide the sqlite3InitModule()'s resulting\n     Emscripten module from downstream clients (and simplify our\n     documentation by being able to elide those details), we hide that\n     function and expose a hand-written sqlite3InitModule() to return\n     the sqlite3 object (most of the time).\n\n     Unfortunately, we cannot modify the module-loader/exporter-based\n     impls which Emscripten installs at some point in the file above\n     this.\n  */\n  const originalInit =\n        /* Maintenance reminder: DO NOT use `self.` here. It's correct\n           for non-ES6 Module cases but wrong for ES6 modules because those\n           resolve this symbol differently. */ sqlite3InitModule;\n  if(!originalInit){\n    throw new Error(\"Expecting globalThis.sqlite3InitModule to be defined by the Emscripten build.\");\n  }\n  /**\n     We need to add some state which our custom Module.locateFile()\n     can see, but an Emscripten limitation currently prevents us from\n     attaching it to the sqlite3InitModule function object:\n\n     https://github.com/emscripten-core/emscripten/issues/18071\n\n     The only(?) current workaround is to temporarily stash this state\n     into the global scope and delete it when sqlite3InitModule()\n     is called.\n  */\n  const initModuleState = globalThis.sqlite3InitModuleState = Object.assign(Object.create(null),{\n    moduleScript: globalThis?.document?.currentScript,\n    isWorker: ('undefined' !== typeof WorkerGlobalScope),\n    location: globalThis.location,\n    urlParams:  globalThis?.location?.href\n      ? new URL(globalThis.location.href).searchParams\n      : new URLSearchParams()\n  });\n  initModuleState.debugModule =\n    initModuleState.urlParams.has('sqlite3.debugModule')\n    ? (...args)=>console.warn('sqlite3.debugModule:',...args)\n    : ()=>{};\n\n  if(initModuleState.urlParams.has('sqlite3.dir')){\n    initModuleState.sqlite3Dir = initModuleState.urlParams.get('sqlite3.dir') +'/';\n  }else if(initModuleState.moduleScript){\n    const li = initModuleState.moduleScript.src.split('/');\n    li.pop();\n    initModuleState.sqlite3Dir = li.join('/') + '/';\n  }\n\n  globalThis.sqlite3InitModule = function ff(...args){\n    //console.warn(\"Using replaced sqlite3InitModule()\",globalThis.location);\n    return originalInit(...args).then((EmscriptenModule)=>{\n      if('undefined'!==typeof WorkerGlobalScope &&\n         (EmscriptenModule['ENVIRONMENT_IS_PTHREAD']\n          || EmscriptenModule['_pthread_self']\n          || 'function'===typeof threadAlert\n          || globalThis?.location?.pathname?.endsWith?.('.worker.js')\n         )){\n        /** Workaround for wasmfs-generated worker, which calls this\n            routine from each individual thread and requires that its\n            argument be returned. All of the criteria above are fragile,\n            based solely on inspection of the offending code, not public\n            Emscripten details. */\n        return EmscriptenModule;\n      }\n      const s = EmscriptenModule.sqlite3;\n      s.scriptInfo = initModuleState;\n      //console.warn(\"sqlite3.scriptInfo =\",s.scriptInfo);\n      if(ff.__isUnderTest) s.__isUnderTest = true;\n      const f = s.asyncPostInit;\n      delete s.asyncPostInit;\n      return f();\n    }).catch((e)=>{\n      console.error(\"Exception loading sqlite3 module:\",e);\n      throw e;\n    });\n  };\n  globalThis.sqlite3InitModule.ready = originalInit.ready;\n\n  if(globalThis.sqlite3InitModuleState.moduleScript){\n    const sim = globalThis.sqlite3InitModuleState;\n    let src = sim.moduleScript.src.split('/');\n    src.pop();\n    sim.scriptDir = src.join('/') + '/';\n  }\n  initModuleState.debugModule('sqlite3InitModuleState =',initModuleState);\n  if(0){\n    console.warn(\"Replaced sqlite3InitModule()\");\n    console.warn(\"globalThis.location.href =\",globalThis.location.href);\n    if('undefined' !== typeof document){\n      console.warn(\"document.currentScript.src =\",\n                   document?.currentScript?.src);\n    }\n  }\n  return globalThis.sqlite3InitModule /* required for ESM */;\n})();\nexport default toExportForESM;\n"],"names":["_scriptDir","sqlite3InitModule","readyPromiseResolve","readyPromiseReject","Module","Promise","resolve","reject","sqlite3InitModuleState","globalThis","Object","assign","create","debugModule","location","xNameOfInstantiateWasm","callee","imports","onSuccess","env","foo","uri","locateFile","scriptDirectory","wfetch","fetch","credentials","WebAssembly","instantiateStreaming","async","then","arg","instance","module","response","arrayBuffer","bytes","instantiate","read_","readAsync","readBinary","moduleOverrides","thisProgram","ENVIRONMENT_IS_WEB","window","ENVIRONMENT_IS_WORKER","importScripts","process","versions","node","self","href","document","currentScript","src","indexOf","substr","replace","lastIndexOf","url","xhr","XMLHttpRequest","open","send","responseText","responseType","Uint8Array","onload","onerror","status","wasmBinary","wasmMemory","out","console","log","bind","err","warn","abort","ABORT","assert","condition","text","HEAP8","HEAPU8","HEAP16","HEAP32","HEAPU32","UTF8Decoder","TextDecoder","undefined","UTF8ArrayToString","heapOrArray","idx","maxBytesToRead","endIdx","endPtr","buffer","decode","subarray","str","u0","u1","u2","String","fromCharCode","ch","stringToUTF8Array","heap","outIdx","maxBytesToWrite","startIdx","i","length","u","charCodeAt","stringToUTF8","outPtr","lengthBytesUTF8","len","c","updateMemoryViews","b","Int8Array","Int16Array","Int32Array","Uint16Array","Uint32Array","Float32Array","Float64Array","BigInt64Array","BigUint64Array","INITIAL_MEMORY","Memory","byteLength","__ATPRERUN__","__ATINIT__","__ATPOSTRUN__","runDependencies","runDependencyWatcher","dependenciesFulfilled","addRunDependency","id","removeRunDependency","clearInterval","callback","what","e","RuntimeError","wasmBinaryFile","path","tempDouble","tempI64","dataURIPrefix","isDataURI","filename","startsWith","getBinary","file","instantiateArrayBuffer","binaryFile","receiver","catch","getBinaryPromise","binary","reason","callRuntimeCallbacks","callbacks","shift","URL","PATH","isAbs","charAt","splitPath","exec","slice","normalizeArray","parts","allowAboveRoot","up","last","splice","unshift","normalize","isAbsolute","trailingSlash","split","filter","p","join","dirname","result","root","dir","basename","lastSlash","paths","Array","prototype","call","arguments","join2","l","r","PATH_FS","resolvedPath","resolvedAbsolute","FS","cwd","TypeError","relative","from","to","trim","arr","start","end","fromParts","toParts","Math","min","samePartsLength","outputParts","push","concat","intArrayFromString","stringy","dontAddNull","u8array","numBytesWritten","TTY","ttys","init","shutdown","register","dev","ops","input","output","registerDevice","stream_ops","stream","tty","rdev","ErrnoError","seekable","close","fsync","read","offset","pos","get_char","bytesRead","timestamp","Date","now","write","put_char","default_tty_ops","prompt","readline","val","default_tty1_ops","mmapAlloc","size","MEMFS","ops_table","mount","createNode","parent","name","mode","isBlkdev","isFIFO","getattr","node_ops","setattr","lookup","mknod","rename","unlink","rmdir","readdir","symlink","llseek","allocate","mmap","msync","link","readlink","chrdev","chrdev_stream_ops","isDir","contents","isFile","usedBytes","isLink","isChrdev","getFileDataAsTypedArray","expandFileStorage","newCapacity","prevCapacity","max","oldContents","set","resizeFileStorage","newSize","attr","ino","nlink","uid","gid","atime","mtime","ctime","blksize","blocks","ceil","genericErrors","old_node","new_dir","new_name","new_node","lookupNode","entries","key","hasOwnProperty","newname","oldpath","position","canOwn","whence","prot","flags","ptr","allocated","byteOffset","mmapFlags","mounts","devices","streams","nextInode","nameTable","currentPath","initialized","ignorePermissions","filesystems","syncFSRequests","lookupPath","opts","follow_mount","recurse_count","current","current_path","islast","isMountpoint","mounted","follow","count","getPath","isRoot","mountpoint","hashName","parentid","hash","hashAddNode","name_next","hashRemoveNode","errCode","mayLookup","nodeName","FSNode","destroyNode","isSocket","flagModes","modeStringToFlags","Error","flagsToPermissionString","flag","perms","nodePermissions","includes","mayCreate","mayDelete","isdir","errno","mayOpen","MAX_OPEN_FDS","nextfd","fd_start","fd_end","fd","getStream","createStream","FSStream","this","shared","defineProperties","object","get","isRead","isWrite","isAppend","closeStream","device","getDevice","major","minor","makedev","ma","mi","getMounts","check","m","pop","apply","syncfs","populate","completed","doCallback","done","errored","forEach","type","pseudo","mountRoot","unmount","keys","next","mkdir","mkdirTree","dirs","d","mkdev","newpath","old_path","new_path","old_dir","old_dirname","new_dirname","old_name","stat","dontFollow","lstat","chmod","lchmod","fchmod","chown","lchown","fchown","truncate","ftruncate","utime","created","ungotten","error","readFiles","isClosed","getdents","seeking","bytesWritten","munmap","ioctl","cmd","readFile","encoding","ret","buf","writeFile","data","actualNumBytes","ArrayBuffer","isView","chdir","createDefaultDirectories","createDefaultDevices","random_device","crypto","randomBuffer","getRandomValues","getRandomDevice","createDevice","createSpecialDirectories","proc_self","createStandardStreams","ensureErrnoError","setErrno","message","constructor","code","stack","staticInit","quit","getMode","canRead","canWrite","findObject","dontResolveLastLink","analyzePath","exists","parentExists","parentPath","parentObject","createPath","reverse","part","createFile","properties","createDataFile","forceLoadFile","obj","isDevice","isFolder","createLazyFile","LazyUint8Array","lengthKnown","chunks","chunkOffset","chunkSize","chunkNum","getter","setDataGetter","cacheLength","header","datalength","Number","getResponseHeader","hasByteServing","usesGzip","lazyArray","setRequestHeader","overrideMimeType","doXHR","_length","_chunkSize","writeChunks","fn","createPreloadedFile","dontCreateFile","preFinish","fullname","processData","byteArray","finish","Browser","handledByPreloadPlugin","noRunDep","dep","event","asyncLoad","indexedDB","mozIndexedDB","webkitIndexedDB","msIndexedDB","DB_NAME","pathname","DB_VERSION","DB_STORE_NAME","saveFilesToDB","openRequest","onupgradeneeded","createObjectStore","onsuccess","transaction","files","objectStore","ok","fail","total","putRequest","put","loadFilesFromDB","db","getRequest","SYSCALLS","DEFAULT_POLLMASK","calculateAt","dirfd","allowEmpty","getStreamFromFD","doStat","func","abs","floor","getTime","doMsync","addr","varargs","getStr","UTF8ToString","MAX_INT53","MIN_INT53","bigintToI53Checked","num","NaN","readI53FromI64","_emscripten_get_now","__MONTH_DAYS_LEAP_CUMULATIVE","__MONTH_DAYS_REGULAR_CUMULATIVE","allocateUTF8","_malloc","emscripten_realloc_buffer","grow","performance","ENV","getEnvStrings","strings","navigator","languages","x","calledRun","wasmImports","amode","owner","group","___errno_location","isNaN","cwdLengthInBytes","op","argp","nofollow","bufsize","endChar","times","seconds","nanoseconds","time","tmPtr","date","getSeconds","getMinutes","getHours","getDate","getMonth","getFullYear","getDay","yday","year","__yday_from_date","getTimezoneOffset","summerOffset","winterOffset","dst","timezone","daylight","tzname","currentYear","winter","summer","stdTimezoneOffset","extractZone","match","toTimeString","winterName","summerName","winterNamePtr","summerNamePtr","requestedSize","oldSize","maxHeapSize","cutDown","overGrownHeapSize","__environ","environ_buf","bufSize","string","writeAsciiToMemory","penviron_count","penviron_buf_size","pbuf","iov","iovcnt","pnum","curr","doReadv","newOffset","doWritev","info","receiveInstance","cb","exports","createWasm","run","doRun","postRun","preRun","setTimeout","runCaller","sqlite3ApiBootstrap","apiConfig","sqlite3ApiConfig","defaultConfig","sqlite3","config","memory","bigIntEnabled","HEAPU64","debug","wasmfsOpfsDir","useStdAlloc","allocExportName","deallocExportName","reallocExportName","k","wasmOpfsDir","capi","wasm","__rcStr","rc","sqlite3_js_rc_str","SQLite3Error","args","n","super","rcStr","resultCode","SQLITE_ERROR","toss","toss3","test","isInt32","__SAB","SharedArrayBuffer","isSharedTypedArray","aTypedArray","typedArrayPart","begin","isBindableTypedArray","v","isSQLableTypedArray","affirmBindableTypedArray","utf8Decoder","typedArrayToString","typedArray","WasmAllocError","SQLITE_NOMEM","sqlite3_bind_blob","sqlite3_bind_text","sqlite3_create_function_v2","pDb","funcName","nArg","eTextRep","pApp","xFunc","xStep","xFinal","xDestroy","sqlite3_create_function","sqlite3_create_window_function","xValue","xInverse","sqlite3_prepare_v3","dbPtr","sql","sqlByteLen","prepFlags","stmtPtrPtr","strPtrPtr","sqlite3_prepare_v2","sqlite3_exec","pVoid","pErrMsg","sqlite3_randomness","util","flexibleString","isArray","isPtr","cstrToJs","bigIntFits32","bigIntFits64","f","_max","BigInt","_min","bigIntFitsDouble","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","isTypedArray","BYTES_PER_ELEMENT","isUIThread","ptrSizeof","wasmPtrSizeof","ptrIR","wasmPtrIR","alloc","realloc","dealloc","allocFromTypedArray","srcTypedArray","pRet","heapForSize","keyAlloc","keyDealloc","keyRealloc","Function","impl","m2","__wasmfsOpfsDir","compileOptionUsed","optName","_result","_opt","_rx","_rxInt","opt","rv","ov","sqlite3_compileoption_get","sqlite3_compileoption_used","pstack","restore","sqlite3_wasm_pstack_restore","sizeofIR","sqlite3_wasm_pstack_alloc","allocChunks","sz","mem","allocPtr","safePtrSize","pointer","configurable","iterable","writeable","sqlite3_wasm_pstack_ptr","quota","sqlite3_wasm_pstack_quota","remaining","sqlite3_wasm_pstack_remaining","ta","heap8u","nAlloc","j","sqlite3_wasmfs_opfs_dir","pdir","FileSystemHandle","FileSystemDirectoryHandle","FileSystemFileHandle","xCallWrapped","sqlite3_wasmfs_filename_is_persistent","sqlite3_js_db_uses_vfs","vfsName","dbName","pK","sqlite3_vfs_find","sqlite3_js_db_vfs","sqlite3_js_vfs_list","pVfs","oVfs","sqlite3_vfs","$zName","$pNext","dispose","sqlite3_js_db_export","schema","xWrap","testConvertArg","scope","scopedAllocPush","pOut","pSize","scopedAlloc","ppOut","zSchema","scopedAllocCString","sqlite3_wasm_db_serialize","peekPtr","nOut","peek","sqlite3_free","scopedAllocPop","dbPointer","sqlite3_wasm_db_vfs","sqlite3_js_aggregate_context","pCtx","sqlite3_aggregate_context","sqlite3_js_vfs_create_file","vfs","dataLen","pData","sqlite3_wasm_vfs_create_file","__kvvfsInfo","which","prefix","stores","sessionStorage","localStorage","sqlite3_js_kvvfs_clear","kvinfo","s","toRm","kk","removeItem","sqlite3_js_kvvfs_size","getItem","sqlite3_db_config","pii","ip","SQLITE_DBCONFIG_ENABLE_FKEY","SQLITE_DBCONFIG_ENABLE_TRIGGER","SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER","SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION","SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE","SQLITE_DBCONFIG_ENABLE_QPSG","SQLITE_DBCONFIG_TRIGGER_EQP","SQLITE_DBCONFIG_RESET_DATABASE","SQLITE_DBCONFIG_DEFENSIVE","SQLITE_DBCONFIG_WRITABLE_SCHEMA","SQLITE_DBCONFIG_LEGACY_ALTER_TABLE","SQLITE_DBCONFIG_DQS_DML","SQLITE_DBCONFIG_DQS_DDL","SQLITE_DBCONFIG_ENABLE_VIEW","SQLITE_DBCONFIG_LEGACY_FILE_FORMAT","SQLITE_DBCONFIG_TRUSTED_SCHEMA","SQLITE_DBCONFIG_LOOKASIDE","SQLITE_DBCONFIG_MAINDBNAME","SQLITE_MISUSE","sqlite3_value_to_js","pVal","throwIfCannotConvert","valType","sqlite3_value_type","SQLITE_INTEGER","sqlite3_value_int64","sqlite3_value_double","SQLITE_FLOAT","SQLITE_TEXT","sqlite3_value_text","SQLITE_BLOB","sqlite3_value_bytes","pBlob","sqlite3_value_blob","SQLITE_NULL","SQLITE_MISMATCH","sqlite3_values_to_js","argc","pArgv","tgt","sqlite3_result_error_js","sqlite3_result_error_nomem","sqlite3_result_error","sqlite3_result_js","sqlite3_result_int","sqlite3_result_double","sqlite3_result_int64","toString","isInteger","allocCString","sqlite3_result_text","SQLITE_WASM_DEALLOC","sqlite3_result_null","sqlite3_result_blob","sqlite3_column_js","pStmt","iCol","sqlite3_column_value","__newOldValue","pObj","pokePtr","pv","sqlite3_preupdate_new_js","sqlite3_preupdate_old_js","sqlite3changeset_new_js","pChangesetIter","sqlite3changeset_old_js","version","client","asyncPostInit","lip","initializersAsync","map","postInit","__isUnderTest","StructBinder","scriptInfo","initializers","WhWasmUtilInstaller","target","defineProperty","enumerable","pointerIR","cache","heapSize","freeFuncIndexes","utf8Encoder","TextEncoder","endsWith","heapWrappers","HEAP8U","HEAP16U","HEAP32U","HEAP64","HEAP64U","HEAP32F","HEAP64F","heap8","heap16","heap16u","heap32","heap32u","unsigned","functionTable","__indirect_function_table","functionEntry","fptr","ft","jsFuncToWasm","sig","_","sigTypes","P","typeCodes","f64","f32","i64","i32","uleb128Encode","method","rxJSig","sigParams","letterType","pushSigType","dest","letter","wasmCode","Instance","__installFunction","scoped","oldLen","installFunction","scopedInstallFunction","uninstallFunction","fi","list","poke","value","peek8","poke8","peek16","poke16","peek32","poke32","peek64","poke64","peek32f","poke32f","peek64f","poke64f","getMemValue","getPtrValue","setMemValue","setPtrValue","isPtr32","cstrlen","h","jstrlen","jstrcpy","jstr","maxBytes","addNul","cstrncpy","tgtPtr","srcPtr","strPtr","jstrToUintArray","encode","__affirmAlloc","__allocCStr","returnWithLength","allocator","a","state","__allocMainArgv","isScoped","pList","scopedAllocMainArgv","allocMainArgv","cArgvToJs","scopedAllocCall","__allocPtr","howMany","pIr","scopedAllocPtr","xGet","__argcMismatch","xCall","fname","convert","Map","xArg","xResult","__xArgPtr","valueOf","copyToResult","adaptPtr","t","__xArgString","JSON","parse","AbstractArgAdapter","convertArg","argv","argIndex","FuncPtrAdapter","warnOnUse","signature","contextKey","bindScope","bindScopes","bindMod","isTransient","isContext","isPermanent","singleton","callProxy","static","contextMap","cm","__cmap","pair","fp","debugFuncInstall","debugOut","__xArgAdapterCheck","__xResultAdapterCheck","convertArgNoCheck","convertResult","convertResultNoCheck","fArg","resultType","argTypes","fIsFunc","xf","cxw","__xAdapter","typeName","adapter","modeName","xcvPart","resultAdapter","argAdapter","testConvertResult","yawl","wui","finalThen","wasmUtilTarget","malloc","free","Jaccwabyt","StructBinderFactory","SBF","memberPrefix","memberSuffix","debugFlags","__makeDebugFlags","deriveFrom","__flags","setter","_flags","writable","isLittleEndian","DataView","setInt16","sigLetter","isFuncSig","sigIR","affirmBigIntArray","sPropName","__instancePointerMap","WeakMap","xPtrPropName","__freeStruct","ctor","delete","ondispose","StructType","structName","structInfo","sizeof","rop","__allocStruct","fill","__memberKeyProp","__lookupMember","memberName","tossIfNotFound","members","values","__memberSignature","emscriptenFormat","__ptrPropDescriptor","__structMemberKeys","memberKey","__utf8Decoder","__utf8Encoder","__affirmCStringSignature","member","stringify","__addOnDispose","__allocCString","lookupMember","memberToJsString","__memberToJsString","memberIsString","__memberIsString","memberKeys","memberSignature","memoryDump","setMemberCString","__setMemberCString","addOnDispose","isA","hasExternalPointer","isNumericValue","isFinite","makeMemberWrapper","descr","getters","setters","sw","sigDVGetter","sigDVSetter","sigDVSetWrapper","rxSig1","rxSig2","sigCheck","sigGlyph","xPropName","dbg","prop","propName","readOnly","lastMember","StructCtor","externalMemory","methodInfoForKey","mKey","bindingSignatures","aNames","nCols","pColVals","pColNames","aVals","pV","iCode","s0","s1","s2","s3","sqlite3_activate_see","int64","zDb","zTbl","iKey1","iKey2","z0","z1","rowid","sqlite3changegroup_add","__ipsProxy","__xString","nilType","oo1","Stmt","DB","sqlite3_index_info","sqlite3_module","SQLITE_NOTFOUND","__xRcPtr","fI64Disabled","sqlite3_wasm_db_error","__db_err","msg","cJson","ctype","defineGroups","__rcMap","notThese","WasmTestStruct","sqlite3_kvvfs_methods","sqlite3_index_constraint","sqlite3_index_orderby","sqlite3_index_constraint_usage","structs","sqlite3_vtab_config","__dbArgcMismatch","__errEncoding","SQLITE_FORMAT","__argPDb","__argStr","__dbCleanupMap","dbMap","addCollation","collation","Set","add","toLowerCase","_addUDF","arity","addFunction","udf","addWindowFunc","wudf","cleanup","closeArgs","sqlite3_create_collation_v2","SQLITE_UTF8","fmap","arities","fargs","clear","__sqlite3CloseV2","sqlite3_close_v2","sqlite3session_table_filter","__sqlite3SessionDelete","sqlite3session_delete","pSession","__sqlite3CreateCollationV2","zName","pArg","xCompare","sqlite3_create_collation","__cfProxy","xInverseAndStep","xFinalAndValue","__sqlite3CreateFunction","__sqlite3CreateWindowFunction","udfSetResult","udfConvertArgs","udfSetError","__flexiString","__prepare","basic","full","sqlLen","ppStmt","pzTail","xSql","xSqlLen","__bindText","__bindBlob","nText","sqlite3_db_handle","pMem","nMem","sqlite3_config","SQLITE_CONFIG_COVERING_INDEX_SCAN","SQLITE_CONFIG_MEMSTATUS","SQLITE_CONFIG_SMALL_MALLOC","SQLITE_CONFIG_SORTERREF_SIZE","SQLITE_CONFIG_STMTJRNL_SPILL","SQLITE_CONFIG_URI","sqlite3_wasm_config_i","SQLITE_CONFIG_LOOKASIDE","sqlite3_wasm_config_ii","SQLITE_CONFIG_MEMDB_MAXSIZE","sqlite3_wasm_config_j","SQLITE_CONFIG_GETMALLOC","SQLITE_CONFIG_GETMUTEX","SQLITE_CONFIG_GETPCACHE2","SQLITE_CONFIG_GETPCACHE","SQLITE_CONFIG_HEAP","SQLITE_CONFIG_LOG","SQLITE_CONFIG_MALLOC","SQLITE_CONFIG_MMAP_SIZE","SQLITE_CONFIG_MULTITHREAD","SQLITE_CONFIG_MUTEX","SQLITE_CONFIG_PAGECACHE","SQLITE_CONFIG_PCACHE2","SQLITE_CONFIG_PCACHE","SQLITE_CONFIG_PCACHE_HDRSZ","SQLITE_CONFIG_PMASZ","SQLITE_CONFIG_SERIALIZED","SQLITE_CONFIG_SINGLETHREAD","SQLITE_CONFIG_SQLLOG","SQLITE_CONFIG_WIN32_HEAPSIZE","__autoExtFptr","sqlite3_auto_extension","fPtr","sqlite3_cancel_auto_extension","sqlite3_reset_auto_extension","pKvvfs","kvvfsMethods","sqlite3_wasm_kvvfs_methods","kvvfsMakeKey","sqlite3_wasm_kvvfsMakeKeyOnPstack","kvvfsStorage","zClass","kvvfsImpls","xRead","zKey","zBuf","nBuf","astack","zXKey","jKey","jV","nV","zV","copyWithin","xWrite","zData","setItem","SQLITE_IOERR","xDelete","sqlite3_vfs_unregister","__ptrMap","__stmtMap","getOwnOption","dflt","getOwnPropertyDescriptor","checkSqlite3Rc","sqliteResultCode","sqlite3_errmsg","sqlite3_errstr","__dbTraceToConsole","SQLITE_TRACE_STMT","counter","__vfsPostOpenSql","dbCtorHelper","_name2vfs","isWorkerThread","normalizeArgs","flagsStr","fnJs","vfsCheck","oflags","SQLITE_OPEN_CREATE","SQLITE_OPEN_READWRITE","SQLITE_OPEN_READONLY","SQLITE_OPEN_EXRESCODE","pPtr","sqlite3_open_v2","sqlite3_extended_result_codes","sqlite3_trace_v2","postInitSql","setVfsPostOpenSql","BindTypes","null","number","boolean","blob","bigint","columnCount","sqlite3_column_count","parameterCount","sqlite3_bind_parameter_count","affirmDbOpen","affirmColIndex","stmt","ndx","__selectFirstRow","getArgs","prepare","step","finalize","__selectAll","rowMode","returnValue","checkRc","isOpen","affirmOpen","onclose","before","after","changes","sixtyFour","sqlite3_total_changes64","sqlite3_total_changes","sqlite3_changes64","sqlite3_changes","dbFilename","sqlite3_db_filename","dbNumber","sqlite3_db_name","dbVfsName","resultRows","returnVal","saveSql","cbArg","$colName","parseExecArgs","evalFirstResult","columnNames","isTA","pSql","pSqlEnd","sqlite3_sql","getColumnNames","_isLocked","row","createFunction","isFunc","isWindow","fFlags","SQLITE_DETERMINISTIC","SQLITE_DIRECTONLY","SQLITE_INNOCUOUS","xArity","arityArg","selectValue","asType","selectValues","selectArray","selectObject","selectArrays","selectObjects","openStatementCount","opener","savepoint","affirmStmtOpen","affirmSupportedBindType","isSupportedBindType","affirmUnlocked","currentOpName","bindOne","bindType","_tooBigInt","asBlob","pStr","sqlite3_bind_parameter_index","affirmParamIndex","sqlite3_bind_null","sqlite3_bind_int","sqlite3_bind_int64","sqlite3_bind_double","_mayGet","sqlite3_finalize","clearBindings","sqlite3_clear_bindings","reset","alsoClearBinds","sqlite3_reset","bindAsBlob","sqlite3_step","SQLITE_DONE","SQLITE_ROW","stepReset","stepFinalize","sqlite3_column_name","sqlite3_column_type","sqlite3_column_int64","sqlite3_column_double","sqlite3_column_text","sqlite3_column_bytes","sqlite3_column_blob","_blobXfer","getInt","getFloat","getString","getBlob","getJSON","SQLITE_STRING","getColumnName","getParamIndex","JsStorageDb","storageName","jdb","clearStorage","storageSize","initWorker1API","WorkerGlobalScope","getDbId","wState","idMap","idSeq","dbList","xfer","dbs","alsoUnlink","ddNdx","sqlite3_wasm_vfs_unlink","post","xferList","postMessage","getDb","require","getMsgDb","msgData","affirmExists","dbId","wMsgHandler","ev","oargs","simulateError","guessVfs","cause","persistent","doUnlink","theCallback","rowNumber","hadColNames","vfsList","opfsEnabled","opfs","export","mimetype","treeList","onmessage","evType","arrivalTime","operation","errorClass","messageId","workerReceivedTime","workerRespondTime","departureTime","vtab","sii","nthConstraint","asPtr","$nConstraint","$aConstraint","nthConstraintUsage","$aConstraintUsage","nthOrderBy","$nOrderBy","$aOrderBy","installMethod","applyArgcCheck","installMethodArgcCheck","argcProxy","removeFuncList","__removeFuncList","sigN","memKey","fProxy","pFunc","installMethods","structInstance","methods","seen","prior","mkey","registerVfs","asDefault","sqlite3_vfs_register","installVfs","propList","o","struct","StructPtrMapper","__xWrap","methodName","removeMapping","__xWrapFactory","pCObj","unget","xVtab","sqlite3_vtab","xCursor","sqlite3_vtab_cursor","xIndexInfo","pIdxInfo","xError","defaultRc","errorReporter","xRowid","ppRowid64","setupModule","createdMod","mod","xConnect","xDisconnect","catchExceptions","fwrap","pAux","ppVtab","pzErr","mnames","remethods","xCreate","$iVersion","iVersion","$xShadowName","$xSavePoint","$xRelease","$xRollbackTo","installOpfsVfs","options","Atomics","createSyncAccessHandle","storage","getDirectory","urlParams","searchParams","verbose","has","sanityChecks","proxyUri","defaultProxyUri","thePromise","promiseResolve_","promiseReject_","loggers","logImpl","level","sqlite3_file","sqlite3_io_methods","opfsUtil","metrics","dump","w","opIds","wait","avgTime","avgWait","s11n","W","serialize","deserialize","opfsVfs","opfsIoMethods","promiseWasRejected","promiseReject","promiseResolve","Worker","_originalOnError","pDVfs","dVfs","$szOsFile","$mxPathname","$xDlOpen","$xDlError","$xDlSym","$xDlClose","littleEndian","asyncIdleWaitTime","asyncS11nExceptions","fileBufferSize","sabS11nOffset","sabS11nSize","sabIO","whichOp","xAccess","xClose","xDeleteNoWait","xFileControl","xFileSize","xLock","xOpen","xSleep","xSync","xTruncate","xUnlock","retry","sabOP","sq3Codes","opfsFlags","OPFS_UNLOCK_ASAP","defaultUnlockAsap","opRun","opNdx","store","sabOPView","notify","load","asyncShutdown","asyncRestart","randomFilename","_chars","_n","random","__openFiles","opTimer","mTimeStart","mTimeEnd","ioSyncWrappers","xCheckReservedLock","pFile","lockType","sq3File","xDeviceCharacteristics","SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN","opId","SQLITE_FCNTL_SYNC","pSz64","pDest","offset64","SQLITE_IOERR_SHORT_READ","sabView","SQLITE_IOERR_READ","sz64","SQLITE_LOCK_NONE","pSrc","SQLITE_IOERR_WRITE","vfsSyncWrappers","xCurrentTime","xCurrentTimeInt64","doSyncDir","xFullPathname","SQLITE_CANTOPEN","xGetLastError","pOutFlags","sqlite3_uri_boolean","fh","fid","sab","sabFileBufView","$pMethods","$xRandomness","$xSleep","xRandomness","ms","getResolvedPath","splitIt","getDirForFilename","absFilename","createDirs","dh","rootDirectory","dirName","getDirectoryHandle","absDirName","entryExists","fsEntryName","getFileHandle","dirHandle","handle","kind","subDir","doDir","rmfr","recurse","removeEntry","recursive","throwOnError","hDir","filenamePart","traverse","defaultOpt","directory","depth","OpfsDb","oo1Db","sqlite3_busy_timeout","payload","io","sabS11nView","textDecoder","textEncoder","viewU8","viewDV","TypeIds","getTypeIdById","tid","typeIds","getInt32","setInt32","initS11n","openFlags","SQLITE_OPEN_MAIN_DB","dbFile","zDbFile","readBuf","jRead","sanityCheck","proxyJs","sqlite3Dir","SABC","ready","originalInit","initModuleState","moduleScript","isWorker","URLSearchParams","li","ff","EmscriptenModule","threadAlert","sim","scriptDir"],"sourceRoot":""}