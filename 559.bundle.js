(()=>{"use strict";var e,r,t={559:(e,r,t)=>{var i=t(842);const n={timeout:2e4,maxPageSize:4096,cacheSize:1024,headers:{}},o=[]||0,s=["threads","vfs","cache","http"],a={};for(const e of s)a[e]=o.includes(e)?console.debug.bind(console):()=>{};const c=function(){const e=new ArrayBuffer(2),r=new Uint8Array(e),t=new Uint16Array(e);if(r[0]=240,r[1]=13,61453==t[0])return a.threads("System is Big-Endian"),!1;if(3568==t[0])return a.threads("System is Little-Endian"),!0;throw new Error(`Failed determining endianness: ${t}`)}();var l=function(e,r,t,i){return new(t||(t=Promise))((function(n,o){function s(e){try{c(i.next(e))}catch(e){o(e)}}function a(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var r;e.done?n(e.value):(r=e.value,r instanceof t?r:new t((function(e){e(r)}))).then(s,a)}c((i=i.apply(e,r||[])).next())}))};let d;const u={},f=new i.Z({max:32});let h,g=1;const p={xOpen:function(e){return l(this,void 0,void 0,(function*(){let r=f.get(e.url);return r instanceof Promise&&(r=yield r),void 0!==r||(r=fetch(e.url,{method:"HEAD",headers:Object.assign({},null==d?void 0:d.headers)}).then((r=>{var t;return"bytes"!==r.headers.get("Accept-Ranges")&&console.warn(`Server for ${e.url} does not advertise 'Accept-Ranges'. If the server supports it, in order to remove this message, add "Accept-Ranges: bytes". Additionally, if using CORS, add "Access-Control-Expose-Headers: *".`),{url:e.url,id:g++,size:BigInt(null!==(t=r.headers.get("Content-Length"))&&void 0!==t?t:0),pageSize:null}})),f.set(e.url,r),f.set(e.url,yield r)),0}))},xAccess:function(e,r){return l(this,void 0,void 0,(function*(){const t=new Uint32Array(r.shm,0,1);try{const i=yield p.xOpen(e,r);t[0]=0===i?1:0}catch(e){t[0]=0}return 0}))},xRead:function(e,r){var t,i,o;return l(this,void 0,void 0,(function*(){let s=f.get(e.url);if(!s)throw new Error(`File ${e.url} not open`);if(s instanceof Promise&&(s=yield s),void 0===e.n||void 0===e.offset)throw new Error("Mandatory arguments missing");if(!s.pageSize){s.pageSize=1024;const r=new ArrayBuffer(2),o=yield p.xRead({msg:"xRead",url:e.url,offset:BigInt(16),n:2},{buffer:new Uint8Array(r)}),l=new Uint16Array(r);if(0!==o)return o;if(function(e){if(c)for(let r=0;r<e.length;r++)e[r]=(65280&e[r])>>8|(255&e[r])<<8}(l),s.pageSize=l[0],a.vfs(`page size is ${s.pageSize}`),1024!=s.pageSize&&(console.warn(`Page size for ${e.url} is ${s.pageSize}, recommended size is 1024`),h.delete(s.id+"|0")),s.pageSize>(null!==(t=null==d?void 0:d.maxPageSize)&&void 0!==t?t:n.maxPageSize))throw new Error(`${s.pageSize} is over the maximum configured ${null!==(i=null==d?void 0:d.maxPageSize)&&void 0!==i?i:n.maxPageSize}`)}const l=BigInt(s.pageSize),u=BigInt(e.n),g=e.offset/l;g*l!==e.offset&&a.vfs(`Read chunk ${e.offset}:${e.n} is not page-aligned`);let m=g*l;if(m+l<e.offset+u)throw new Error(`Read chunk ${e.offset}:${e.n} spans across a page-boundary`);const v=s.id+"|"+g;let y=h.get(v);if(y instanceof Promise&&(y=yield y),"number"==typeof y){a.cache(`cache hit (multi-page segment) for ${e.url}:${g}`);const r=BigInt(y)*l;y=h.get(s.id+"|"+y),y instanceof Promise&&(y=yield y),y instanceof Uint8Array?m=r:y=void 0}if(void 0===y){a.cache(`cache miss for ${e.url}:${g}`);let r=s.pageSize,t=g>0&&h.get(s.id+"|"+(Number(g)-1));t&&(t instanceof Promise&&(t=yield t),"number"==typeof t&&(t=h.get(s.id+"|"+t)),t instanceof Promise&&(t=yield t),t instanceof Uint8Array&&(r=2*t.byteLength,a.cache(`downloading super page of size ${r}`)));const i=r/s.pageSize;a.http(`downloading page ${g} of size ${r} starting at ${m}`);const c=fetch(e.url,{method:"GET",headers:Object.assign(Object.assign({},null!==(o=null==d?void 0:d.headers)&&void 0!==o?o:n.headers),{Range:`bytes=${m}-${m+BigInt(r-1)}`})}).then((e=>e.arrayBuffer())).then((e=>new Uint8Array(e)));h.set(v,c);for(let e=Number(g)+1;e<Number(g)+i;e++)h.set(s.id+"|"+e,c.then((()=>Number(g))));if(y=yield c,!(y instanceof Uint8Array)||0===y.length)throw new Error(`Invalid HTTP response received: ${JSON.stringify(c)}`);h.set(v,y);for(let e=Number(g)+1;e<Number(g)+i;e++)h.set(s.id+"|"+e,Number(g))}else a.cache(`cache hit for ${e.url}:${g}`);const w=Number(e.offset-m);return r.buffer.set(y.subarray(w,w+e.n)),0}))},xFilesize:function(e,r){return l(this,void 0,void 0,(function*(){let t=f.get(e.url);if(!t)throw new Error(`File ${e.fid} not open`);return t instanceof Promise&&(t=yield t),new BigInt64Array(r.shm,0,1)[0]=t.size,0}))}};function m({data:e}){return l(this,void 0,void 0,(function*(){let r;a.threads("Received new work message",this,e);try{r=yield p[e.msg](e,this),a.threads("operation successful",this,r),Atomics.store(this.lock,0,r)}catch(e){console.error(e),Atomics.store(this.lock,0,1)}Atomics.notify(this.lock,0)}))}if(globalThis.onmessage=({data:e})=>{var r,t,o,s;switch(a.threads("Received new control message",e),e.msg){case"handshake":{const i=new SharedArrayBuffer((null!==(r=null==d?void 0:d.maxPageSize)&&void 0!==r?r:n.maxPageSize)+Int32Array.BYTES_PER_ELEMENT),s=new Int32Array(i,null!==(t=null==d?void 0:d.maxPageSize)&&void 0!==t?t:n.maxPageSize),a=new Uint8Array(i,0,null!==(o=null==d?void 0:d.maxPageSize)&&void 0!==o?o:n.maxPageSize);s[0]=65535,u[e.id]={id:e.id,port:e.port,shm:i,lock:s,buffer:a},postMessage({msg:"ack",id:e.id,shm:i,lock:s}),e.port.onmessage=m.bind(u[e.id])}break;case"init":d=e.options,h=new i.Z({maxSize:1024*(null!==(s=null==d?void 0:d.cacheSize)&&void 0!==s?s:n.cacheSize),sizeCalculation:e=>{var r;return null!==(r=e.byteLength)&&void 0!==r?r:4}});break;case"close":postMessage({msg:"ack"}),close();break;default:throw new Error(`Invalid message received by backend: ${e}`)}},"undefined"==typeof SharedArrayBuffer)throw new Error('SharedArrayBuffer is not available. If your browser supports it, the webserver must send "Cross-Origin-Opener-Policy: same-origin "and "Cross-Origin-Embedder-Policy: require-corp" headers.')}},i={};function n(e){var r=i[e];if(void 0!==r)return r.exports;var o=i[e]={exports:{}};return t[e](o,o.exports,n),o.exports}n.m=t,n.x=()=>{var e=n.O(void 0,[842],(()=>n(559)));return n.O(e)},e=[],n.O=(r,t,i,o)=>{if(!t){var s=1/0;for(d=0;d<e.length;d++){for(var[t,i,o]=e[d],a=!0,c=0;c<t.length;c++)(!1&o||s>=o)&&Object.keys(n.O).every((e=>n.O[e](t[c])))?t.splice(c--,1):(a=!1,o<s&&(s=o));if(a){e.splice(d--,1);var l=i();void 0!==l&&(r=l)}}return r}o=o||0;for(var d=e.length;d>0&&e[d-1][2]>o;d--)e[d]=e[d-1];e[d]=[t,i,o]},n.d=(e,r)=>{for(var t in r)n.o(r,t)&&!n.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},n.f={},n.e=e=>Promise.all(Object.keys(n.f).reduce(((r,t)=>(n.f[t](e,r),r)),[])),n.u=e=>e+".bundle.js",n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var r=n.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var t=r.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{var e={559:1};n.f.i=(r,t)=>{e[r]||importScripts(n.p+n.u(r))};var r=self.webpackChunksqlite_wasm_http=self.webpackChunksqlite_wasm_http||[],t=r.push.bind(r);r.push=r=>{var[i,o,s]=r;for(var a in o)n.o(o,a)&&(n.m[a]=o[a]);for(s&&s(n);i.length;)e[i.pop()]=1;t(r)}})(),r=n.x,n.x=()=>n.e(842).then(r),n.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,