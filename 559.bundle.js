(()=>{"use strict";var e,r,t={559:(e,r,t)=>{var n=t(842);const i=[]||0,s=["threads","vfs","cache","http"],o={};for(const e of s)o[e]=i.includes(e)?console.debug.bind(console):()=>{};const a=function(){const e=new ArrayBuffer(2),r=new Uint8Array(e),t=new Uint16Array(e);if(r[0]=240,r[1]=13,61453==t[0])return o.threads("System is Big-Endian"),!1;if(3568==t[0])return o.threads("System is Little-Endian"),!0;throw new Error(`Failed determining endianness: ${t}`)}();var c=function(e,r,t,n){return new(t||(t=Promise))((function(i,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var r;e.done?i(e.value):(r=e.value,r instanceof t?r:new t((function(e){e(r)}))).then(o,a)}c((n=n.apply(e,r||[])).next())}))};let f;const d={},u=new n.Z({max:32});let l,h=1;const g={xOpen:function(e){return c(this,void 0,void 0,(function*(){let r=u.get(e.url);return r instanceof Promise&&(r=yield r),void 0!==r||(r=fetch(e.url,{method:"HEAD",headers:Object.assign({},null==f?void 0:f.headers)}).then((r=>("bytes"!==r.headers.get("Accept-Ranges")&&console.warn(`Server for ${e.url} does not advertise 'Accept-Ranges'. If the server supports it, in order to remove this message, add "Accept-Ranges: bytes". Additionally, if using CORS, add "Access-Control-Expose-Headers: *".`),{url:e.url,id:h++,size:BigInt(r.headers.get("Content-Length")),pageSize:null}))),u.set(e.url,r),u.set(e.url,yield r)),0}))},xAccess:function(e,r){return c(this,void 0,void 0,(function*(){const t=new Uint32Array(r.shm,0,1);try{const n=yield g.xOpen(e,r);t[0]=0===n?1:0}catch(e){t[0]=0}return 0}))},xRead:function(e,r){return c(this,void 0,void 0,(function*(){let t=u.get(e.url);if(!t)throw new Error(`File ${e.url} not open`);if(t instanceof Promise&&(t=yield t),!t.pageSize){t.pageSize=1024;const r=new ArrayBuffer(2),n=yield g.xRead({msg:"xRead",url:e.url,offset:BigInt(16),n:2},{buffer:new Uint8Array(r)}),i=new Uint16Array(r);if(0!==n)return n;if(function(e){if(a)for(let r=0;r<e.length;r++)e[r]=(65280&e[r])>>8|(255&e[r])<<8}(i),t.pageSize=i[0],o.vfs(`page size is ${t.pageSize}`),1024!=t.pageSize&&(console.warn(`Page size for ${e.url} is ${t.pageSize}, recommended size is 1024`),l.delete(t.id+"|0")),t.pageSize>f.maxPageSize)throw new Error(`${t.pageSize} is over the maximum configured ${f.maxPageSize}`)}const n=BigInt(t.pageSize),i=BigInt(e.n),s=e.offset/n;s*n!==e.offset&&o.vfs(`Read chunk ${e.offset}:${e.n} is not page-aligned`);let c=s*n;if(c+n<e.offset+i)throw new Error(`Read chunk ${e.offset}:${e.n} spans across a page-boundary`);const d=t.id+"|"+s;let h=l.get(d);if(h instanceof Promise&&(h=yield h),"number"==typeof h){o.cache(`cache hit (multi-page segment) for ${e.url}:${s}`);const r=BigInt(h)*n;h=l.get(t.id+"|"+h),h instanceof Promise&&(h=yield h),h instanceof Uint8Array?c=r:h=void 0}if(void 0===h){o.cache(`cache miss for ${e.url}:${s}`);let r=t.pageSize,n=s>0&&l.get(t.id+"|"+(Number(s)-1));n&&(n instanceof Promise&&(n=yield n),"number"==typeof n&&(n=l.get(t.id+"|"+n)),n instanceof Promise&&(n=yield n),n instanceof Uint8Array&&(r=2*n.byteLength,o.cache(`downloading super page of size ${r}`)));const i=r/t.pageSize;o.http(`downloading page ${s} of size ${r} starting at ${c}`);const a=fetch(e.url,{method:"GET",headers:Object.assign(Object.assign({},f.headers),{Range:`bytes=${c}-${c+BigInt(r-1)}`})}).then((e=>e.arrayBuffer())).then((e=>new Uint8Array(e)));l.set(d,a);for(let e=Number(s)+1;e<Number(s)+i;e++)l.set(t.id+"|"+e,a.then((()=>Number(s))));if(h=yield a,!(h instanceof Uint8Array)||0===h.length)throw new Error(`Invalid HTTP response received: ${JSON.stringify(a)}`);l.set(d,h);for(let e=Number(s)+1;e<Number(s)+i;e++)l.set(t.id+"|"+e,Number(s))}else o.cache(`cache hit for ${e.url}:${s}`);const p=Number(e.offset-c);return r.buffer.set(h.subarray(p,p+e.n)),0}))},xFilesize:function(e,r){return c(this,void 0,void 0,(function*(){let t=u.get(e.url);if(!t)throw new Error(`File ${e.fid} not open`);return t instanceof Promise&&(t=yield t),new BigInt64Array(r.shm,0,1)[0]=t.size,0}))}};function p({data:e}){return c(this,void 0,void 0,(function*(){let r;o.threads("Received new work message",this,e);try{r=yield g[e.msg](e,this),o.threads("operation successful",this,r),Atomics.store(this.lock,0,r)}catch(e){console.error(e),Atomics.store(this.lock,0,1)}Atomics.notify(this.lock,0)}))}if(globalThis.onmessage=({data:e})=>{switch(o.threads("Received new control message",e),e.msg){case"handshake":{const r=new SharedArrayBuffer(f.maxPageSize+Int32Array.BYTES_PER_ELEMENT),t=new Int32Array(r,f.maxPageSize),n=new Uint8Array(r,0,f.maxPageSize);t[0]=65535,d[e.id]={id:e.id,port:e.port,shm:r,lock:t,buffer:n},postMessage({msg:"ack",id:e.id,shm:r,lock:t}),e.port.onmessage=p.bind(d[e.id])}break;case"init":f=e.options,l=new n.Z({maxSize:1024*f.cacheSize,sizeCalculation:e=>{var r;return null!==(r=e.byteLength)&&void 0!==r?r:4}});break;case"close":postMessage({msg:"ack"}),close();break;default:throw new Error(`Invalid message received by backend: ${e}`)}},"undefined"==typeof SharedArrayBuffer)throw new Error('SharedArrayBuffer is not available. If your browser supports it, the webserver must send "Cross-Origin-Opener-Policy: same-origin "and "Cross-Origin-Embedder-Policy: require-corp" headers.')}},n={};function i(e){var r=n[e];if(void 0!==r)return r.exports;var s=n[e]={exports:{}};return t[e](s,s.exports,i),s.exports}i.m=t,i.x=()=>{var e=i.O(void 0,[842],(()=>i(559)));return i.O(e)},e=[],i.O=(r,t,n,s)=>{if(!t){var o=1/0;for(d=0;d<e.length;d++){for(var[t,n,s]=e[d],a=!0,c=0;c<t.length;c++)(!1&s||o>=s)&&Object.keys(i.O).every((e=>i.O[e](t[c])))?t.splice(c--,1):(a=!1,s<o&&(o=s));if(a){e.splice(d--,1);var f=n();void 0!==f&&(r=f)}}return r}s=s||0;for(var d=e.length;d>0&&e[d-1][2]>s;d--)e[d]=e[d-1];e[d]=[t,n,s]},i.d=(e,r)=>{for(var t in r)i.o(r,t)&&!i.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},i.f={},i.e=e=>Promise.all(Object.keys(i.f).reduce(((r,t)=>(i.f[t](e,r),r)),[])),i.u=e=>e+".bundle.js",i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),(()=>{var e;i.g.importScripts&&(e=i.g.location+"");var r=i.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var t=r.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=e})(),(()=>{var e={559:1};i.f.i=(r,t)=>{e[r]||importScripts(i.p+i.u(r))};var r=self.webpackChunksqlite_wasm_http=self.webpackChunksqlite_wasm_http||[],t=r.push.bind(r);r.push=r=>{var[n,s,o]=r;for(var a in s)i.o(s,a)&&(i.m[a]=s[a]);for(o&&o(i);n.length;)e[n.pop()]=1;t(r)}})(),r=i.x,i.x=()=>i.e(842).then(r),i.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,