(()=>{"use strict";var e,r,t={559:(e,r,t)=>{var n=t(842);const i=function(){const e=new ArrayBuffer(2),r=new Uint8Array(e),t=new Uint16Array(e);if(r[0]=240,r[1]=13,61453==t[0])return void 0===globalThis.WorkerGlobalScope&&console.debug("System is Big-Endian"),!1;if(3568==t[0])return void 0===globalThis.WorkerGlobalScope&&console.debug("System is Little-Endian"),!0;throw new Error(`Failed determining endianness: ${t}`)}(),o=[]||0,s=["threads","vfs","cache"],a={};for(const e of s)a[e]=o.includes(e)?console.debug.bind(console):()=>{};var c=function(e,r,t,n){return new(t||(t=Promise))((function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var r;e.done?i(e.value):(r=e.value,r instanceof t?r:new t((function(e){e(r)}))).then(s,a)}c((n=n.apply(e,r||[])).next())}))};let f;const l={},u=new n.Z({max:32});let d,h=1;const g={xOpen:function(e){return c(this,void 0,void 0,(function*(){if(u.has(e.url))return 0;const r=yield fetch(e.url,{method:"HEAD",headers:Object.assign({},null==f?void 0:f.headers)});return"bytes"!==r.headers.get("Accept-Ranges")&&console.warn(`Server for ${e.url} does not advertise 'Accept-Ranges'. If the server supports it, in order to remove this message, add "Accept-Ranges: bytes". Additionally, if using CORS, add "Access-Control-Expose-Headers: *".`),u.set(e.url,{url:e.url,id:h++,size:BigInt(r.headers.get("Content-Length")),pageSize:null}),0}))},xAccess:function(e,r){return c(this,void 0,void 0,(function*(){const t=new Uint32Array(r.shm,0,1);try{const n=yield g.xOpen(e,r);t[0]=0===n?1:0}catch(e){t[0]=0}return 0}))},xRead:function(e,r){return c(this,void 0,void 0,(function*(){const t=u.get(e.url);if(!t)throw new Error(`File ${e.url} not open`);if(!t.pageSize){t.pageSize=1024;const r=new ArrayBuffer(2),n=yield g.xRead({msg:"xRead",url:e.url,offset:BigInt(16),n:2},{buffer:new Uint8Array(r)}),o=new Uint16Array(r);if(0!==n)return n;if(function(e){if(i)for(let r=0;r<e.length;r++)e[r]=(65280&e[r])>>8|(255&e[r])<<8}(o),t.pageSize=o[0],1024!=t.pageSize&&(console.warn(`Page size for ${e.url} is ${t.pageSize}, recommended size is 1024`),d.delete(t.id+"|0")),t.pageSize>f.maxPageSize)throw new Error(`${t.pageSize} is over the maximum configured ${f.maxPageSize}`)}const n=BigInt(t.pageSize),o=BigInt(e.n),s=e.offset/n;s*n!==e.offset&&console.warn(`Read chunk ${e.offset} is not page-aligned`);let c=s*n;if(c+n<e.offset+o)throw new Error(`Read chunk ${e.offset}:${e.n} spans across a page-boundary`);const l=t.id+"|"+s;let h=d.get(l);if(h instanceof Promise&&(h=yield h),"number"==typeof h){a.cache(`cache hit (multi-page segment) for ${e.url}:${s}`);const r=BigInt(h)*n;h=d.get(t.id+"|"+h),h instanceof Promise&&(h=yield h),h instanceof Uint8Array?c=r:h=void 0}if(void 0===h){a.cache(`cache miss for ${e.url}:${s}`);let r=t.pageSize,n=s>0&&d.get(t.id+"|"+(Number(s)-1));n&&(n instanceof Promise&&(n=yield n),"number"==typeof n&&(n=d.get(t.id+"|"+n)),n instanceof Promise&&(n=yield n),n instanceof Uint8Array&&(r=2*n.byteLength,a.cache(`downloading super page of size ${r}`)));const i=r/t.pageSize,o=fetch(e.url,{method:"GET",headers:Object.assign(Object.assign({},f.headers),{Range:`bytes=${c}-${c+BigInt(r-1)}`})}).then((e=>e.arrayBuffer())).then((e=>new Uint8Array(e)));d.set(l,o);for(let e=Number(s)+1;e<Number(s)+i;e++)d.set(t.id+"|"+e,o.then((()=>Number(s))));if(h=yield o,!(h instanceof Uint8Array)||0===h.length)throw new Error(`Invalid HTTP response received: ${JSON.stringify(o)}`);d.set(l,h);for(let e=Number(s)+1;e<Number(s)+i;e++)d.set(t.id+"|"+e,Number(s))}else a.cache(`cache hit for ${e.url}:${s}`);const p=Number(e.offset-c);return r.buffer.set(h.subarray(p,p+e.n)),0}))},xFilesize:function(e,r){return c(this,void 0,void 0,(function*(){const t=u.get(e.url);if(!t)throw new Error(`File ${e.fid} not open`);return new BigInt64Array(r.shm,0,1)[0]=t.size,0}))}};function p({data:e}){return c(this,void 0,void 0,(function*(){let r;a.threads("Received new work message",this,e);try{r=yield g[e.msg](e,this),a.threads("operation successful",this,r),Atomics.store(this.lock,0,r)}catch(e){console.error(e),Atomics.store(this.lock,0,1)}Atomics.notify(this.lock,0)}))}if(globalThis.onmessage=({data:e})=>{switch(a.threads("Received new control message",e),e.msg){case"handshake":{const r=new SharedArrayBuffer(f.maxPageSize+Int32Array.BYTES_PER_ELEMENT),t=new Int32Array(r,f.maxPageSize),n=new Uint8Array(r,0,f.maxPageSize);t[0]=65535,l[e.id]={id:e.id,port:e.port,shm:r,lock:t,buffer:n},postMessage({msg:"ack",id:e.id,shm:r,lock:t}),e.port.onmessage=p.bind(l[e.id])}break;case"init":f=e.options,d=new n.Z({maxSize:1024*f.cacheSize,sizeCalculation:e=>{var r;return null!==(r=e.byteLength)&&void 0!==r?r:4}});break;case"close":postMessage({msg:"ack"}),close();break;default:throw new Error(`Invalid message received by backend: ${e}`)}},"undefined"==typeof SharedArrayBuffer)throw new Error('SharedArrayBuffer is not available. If your browser supports it, the webserver must send "Cross-Origin-Opener-Policy: same-origin "and "Cross-Origin-Embedder-Policy: require-corp" headers.')}},n={};function i(e){var r=n[e];if(void 0!==r)return r.exports;var o=n[e]={exports:{}};return t[e](o,o.exports,i),o.exports}i.m=t,i.x=()=>{var e=i.O(void 0,[842],(()=>i(559)));return i.O(e)},e=[],i.O=(r,t,n,o)=>{if(!t){var s=1/0;for(l=0;l<e.length;l++){for(var[t,n,o]=e[l],a=!0,c=0;c<t.length;c++)(!1&o||s>=o)&&Object.keys(i.O).every((e=>i.O[e](t[c])))?t.splice(c--,1):(a=!1,o<s&&(s=o));if(a){e.splice(l--,1);var f=n();void 0!==f&&(r=f)}}return r}o=o||0;for(var l=e.length;l>0&&e[l-1][2]>o;l--)e[l]=e[l-1];e[l]=[t,n,o]},i.d=(e,r)=>{for(var t in r)i.o(r,t)&&!i.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},i.f={},i.e=e=>Promise.all(Object.keys(i.f).reduce(((r,t)=>(i.f[t](e,r),r)),[])),i.u=e=>e+".bundle.js",i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),(()=>{var e;i.g.importScripts&&(e=i.g.location+"");var r=i.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var t=r.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=e})(),(()=>{var e={559:1};i.f.i=(r,t)=>{e[r]||importScripts(i.p+i.u(r))};var r=self.webpackChunksqlite_wasm_http=self.webpackChunksqlite_wasm_http||[],t=r.push.bind(r);r.push=r=>{var[n,o,s]=r;for(var a in o)i.o(o,a)&&(i.m[a]=o[a]);for(s&&s(i);n.length;)e[n.pop()]=1;t(r)}})(),r=i.x,i.x=()=>i.e(842).then(r),i.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,