{"version":3,"file":"main.bundle.js","mappings":"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","sources":["webpack://sqlite-wasm-http/webpack/runtime/load script","webpack://sqlite-wasm-http/webpack/bootstrap","webpack://sqlite-wasm-http/webpack/runtime/define property getters","webpack://sqlite-wasm-http/webpack/runtime/ensure chunk","webpack://sqlite-wasm-http/webpack/runtime/get javascript chunk filename","webpack://sqlite-wasm-http/webpack/runtime/global","webpack://sqlite-wasm-http/webpack/runtime/hasOwnProperty shorthand","webpack://sqlite-wasm-http/webpack/runtime/make namespace object","webpack://sqlite-wasm-http/webpack/runtime/publicPath","webpack://sqlite-wasm-http/webpack/runtime/jsonp chunk loading","webpack://sqlite-wasm-http/./deps/dist/sqlite3-worker1-promiser-bundler-friendly.js","webpack://sqlite-wasm-http/./dist/vfs-http-types.js","webpack://sqlite-wasm-http/./dist/endianness.js","webpack://sqlite-wasm-http/./dist/index.js","webpack://sqlite-wasm-http/./examples/index.ts"],"sourcesContent":["var inProgress = {};\nvar dataWebpackPrefix = \"sqlite-wasm-http:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".bundle.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunksqlite_wasm_http\"] = self[\"webpackChunksqlite_wasm_http\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","/*\n  2022-08-24\n\n  The author disclaims copyright to this source code.  In place of a\n  legal notice, here is a blessing:\n\n  *   May you do good and not evil.\n  *   May you find forgiveness for yourself and forgive others.\n  *   May you share freely, never taking more than you give.\n\n  ***********************************************************************\n\n  This file implements a Promise-based proxy for the sqlite3 Worker\n  API #1. It is intended to be included either from the main thread or\n  a Worker, but only if (A) the environment supports nested Workers\n  and (B) it's _not_ a Worker which loads the sqlite3 WASM/JS\n  module. This file's features will load that module and provide a\n  slightly simpler client-side interface than the slightly-lower-level\n  Worker API does.\n\n  This script necessarily exposes one global symbol, but clients may\n  freely `delete` that symbol after calling it.\n*/\n'use strict';\n/**\n   Configures an sqlite3 Worker API #1 Worker such that it can be\n   manipulated via a Promise-based interface and returns a factory\n   function which returns Promises for communicating with the worker.\n   This proxy has an _almost_ identical interface to the normal\n   worker API, with any exceptions documented below.\n\n   It requires a configuration object with the following properties:\n\n   - `worker` (required): a Worker instance which loads\n   `sqlite3-worker1.js` or a functional equivalent. Note that the\n   promiser factory replaces the worker.onmessage property. This\n   config option may alternately be a function, in which case this\n   function re-assigns this property with the result of calling that\n   function, enabling delayed instantiation of a Worker.\n\n   - `onready` (optional, but...): this callback is called with no\n   arguments when the worker fires its initial\n   'sqlite3-api'/'worker1-ready' message, which it does when\n   sqlite3.initWorker1API() completes its initialization. This is\n   the simplest way to tell the worker to kick off work at the\n   earliest opportunity.\n\n   - `onunhandled` (optional): a callback which gets passed the\n   message event object for any worker.onmessage() events which\n   are not handled by this proxy. Ideally that \"should\" never\n   happen, as this proxy aims to handle all known message types.\n\n   - `generateMessageId` (optional): a function which, when passed an\n   about-to-be-posted message object, generates a _unique_ message ID\n   for the message, which this API then assigns as the messageId\n   property of the message. It _must_ generate unique IDs on each call\n   so that dispatching can work. If not defined, a default generator\n   is used (which should be sufficient for most or all cases).\n\n   - `debug` (optional): a console.debug()-style function for logging\n   information about messages.\n\n   This function returns a stateful factory function with the\n   following interfaces:\n\n   - Promise function(messageType, messageArgs)\n   - Promise function({message object})\n\n   The first form expects the \"type\" and \"args\" values for a Worker\n   message. The second expects an object in the form {type:...,\n   args:...}  plus any other properties the client cares to set. This\n   function will always set the `messageId` property on the object,\n   even if it's already set, and will set the `dbId` property to the\n   current database ID if it is _not_ set in the message object.\n\n   The function throws on error.\n\n   The function installs a temporary message listener, posts a\n   message to the configured Worker, and handles the message's\n   response via the temporary message listener. The then() callback\n   of the returned Promise is passed the `message.data` property from\n   the resulting message, i.e. the payload from the worker, stripped\n   of the lower-level event state which the onmessage() handler\n   receives.\n\n   Example usage:\n\n   ```\n   const config = {...};\n   const sq3Promiser = sqlite3Worker1Promiser(config);\n   sq3Promiser('open', {filename:\"/foo.db\"}).then(function(msg){\n     console.log(\"open response\",msg); // => {type:'open', result: {filename:'/foo.db'}, ...}\n   });\n   sq3Promiser({type:'close'}).then((msg)=>{\n     console.log(\"close response\",msg); // => {type:'close', result: {filename:'/foo.db'}, ...}\n   });\n   ```\n\n   Differences from Worker API #1:\n\n   - exec's {callback: STRING} option does not work via this\n   interface (it triggers an exception), but {callback: function}\n   does and works exactly like the STRING form does in the Worker:\n   the callback is called one time for each row of the result set,\n   passed the same worker message format as the worker API emits:\n\n     {type:typeString,\n      row:VALUE,\n      rowNumber:1-based-#,\n      columnNames: array}\n\n   Where `typeString` is an internally-synthesized message type string\n   used temporarily for worker message dispatching. It can be ignored\n   by all client code except that which tests this API. The `row`\n   property contains the row result in the form implied by the\n   `rowMode` option (defaulting to `'array'`). The `rowNumber` is a\n   1-based integer value incremented by 1 on each call into the\n   callback.\n\n   At the end of the result set, the same event is fired with\n   (row=undefined, rowNumber=null) to indicate that\n   the end of the result set has been reached. Note that the rows\n   arrive via worker-posted messages, with all the implications\n   of that.\n\n   Notable shortcomings:\n\n   - This API was not designed with ES6 modules in mind. Neither Firefox\n     nor Safari support, as of March 2023, the {type:\"module\"} flag to the\n     Worker constructor, so that particular usage is not something we're going\n     to target for the time being:\n\n     https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker\n*/\nglobalThis.sqlite3Worker1Promiser = function callee(config = callee.defaultConfig){\n  // Inspired by: https://stackoverflow.com/a/52439530\n  if(1===arguments.length && 'function'===typeof arguments[0]){\n    const f = config;\n    config = Object.assign(Object.create(null), callee.defaultConfig);\n    config.onready = f;\n  }else{\n    config = Object.assign(Object.create(null), callee.defaultConfig, config);\n  }\n  const handlerMap = Object.create(null);\n  const noop = function(){};\n  const err = config.onerror\n        || noop /* config.onerror is intentionally undocumented\n                   pending finding a less ambiguous name */;\n  const debug = config.debug || noop;\n  const idTypeMap = config.generateMessageId ? undefined : Object.create(null);\n  const genMsgId = config.generateMessageId || function(msg){\n    return msg.type+'#'+(idTypeMap[msg.type] = (idTypeMap[msg.type]||0) + 1);\n  };\n  const toss = (...args)=>{throw new Error(args.join(' '))};\n  if(!config.worker) config.worker = callee.defaultConfig.worker;\n  if('function'===typeof config.worker) config.worker = config.worker();\n  let dbId;\n  config.worker.onmessage = function(ev){\n    ev = ev.data;\n    debug('worker1.onmessage',ev);\n    let msgHandler = handlerMap[ev.messageId];\n    if(!msgHandler){\n      if(ev && 'sqlite3-api'===ev.type && 'worker1-ready'===ev.result) {\n        /*fired one time when the Worker1 API initializes*/\n        if(config.onready) config.onready();\n        return;\n      }\n      msgHandler = handlerMap[ev.type] /* check for exec per-row callback */;\n      if(msgHandler && msgHandler.onrow){\n        msgHandler.onrow(ev);\n        return;\n      }\n      if(config.onunhandled) config.onunhandled(arguments[0]);\n      else err(\"sqlite3Worker1Promiser() unhandled worker message:\",ev);\n      return;\n    }\n    delete handlerMap[ev.messageId];\n    switch(ev.type){\n        case 'error':\n          msgHandler.reject(ev);\n          return;\n        case 'open':\n          if(!dbId) dbId = ev.dbId;\n          break;\n        case 'close':\n          if(ev.dbId===dbId) dbId = undefined;\n          break;\n        default:\n          break;\n    }\n    try {msgHandler.resolve(ev)}\n    catch(e){msgHandler.reject(e)}\n  }/*worker.onmessage()*/;\n  return function(/*(msgType, msgArgs) || (msgEnvelope)*/){\n    let msg;\n    if(1===arguments.length){\n      msg = arguments[0];\n    }else if(2===arguments.length){\n      msg = Object.create(null);\n      msg.type = arguments[0];\n      msg.args = arguments[1];\n    }else{\n      toss(\"Invalid arugments for sqlite3Worker1Promiser()-created factory.\");\n    }\n    if(!msg.dbId) msg.dbId = dbId;\n    msg.messageId = genMsgId(msg);\n    msg.departureTime = performance.now();\n    const proxy = Object.create(null);\n    proxy.message = msg;\n    let rowCallbackId /* message handler ID for exec on-row callback proxy */;\n    if('exec'===msg.type && msg.args){\n      if('function'===typeof msg.args.callback){\n        rowCallbackId = msg.messageId+':row';\n        proxy.onrow = msg.args.callback;\n        msg.args.callback = rowCallbackId;\n        handlerMap[rowCallbackId] = proxy;\n      }else if('string' === typeof msg.args.callback){\n        toss(\"exec callback may not be a string when using the Promise interface.\");\n        /**\n           Design note: the reason for this limitation is that this\n           API takes over worker.onmessage() and the client has no way\n           of adding their own message-type handlers to it. Per-row\n           callbacks are implemented as short-lived message.type\n           mappings for worker.onmessage().\n\n           We \"could\" work around this by providing a new\n           config.fallbackMessageHandler (or some such) which contains\n           a map of event type names to callbacks. Seems like overkill\n           for now, seeing as the client can pass callback functions\n           to this interface (whereas the string-form \"callback\" is\n           needed for the over-the-Worker interface).\n        */\n      }\n    }\n    //debug(\"requestWork\", msg);\n    let p = new Promise(function(resolve, reject){\n      proxy.resolve = resolve;\n      proxy.reject = reject;\n      handlerMap[msg.messageId] = proxy;\n      debug(\"Posting\",msg.type,\"message to Worker dbId=\"+(dbId||'default')+':',msg);\n      config.worker.postMessage(msg);\n    });\n    if(rowCallbackId) p = p.finally(()=>delete handlerMap[rowCallbackId]);\n    return p;\n  };\n}/*sqlite3Worker1Promiser()*/;\nglobalThis.sqlite3Worker1Promiser.defaultConfig = {\n  worker: function(){\n    return new Worker(new URL(\"sqlite3-worker1-bundler-friendly.mjs\", import.meta.url),{\n      type: 'module'\n    });\n  }\n  ,\n  onerror: (...args)=>console.error('worker1 promiser error',...args)\n};\n","var _a;\nexport const defaultOptions = {\n    timeout: 20000,\n    maxPageSize: 4096,\n    cacheSize: 1024,\n    headers: {}\n};\n// These must be different from any SQLite CAPI codes\nexport var SYNC;\n(function (SYNC) {\n    SYNC[SYNC[\"WORKMSG\"] = 16777215] = \"WORKMSG\";\n    SYNC[SYNC[\"HANDSHAKE\"] = 16777214] = \"HANDSHAKE\";\n})(SYNC = SYNC || (SYNC = {}));\nconst debugOptions = (typeof SQLITE_DEBUG !== 'undefined' && SQLITE_DEBUG) ||\n    (typeof process !== 'undefined' && typeof ((_a = process === null || process === void 0 ? void 0 : process.env) === null || _a === void 0 ? void 0 : _a.SQLITE_DEBUG) !== 'undefined' && process.env.SQLITE_DEBUG) ||\n    '';\nexport const debugSys = ['threads', 'vfs', 'cache', 'http'];\nexport const debug = {};\nfor (const d of debugSys) {\n    debug[d] = debugOptions.includes(d) ?\n        console.debug.bind(console) :\n        () => undefined;\n}\n//# sourceMappingURL=vfs-http-types.js.map","// Procedures for changing the byte sex\n// SQLite is always Big-Endian, JS follows the platform, which is Little-Endian on x86\nimport { debug } from './vfs-http-types.js';\nconst swapNeeded = (function () {\n    const ab = new ArrayBuffer(2);\n    const u8 = new Uint8Array(ab);\n    const u16 = new Uint16Array(ab);\n    u8[0] = 0xF0;\n    u8[1] = 0x0D;\n    // Big\n    if (u16[0] == 0xF00D) {\n        debug['threads']('System is Big-Endian');\n        return false;\n    }\n    // Little\n    if (u16[0] == 0x0DF0) {\n        debug['threads']('System is Little-Endian');\n        return true;\n    }\n    throw new Error(`Failed determining endianness: ${u16}`);\n})();\nexport function ntoh16(data) {\n    if (swapNeeded) {\n        for (let i = 0; i < data.length; i++) {\n            data[i] = ((data[i] & 0xFF00) >> 8) | ((data[i] & 0x00FF) << 8);\n        }\n    }\n}\n//# sourceMappingURL=endianness.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n// This is the user-facing API\n// It runs in the user-thread (which is probably the main UI thread)\nimport '#sqlite3-worker1-promiser.js';\nimport { debug } from './vfs-http-types.js';\nimport * as VFSHTTP from './vfs-http-types.js';\nimport { installHttpVfs } from './vfs-http.js';\nimport { installSyncHttpVfs } from './vfs-sync-http.js';\nexport * as VFSHTTP from './vfs-http-types.js';\n/**\n * Creates a new SQLite worker thread, can accept an optional HTTP backend for HTTP support.\n *\n * The sync backend is particularly inefficient in Node.js and should never be used except for unit-testing browser\n * code.\n *\n * @param {SQLiteOptions} [options] Options object\n * @param {VFSHTTP.Backend | true} [options.http] Optional HTTP backend, either a shared one or a dedicated sync one\n * @returns {Promise<SQLite.Promiser>}\n */\nexport function createSQLiteThread(options) {\n    debug['threads']('Creating new SQLite thread', options);\n    let worker;\n    const r = new Promise((resolve, reject) => {\n        const promiser = sqlite3Worker1Promiser({\n            onready: () => {\n                resolve(promiser);\n            },\n            worker: () => {\n                try {\n                    worker = new Worker(new URL('./sqlite-worker.js', import.meta.url));\n                    worker.onerror = (event) => console.error('Worker bootstrap failed', event);\n                    const backend = options === null || options === void 0 ? void 0 : options.http;\n                    // This is the SQLite worker green light\n                    if ((backend === null || backend === void 0 ? void 0 : backend.type) === 'shared') {\n                        backend.createNewChannel()\n                            .then((channel) => {\n                            worker.postMessage({ httpChannel: channel, httpOptions: backend.options }, [channel.port]);\n                        });\n                    }\n                    else if ((backend === null || backend === void 0 ? void 0 : backend.type) === 'sync') {\n                        worker.postMessage({ httpChannel: true, httpOptions: backend.options });\n                    }\n                    else {\n                        worker.postMessage({});\n                    }\n                    return worker;\n                }\n                catch (e) {\n                    console.error('Failed to create SQLite worker', e);\n                    reject(e);\n                }\n            }\n        });\n    }).then((p) => {\n        p.close = () => {\n            worker.terminate();\n        };\n        return p;\n    });\n    return r;\n}\nconst noSharedBufferMsg = 'SharedArrayBuffer is not available. ' +\n    'If your browser supports it, the webserver must send ' +\n    '\"Cross-Origin-Opener-Policy: same-origin \"' +\n    'and \"Cross-Origin-Embedder-Policy: require-corp\" headers. ' +\n    'Alternatively, if you do not intend to use concurrent connections, ' +\n    'pass `sync` to `createHttpBackend` to explicitly create a synchronous ' +\n    'HTTP backend and suppress this warning message.';\n/**\n * Creates a new HTTP backend worker that can support multiple SQLite threads.\n * The cache is shared only if the environment supports SharedArrayBuffer.\n *\n * This is always the case in Node.js, but it requires a cross-origin isolated\n * environment in the browser.\n *\n * @param {VFSHTTP.Options} [options] Options object\n * @returns {VFSHTTP.Backend}\n */\nexport function createHttpBackend(options) {\n    debug['threads']('Creating new HTTP VFS backend thread');\n    if (typeof SharedArrayBuffer === 'undefined' || (options === null || options === void 0 ? void 0 : options.backendType) === 'sync') {\n        if ((options === null || options === void 0 ? void 0 : options.backendType) === 'shared')\n            throw new Error(noSharedBufferMsg);\n        if ((options === null || options === void 0 ? void 0 : options.backendType) !== 'sync')\n            console.warn(noSharedBufferMsg + ' Falling back to the legacy HTTP backend.');\n        return {\n            type: 'sync',\n            worker: null,\n            options,\n            createNewChannel: () => {\n                throw new Error('Sync backend does not support channels');\n            },\n            close: () => Promise.resolve(),\n            terminate: () => undefined\n        };\n    }\n    let nextId = 1;\n    const worker = new Worker(new URL('./vfs-http-worker.js', import.meta.url));\n    worker.postMessage({ msg: 'init', options });\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const consumers = {};\n    worker.onmessage = ({ data }) => {\n        debug['threads']('Received control message reply', data);\n        switch (data.msg) {\n            case 'ack':\n                if (!consumers[data.id]) {\n                    console.error('Invalid response received from backend', data);\n                    return;\n                }\n                debug['threads']('New HTTP VFS channel created', consumers);\n                consumers[data.id].resolve({\n                    port: consumers[data.id].channel.port2,\n                    shm: data.shm\n                });\n                clearTimeout(consumers[data.id].timeout);\n                delete consumers[data.id].resolve;\n                delete consumers[data.id].timeout;\n                return;\n        }\n    };\n    return {\n        type: 'shared',\n        worker,\n        options,\n        createNewChannel: function () {\n            debug['threads']('Creating a new HTTP VFS channel');\n            const channel = new MessageChannel();\n            const id = nextId++;\n            worker.postMessage({ msg: 'handshake', port: channel.port1, id }, [channel.port1]);\n            return new Promise((resolve, reject) => {\n                var _a;\n                const timeout = setTimeout(() => {\n                    delete consumers[id];\n                    reject('Timeout while waiting on backend');\n                }, (_a = options === null || options === void 0 ? void 0 : options.timeout) !== null && _a !== void 0 ? _a : VFSHTTP.defaultOptions.timeout);\n                consumers[id] = { id, channel, resolve, timeout };\n            });\n        },\n        terminate: function () {\n            worker.terminate();\n        },\n        close: function () {\n            debug['threads']('Closing the HTTP VFS channel');\n            worker.postMessage({ msg: 'close' });\n            return new Promise((resolve, reject) => {\n                var _a;\n                const timeout = setTimeout(() => {\n                    reject('Timeout while waiting on backend');\n                }, (_a = options === null || options === void 0 ? void 0 : options.timeout) !== null && _a !== void 0 ? _a : VFSHTTP.defaultOptions.timeout);\n                worker.onmessage = ({ data }) => {\n                    debug['threads']('Received close response', data);\n                    if (data.msg === 'ack' && data.id === undefined) {\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                };\n            });\n        },\n    };\n}\n/**\n * Initialize synchronous SQLite in the current thread, can accept an optional HTTP backend for HTTP support.\n *\n * The sync backend is particularly inefficient in Node.js and should never be used except for unit-testing browser\n * code.\n *\n * @param {SQLiteOptions} [options] Options object\n * @param {VFSHTTP.Backend | true} [options.http] Optional HTTP backend, either a shared one or a dedicated sync one\n * @returns {Promise<SQLite.SQLite3>}\n */\nexport function initSyncSQLite(options) {\n    debug['threads']('Initializing synchronous SQLite', options);\n    return import('#sqlite3.js')\n        .then((mod) => mod.default())\n        .then((sqlite3) => {\n        const backend = options === null || options === void 0 ? void 0 : options.http;\n        if ((backend === null || backend === void 0 ? void 0 : backend.type) === 'shared') {\n            return backend.createNewChannel().then((channel) => {\n                installHttpVfs(sqlite3, channel, backend.options);\n                return sqlite3;\n            });\n        }\n        else if ((backend === null || backend === void 0 ? void 0 : backend.type) === 'sync') {\n            installSyncHttpVfs(sqlite3, backend.options);\n            return sqlite3;\n        }\n        return sqlite3;\n    });\n}\n/**\n * Higher-level API for working with a pool\n * @param {number} [opts.workers] Number of concurrent workers to spawn, @default 1\n * @param {VFSHTTP.Options} [opts.httpOptions] Options to pass to the HTTP backend\n */\nexport function createSQLiteHTTPPool(opts) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        const backend = createHttpBackend(opts === null || opts === void 0 ? void 0 : opts.httpOptions);\n        const workers = [];\n        const startq = [];\n        for (let i = 0; i < ((_a = opts.workers) !== null && _a !== void 0 ? _a : 1); i++) {\n            startq.push(createSQLiteThread({ http: backend })\n                .then((worker) => workers.push({\n                worker,\n                busy: null\n            }))\n                .then(() => undefined));\n        }\n        yield Promise.all(startq);\n        return {\n            backendType: backend.type,\n            open: (url) => Promise.all(workers.map((w) => w.worker('open', {\n                filename: 'file:' + encodeURI(url),\n                vfs: 'http'\n            })))\n                .then(() => undefined),\n            close: () => Promise.all(workers.map((w) => w.worker.close()))\n                .then(() => backend.close()),\n            exec: function (sql, bind, opts) {\n                return __awaiter(this, void 0, void 0, function* () {\n                    let w;\n                    do {\n                        w = workers.find((w) => !w.busy);\n                        if (!w)\n                            yield Promise.race(workers.map((w) => w.busy)).catch(() => undefined);\n                    } while (!w);\n                    const results = [];\n                    w.busy = w.worker('exec', {\n                        sql,\n                        bind,\n                        rowMode: opts === null || opts === void 0 ? void 0 : opts.rowMode,\n                        callback: (row) => {\n                            if (row.row)\n                                results.push(row);\n                        }\n                    })\n                        .then(() => undefined)\n                        .finally(() => {\n                        if (!w)\n                            throw new Error('Lost worker pool');\n                        w.busy = null;\n                    });\n                    yield w.busy;\n                    return results;\n                });\n            }\n        };\n    });\n}\n//# sourceMappingURL=index.js.map","import { createSQLiteThread, createHttpBackend } from 'sqlite-wasm-http';\n\nconst pacman = new URL('./pacman.svg', import.meta.url);\n\n(async function main() {\n  const httpBackend = createHttpBackend({\n    maxPageSize: 4096,\n    timeout: 30000\n  });\n  document.getElementById(`backend-${httpBackend.type}`).hidden = false;\n  const db = await createSQLiteThread({ http: httpBackend });\n  const remoteDB = 'https://velivole.b-cdn.net/maptiler-osm-2017-07-03-v3.6.1-europe.mbtiles';\n\n  const elUrl = document.getElementById('input-url') as HTMLInputElement;\n  const elSql = document.getElementById('input-sql') as HTMLInputElement;\n  const btnGo = document.getElementById('btn-go');\n  const btnConf = document.getElementById('btn-config');\n  const divResults = document.getElementById('results');\n  const divMsg = document.getElementById('msg');\n\n  elUrl.value = remoteDB;\n  elSql.value = 'SELECT zoom_level, tile_row, tile_column FROM tiles WHERE zoom_level = 1';\n\n  btnConf.addEventListener('click', async () => {\n    divMsg.innerHTML = `<img src=\"${pacman}\">`;\n    const msg = await db('config-get', {});\n    divMsg.innerHTML = JSON.stringify(msg, null, 4);\n    divResults.innerHTML = '';\n  });\n\n  for (const ex of Array.from(document.getElementsByClassName('example-sql')))\n    ex.addEventListener('click', (el) => {\n      elSql.value = el.target.innerText;\n  });\n\n  btnGo.addEventListener('click', async () => {\n    divMsg.innerHTML = `<img src=\"${pacman}\">`;\n    divResults.innerHTML = `<img id=\"spinner-results\" src=\"${pacman}\">`;\n    try {\n      const msgOpen = await db('open', {\n        filename: 'file:' + encodeURI(elUrl.value),\n        vfs: 'http'\n      });\n      divMsg.innerHTML = JSON.stringify(msgOpen, null, 4);\n\n      const msgExec = await db('exec', {\n        sql: elSql.value,\n        callback: function (row) {\n          if (row.row)\n            divResults.innerHTML += `<div>row: ${JSON.stringify(row, null, 4)}</div>`;\n          else\n            document.getElementById('spinner-results').hidden = true;\n        }\n      });\n      divMsg.innerHTML += JSON.stringify(msgExec, null, 4);\n\n      const msgClose = await db('close', {});\n      divMsg.innerHTML += JSON.stringify(msgClose, null, 4);\n    } catch (e) {\n      if (e.result?.message)\n        divMsg.innerHTML = e.result.message;\n      else\n        divMsg.innerHTML = e.toString();\n    }\n  });\n})();\n"],"names":["inProgress","dataWebpackPrefix","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","d","definition","key","o","Object","defineProperty","enumerable","get","f","e","chunkId","Promise","all","keys","reduce","promises","u","g","globalThis","this","Function","window","obj","prop","prototype","hasOwnProperty","call","l","url","done","push","script","needAttach","scripts","document","getElementsByTagName","i","length","s","getAttribute","createElement","charset","timeout","nc","setAttribute","src","onScriptComplete","prev","event","onerror","onload","clearTimeout","doneFns","parentNode","removeChild","forEach","fn","setTimeout","bind","type","target","head","appendChild","r","Symbol","toStringTag","value","scriptUrl","importScripts","location","currentScript","Error","replace","p","b","baseURI","self","href","installedChunks","j","installedChunkData","promise","resolve","reject","error","errorType","realSrc","message","name","request","webpackJsonpCallback","parentChunkLoadingFunction","data","chunkIds","moreModules","runtime","some","id","chunkLoadingGlobal","sqlite3Worker1Promiser","callee","config","defaultConfig","arguments","assign","create","onready","handlerMap","noop","err","debug","idTypeMap","generateMessageId","genMsgId","msg","toss","args","join","dbId","worker","onmessage","ev","msgHandler","messageId","result","onrow","onunhandled","departureTime","performance","now","proxy","rowCallbackId","callback","postMessage","finally","Worker","URL","console","defaultOptions","maxPageSize","cacheSize","headers","SYNC","debugOptions","debugSys","includes","ab","ArrayBuffer","u8","Uint8Array","u16","Uint16Array","noSharedBufferMsg","pacman","httpBackend","options","SharedArrayBuffer","backendType","warn","createNewChannel","close","terminate","nextId","consumers","port","channel","port2","shm","MessageChannel","port1","_a","createHttpBackend","getElementById","hidden","db","promiser","backend","http","then","httpChannel","httpOptions","createSQLiteThread","elUrl","elSql","btnGo","btnConf","divResults","divMsg","addEventListener","innerHTML","JSON","stringify","ex","Array","from","getElementsByClassName","el","innerText","msgOpen","filename","encodeURI","vfs","msgExec","sql","row","msgClose","toString"],"sourceRoot":""}