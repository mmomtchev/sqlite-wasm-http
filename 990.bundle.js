(()=>{"use strict";const t="object"==typeof performance&&performance&&"function"==typeof performance.now?performance:Date,e="function"==typeof AbortController?AbortController:class{constructor(){this.signal=new n}abort(t=new Error("This operation was aborted")){this.signal.reason=this.signal.reason||t,this.signal.aborted=!0,this.signal.dispatchEvent({type:"abort",target:this.signal})}},i="function"==typeof AbortSignal,s="function"==typeof e.AbortSignal,n=i?AbortSignal:s?e.AbortController:class{constructor(){this.reason=void 0,this.aborted=!1,this._listeners=[]}dispatchEvent(t){"abort"===t.type&&(this.aborted=!0,this.onabort(t),this._listeners.forEach((e=>e(t)),this))}onabort(){}addEventListener(t,e){"abort"===t&&this._listeners.push(e)}removeEventListener(t,e){"abort"===t&&(this._listeners=this._listeners.filter((t=>t!==e)))}},o=new Set,r=(t,e)=>{const i=`LRU_CACHE_OPTION_${t}`;l(i)&&c(i,`${t} option`,`options.${e}`,g)},a=(t,e)=>{const i=`LRU_CACHE_METHOD_${t}`;if(l(i)){const{prototype:s}=g,{get:n}=Object.getOwnPropertyDescriptor(s,t);c(i,`${t} method`,`cache.${e}()`,n)}},h=(...t)=>{"object"==typeof process&&process&&"function"==typeof process.emitWarning?process.emitWarning(...t):console.error(...t)},l=t=>!o.has(t),c=(t,e,i,s)=>{o.add(t),h(`The ${e} is deprecated. Please use ${i} instead.`,"DeprecationWarning",t,s)},d=t=>t&&t===Math.floor(t)&&t>0&&isFinite(t),u=t=>d(t)?t<=Math.pow(2,8)?Uint8Array:t<=Math.pow(2,16)?Uint16Array:t<=Math.pow(2,32)?Uint32Array:t<=Number.MAX_SAFE_INTEGER?f:null:null;class f extends Array{constructor(t){super(t),this.fill(0)}}class p{constructor(t){if(0===t)return[];const e=u(t);this.heap=new e(t),this.length=0}push(t){this.heap[this.length++]=t}pop(){return this.heap[--this.length]}}class g{constructor(t={}){const{max:e=0,ttl:i,ttlResolution:s=1,ttlAutopurge:n,updateAgeOnGet:a,updateAgeOnHas:c,allowStale:f,dispose:m,disposeAfter:y,noDisposeOnSet:S,noUpdateTTL:w,maxSize:v=0,maxEntrySize:z=0,sizeCalculation:b,fetchMethod:A,fetchContext:x,noDeleteOnFetchRejection:L,noDeleteOnStaleGet:T,allowStaleOnFetchRejection:_,allowStaleOnFetchAbort:k,ignoreFetchAbort:F}=t,{length:O,maxAge:E,stale:C}=t instanceof g?{}:t;if(0!==e&&!d(e))throw new TypeError("max option must be a nonnegative integer");const R=e?u(e):Array;if(!R)throw new Error("invalid max value: "+e);if(this.max=e,this.maxSize=v,this.maxEntrySize=z||this.maxSize,this.sizeCalculation=b||O,this.sizeCalculation){if(!this.maxSize&&!this.maxEntrySize)throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");if("function"!=typeof this.sizeCalculation)throw new TypeError("sizeCalculation set to non-function")}if(this.fetchMethod=A||null,this.fetchMethod&&"function"!=typeof this.fetchMethod)throw new TypeError("fetchMethod must be a function if specified");if(this.fetchContext=x,!this.fetchMethod&&void 0!==x)throw new TypeError("cannot set fetchContext without fetchMethod");if(this.keyMap=new Map,this.keyList=new Array(e).fill(null),this.valList=new Array(e).fill(null),this.next=new R(e),this.prev=new R(e),this.head=0,this.tail=0,this.free=new p(e),this.initialFill=1,this.size=0,"function"==typeof m&&(this.dispose=m),"function"==typeof y?(this.disposeAfter=y,this.disposed=[]):(this.disposeAfter=null,this.disposed=null),this.noDisposeOnSet=!!S,this.noUpdateTTL=!!w,this.noDeleteOnFetchRejection=!!L,this.allowStaleOnFetchRejection=!!_,this.allowStaleOnFetchAbort=!!k,this.ignoreFetchAbort=!!F,0!==this.maxEntrySize){if(0!==this.maxSize&&!d(this.maxSize))throw new TypeError("maxSize must be a positive integer if specified");if(!d(this.maxEntrySize))throw new TypeError("maxEntrySize must be a positive integer if specified");this.initializeSizeTracking()}if(this.allowStale=!!f||!!C,this.noDeleteOnStaleGet=!!T,this.updateAgeOnGet=!!a,this.updateAgeOnHas=!!c,this.ttlResolution=d(s)||0===s?s:1,this.ttlAutopurge=!!n,this.ttl=i||E||0,this.ttl){if(!d(this.ttl))throw new TypeError("ttl must be a positive integer if specified");this.initializeTTLTracking()}if(0===this.max&&0===this.ttl&&0===this.maxSize)throw new TypeError("At least one of max, maxSize, or ttl is required");if(!this.ttlAutopurge&&!this.max&&!this.maxSize){const t="LRU_CACHE_UNBOUNDED";l(t)&&(o.add(t),h("TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.","UnboundedCacheWarning",t,g))}C&&r("stale","allowStale"),E&&r("maxAge","ttl"),O&&r("length","sizeCalculation")}getRemainingTTL(t){return this.has(t,{updateAgeOnHas:!1})?1/0:0}initializeTTLTracking(){this.ttls=new f(this.max),this.starts=new f(this.max),this.setItemTTL=(e,i,s=t.now())=>{if(this.starts[e]=0!==i?s:0,this.ttls[e]=i,0!==i&&this.ttlAutopurge){const t=setTimeout((()=>{this.isStale(e)&&this.delete(this.keyList[e])}),i+1);t.unref&&t.unref()}},this.updateItemAge=e=>{this.starts[e]=0!==this.ttls[e]?t.now():0},this.statusTTL=(t,s)=>{t&&(t.ttl=this.ttls[s],t.start=this.starts[s],t.now=e||i(),t.remainingTTL=t.now+t.ttl-t.start)};let e=0;const i=()=>{const i=t.now();if(this.ttlResolution>0){e=i;const t=setTimeout((()=>e=0),this.ttlResolution);t.unref&&t.unref()}return i};this.getRemainingTTL=t=>{const s=this.keyMap.get(t);return void 0===s?0:0===this.ttls[s]||0===this.starts[s]?1/0:this.starts[s]+this.ttls[s]-(e||i())},this.isStale=t=>0!==this.ttls[t]&&0!==this.starts[t]&&(e||i())-this.starts[t]>this.ttls[t]}updateItemAge(t){}statusTTL(t,e){}setItemTTL(t,e,i){}isStale(t){return!1}initializeSizeTracking(){this.calculatedSize=0,this.sizes=new f(this.max),this.removeItemSize=t=>{this.calculatedSize-=this.sizes[t],this.sizes[t]=0},this.requireSize=(t,e,i,s)=>{if(this.isBackgroundFetch(e))return 0;if(!d(i)){if(!s)throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");if("function"!=typeof s)throw new TypeError("sizeCalculation must be a function");if(i=s(e,t),!d(i))throw new TypeError("sizeCalculation return invalid (expect positive integer)")}return i},this.addItemSize=(t,e,i)=>{if(this.sizes[t]=e,this.maxSize){const e=this.maxSize-this.sizes[t];for(;this.calculatedSize>e;)this.evict(!0)}this.calculatedSize+=this.sizes[t],i&&(i.entrySize=e,i.totalCalculatedSize=this.calculatedSize)}}removeItemSize(t){}addItemSize(t,e){}requireSize(t,e,i,s){if(i||s)throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache")}*indexes({allowStale:t=this.allowStale}={}){if(this.size)for(let e=this.tail;this.isValidIndex(e)&&(!t&&this.isStale(e)||(yield e),e!==this.head);)e=this.prev[e]}*rindexes({allowStale:t=this.allowStale}={}){if(this.size)for(let e=this.head;this.isValidIndex(e)&&(!t&&this.isStale(e)||(yield e),e!==this.tail);)e=this.next[e]}isValidIndex(t){return void 0!==t&&this.keyMap.get(this.keyList[t])===t}*entries(){for(const t of this.indexes())this.isBackgroundFetch(this.valList[t])||(yield[this.keyList[t],this.valList[t]])}*rentries(){for(const t of this.rindexes())this.isBackgroundFetch(this.valList[t])||(yield[this.keyList[t],this.valList[t]])}*keys(){for(const t of this.indexes())this.isBackgroundFetch(this.valList[t])||(yield this.keyList[t])}*rkeys(){for(const t of this.rindexes())this.isBackgroundFetch(this.valList[t])||(yield this.keyList[t])}*values(){for(const t of this.indexes())this.isBackgroundFetch(this.valList[t])||(yield this.valList[t])}*rvalues(){for(const t of this.rindexes())this.isBackgroundFetch(this.valList[t])||(yield this.valList[t])}[Symbol.iterator](){return this.entries()}find(t,e={}){for(const i of this.indexes())if(t(this.valList[i],this.keyList[i],this))return this.get(this.keyList[i],e)}forEach(t,e=this){for(const i of this.indexes())t.call(e,this.valList[i],this.keyList[i],this)}rforEach(t,e=this){for(const i of this.rindexes())t.call(e,this.valList[i],this.keyList[i],this)}get prune(){return a("prune","purgeStale"),this.purgeStale}purgeStale(){let t=!1;for(const e of this.rindexes({allowStale:!0}))this.isStale(e)&&(this.delete(this.keyList[e]),t=!0);return t}dump(){const e=[];for(const i of this.indexes({allowStale:!0})){const s=this.keyList[i],n=this.valList[i],o=this.isBackgroundFetch(n)?n.__staleWhileFetching:n;if(void 0===o)continue;const r={value:o};if(this.ttls){r.ttl=this.ttls[i];const e=t.now()-this.starts[i];r.start=Math.floor(Date.now()-e)}this.sizes&&(r.size=this.sizes[i]),e.unshift([s,r])}return e}load(e){this.clear();for(const[i,s]of e){if(s.start){const e=Date.now()-s.start;s.start=t.now()-e}this.set(i,s.value,s)}}dispose(t,e,i){}set(t,e,{ttl:i=this.ttl,start:s,noDisposeOnSet:n=this.noDisposeOnSet,size:o=0,sizeCalculation:r=this.sizeCalculation,noUpdateTTL:a=this.noUpdateTTL,status:h}={}){if(o=this.requireSize(t,e,o,r),this.maxEntrySize&&o>this.maxEntrySize)return h&&(h.set="miss",h.maxEntrySizeExceeded=!0),this.delete(t),this;let l=0===this.size?void 0:this.keyMap.get(t);if(void 0===l)l=this.newIndex(),this.keyList[l]=t,this.valList[l]=e,this.keyMap.set(t,l),this.next[this.tail]=l,this.prev[l]=this.tail,this.tail=l,this.size++,this.addItemSize(l,o,h),h&&(h.set="add"),a=!1;else{this.moveToTail(l);const i=this.valList[l];if(e!==i){if(this.isBackgroundFetch(i)?i.__abortController.abort(new Error("replaced")):n||(this.dispose(i,t,"set"),this.disposeAfter&&this.disposed.push([i,t,"set"])),this.removeItemSize(l),this.valList[l]=e,this.addItemSize(l,o,h),h){h.set="replace";const t=i&&this.isBackgroundFetch(i)?i.__staleWhileFetching:i;void 0!==t&&(h.oldValue=t)}}else h&&(h.set="update")}if(0===i||0!==this.ttl||this.ttls||this.initializeTTLTracking(),a||this.setItemTTL(l,i,s),this.statusTTL(h,l),this.disposeAfter)for(;this.disposed.length;)this.disposeAfter(...this.disposed.shift());return this}newIndex(){return 0===this.size?this.tail:this.size===this.max&&0!==this.max?this.evict(!1):0!==this.free.length?this.free.pop():this.initialFill++}pop(){if(this.size){const t=this.valList[this.head];return this.evict(!0),t}}evict(t){const e=this.head,i=this.keyList[e],s=this.valList[e];return this.isBackgroundFetch(s)?s.__abortController.abort(new Error("evicted")):(this.dispose(s,i,"evict"),this.disposeAfter&&this.disposed.push([s,i,"evict"])),this.removeItemSize(e),t&&(this.keyList[e]=null,this.valList[e]=null,this.free.push(e)),this.head=this.next[e],this.keyMap.delete(i),this.size--,e}has(t,{updateAgeOnHas:e=this.updateAgeOnHas,status:i}={}){const s=this.keyMap.get(t);if(void 0!==s){if(!this.isStale(s))return e&&this.updateItemAge(s),i&&(i.has="hit"),this.statusTTL(i,s),!0;i&&(i.has="stale",this.statusTTL(i,s))}else i&&(i.has="miss");return!1}peek(t,{allowStale:e=this.allowStale}={}){const i=this.keyMap.get(t);if(void 0!==i&&(e||!this.isStale(i))){const t=this.valList[i];return this.isBackgroundFetch(t)?t.__staleWhileFetching:t}}backgroundFetch(t,i,s,n){const o=void 0===i?void 0:this.valList[i];if(this.isBackgroundFetch(o))return o;const r=new e;s.signal&&s.signal.addEventListener("abort",(()=>r.abort(s.signal.reason)));const a={signal:r.signal,options:s,context:n},h=(e,n=!1)=>{const{aborted:o}=r.signal,h=s.ignoreFetchAbort&&void 0!==e;return s.status&&(o&&!n?(s.status.fetchAborted=!0,s.status.fetchError=r.signal.reason,h&&(s.status.fetchAbortIgnored=!0)):s.status.fetchResolved=!0),!o||h||n?(this.valList[i]===c&&(void 0===e?c.__staleWhileFetching?this.valList[i]=c.__staleWhileFetching:this.delete(t):(s.status&&(s.status.fetchUpdated=!0),this.set(t,e,a.options))),e):l(r.signal.reason)},l=e=>{const{aborted:n}=r.signal,o=n&&s.allowStaleOnFetchAbort,a=o||s.allowStaleOnFetchRejection,h=a||s.noDeleteOnFetchRejection;if(this.valList[i]===c&&(h&&void 0!==c.__staleWhileFetching?o||(this.valList[i]=c.__staleWhileFetching):this.delete(t)),a)return s.status&&void 0!==c.__staleWhileFetching&&(s.status.returnedStale=!0),c.__staleWhileFetching;if(c.__returned===c)throw e};s.status&&(s.status.fetchDispatched=!0);const c=new Promise(((e,i)=>{this.fetchMethod(t,o,a).then((t=>e(t)),i),r.signal.addEventListener("abort",(()=>{s.ignoreFetchAbort&&!s.allowStaleOnFetchAbort||(e(),s.allowStaleOnFetchAbort&&(e=t=>h(t,!0)))}))})).then(h,(t=>(s.status&&(s.status.fetchRejected=!0,s.status.fetchError=t),l(t))));return c.__abortController=r,c.__staleWhileFetching=o,c.__returned=null,void 0===i?(this.set(t,c,{...a.options,status:void 0}),i=this.keyMap.get(t)):this.valList[i]=c,c}isBackgroundFetch(t){return t&&"object"==typeof t&&"function"==typeof t.then&&Object.prototype.hasOwnProperty.call(t,"__staleWhileFetching")&&Object.prototype.hasOwnProperty.call(t,"__returned")&&(t.__returned===t||null===t.__returned)}async fetch(t,{allowStale:e=this.allowStale,updateAgeOnGet:i=this.updateAgeOnGet,noDeleteOnStaleGet:s=this.noDeleteOnStaleGet,ttl:n=this.ttl,noDisposeOnSet:o=this.noDisposeOnSet,size:r=0,sizeCalculation:a=this.sizeCalculation,noUpdateTTL:h=this.noUpdateTTL,noDeleteOnFetchRejection:l=this.noDeleteOnFetchRejection,allowStaleOnFetchRejection:c=this.allowStaleOnFetchRejection,ignoreFetchAbort:d=this.ignoreFetchAbort,allowStaleOnFetchAbort:u=this.allowStaleOnFetchAbort,fetchContext:f=this.fetchContext,forceRefresh:p=!1,status:g,signal:m}={}){if(!this.fetchMethod)return g&&(g.fetch="get"),this.get(t,{allowStale:e,updateAgeOnGet:i,noDeleteOnStaleGet:s,status:g});const y={allowStale:e,updateAgeOnGet:i,noDeleteOnStaleGet:s,ttl:n,noDisposeOnSet:o,size:r,sizeCalculation:a,noUpdateTTL:h,noDeleteOnFetchRejection:l,allowStaleOnFetchRejection:c,allowStaleOnFetchAbort:u,ignoreFetchAbort:d,status:g,signal:m};let S=this.keyMap.get(t);if(void 0===S){g&&(g.fetch="miss");const e=this.backgroundFetch(t,S,y,f);return e.__returned=e}{const s=this.valList[S];if(this.isBackgroundFetch(s)){const t=e&&void 0!==s.__staleWhileFetching;return g&&(g.fetch="inflight",t&&(g.returnedStale=!0)),t?s.__staleWhileFetching:s.__returned=s}const n=this.isStale(S);if(!p&&!n)return g&&(g.fetch="hit"),this.moveToTail(S),i&&this.updateItemAge(S),this.statusTTL(g,S),s;const o=this.backgroundFetch(t,S,y,f),r=void 0!==o.__staleWhileFetching,a=r&&e;return g&&(g.fetch=r&&n?"stale":"refresh",a&&n&&(g.returnedStale=!0)),a?o.__staleWhileFetching:o.__returned=o}}get(t,{allowStale:e=this.allowStale,updateAgeOnGet:i=this.updateAgeOnGet,noDeleteOnStaleGet:s=this.noDeleteOnStaleGet,status:n}={}){const o=this.keyMap.get(t);if(void 0!==o){const r=this.valList[o],a=this.isBackgroundFetch(r);return this.statusTTL(n,o),this.isStale(o)?(n&&(n.get="stale"),a?(n&&(n.returnedStale=e&&void 0!==r.__staleWhileFetching),e?r.__staleWhileFetching:void 0):(s||this.delete(t),n&&(n.returnedStale=e),e?r:void 0)):(n&&(n.get="hit"),a?r.__staleWhileFetching:(this.moveToTail(o),i&&this.updateItemAge(o),r))}n&&(n.get="miss")}connect(t,e){this.prev[e]=t,this.next[t]=e}moveToTail(t){t!==this.tail&&(t===this.head?this.head=this.next[t]:this.connect(this.prev[t],this.next[t]),this.connect(this.tail,t),this.tail=t)}get del(){return a("del","delete"),this.delete}delete(t){let e=!1;if(0!==this.size){const i=this.keyMap.get(t);if(void 0!==i)if(e=!0,1===this.size)this.clear();else{this.removeItemSize(i);const e=this.valList[i];this.isBackgroundFetch(e)?e.__abortController.abort(new Error("deleted")):(this.dispose(e,t,"delete"),this.disposeAfter&&this.disposed.push([e,t,"delete"])),this.keyMap.delete(t),this.keyList[i]=null,this.valList[i]=null,i===this.tail?this.tail=this.prev[i]:i===this.head?this.head=this.next[i]:(this.next[this.prev[i]]=this.next[i],this.prev[this.next[i]]=this.prev[i]),this.size--,this.free.push(i)}}if(this.disposed)for(;this.disposed.length;)this.disposeAfter(...this.disposed.shift());return e}clear(){for(const t of this.rindexes({allowStale:!0})){const e=this.valList[t];if(this.isBackgroundFetch(e))e.__abortController.abort(new Error("deleted"));else{const i=this.keyList[t];this.dispose(e,i,"delete"),this.disposeAfter&&this.disposed.push([e,i,"delete"])}}if(this.keyMap.clear(),this.valList.fill(null),this.keyList.fill(null),this.ttls&&(this.ttls.fill(0),this.starts.fill(0)),this.sizes&&this.sizes.fill(0),this.head=0,this.tail=0,this.initialFill=1,this.free.length=0,this.calculatedSize=0,this.size=0,this.disposed)for(;this.disposed.length;)this.disposeAfter(...this.disposed.shift())}get reset(){return a("reset","clear"),this.clear}get length(){return((t,e)=>{const i=`LRU_CACHE_PROPERTY_${t}`;if(l(i)){const{prototype:e}=g,{get:s}=Object.getOwnPropertyDescriptor(e,t);c(i,`${t} property`,"cache.size",s)}})("length"),this.size}static get AbortController(){return e}static get AbortSignal(){return n}}const m=g,y=function(){const t=new ArrayBuffer(2),e=new Uint8Array(t),i=new Uint16Array(t);if(e[0]=240,e[1]=13,61453==i[0])return console.log("System is Big-Endian"),!1;if(3568==i[0])return console.log("System is Little-Endian"),!0;throw new Error(`Failed determining endianness: ${i}`)}(),S=[]||0,w=["threads","vfs","cache"],v={};for(const t of w)v[t]=S.includes(t)?console.debug.bind(console):()=>{};var z=function(t,e,i,s){return new(i||(i=Promise))((function(n,o){function r(t){try{h(s.next(t))}catch(t){o(t)}}function a(t){try{h(s.throw(t))}catch(t){o(t)}}function h(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,a)}h((s=s.apply(t,e||[])).next())}))};let b;const A={},x=new m({max:32});let L,T=1;const _={xOpen:function(t){var e;return z(this,void 0,void 0,(function*(){if(x.has(t.url))return 0;const i=Object.assign({},b.fetchOptions);i.method||(i.method="HEAD"),i.headers=Object.assign({},null!==(e=i.headers)&&void 0!==e?e:{});const s=yield fetch(t.url,i);return"bytes"!==s.headers.get("Accept-Ranges")&&console.warn(`Server for ${t.url} does not advertise 'Accept-Ranges'. If the server supports it, in order to remove this message, add "Accept-Ranges: bytes". Additionally, if using CORS, add "Access-Control-Expose-Headers: *".`),x.set(t.url,{url:t.url,id:T++,size:BigInt(s.headers.get("Content-Length")),pageSize:null}),0}))},xAccess:function(t,e){return z(this,void 0,void 0,(function*(){const i=new Uint32Array(e.shm,0,1);try{const s=yield _.xOpen(t,e);i[0]=0===s?1:0}catch(t){i[0]=0}return 0}))},xRead:function(t,e){var i;return z(this,void 0,void 0,(function*(){const s=x.get(t.url);if(!s)throw new Error(`File ${t.url} not open`);if(!s.pageSize){s.pageSize=1024;const e=new ArrayBuffer(2),i=yield _.xRead({msg:"xRead",url:t.url,offset:BigInt(16),n:2},{buffer:new Uint8Array(e)}),n=new Uint16Array(e);if(0!==i)return i;if(function(t){if(y)for(let e=0;e<t.length;e++)t[e]=(65280&t[e])>>8|(255&t[e])<<8}(n),s.pageSize=n[0],1024!=s.pageSize&&(console.warn(`Page size for ${t.url} is ${s.pageSize}, recommended size is 1024`),L.delete(s.id+"|0")),s.pageSize>b.maxPageSize)throw new Error(`${s.pageSize} is over the maximum configured ${b.maxPageSize}`)}const n=BigInt(s.pageSize),o=BigInt(t.n),r=t.offset/n;r*n!==t.offset&&console.warn(`Read chunk ${t.offset} is not page-aligned`);let a=r*n;if(a+n<t.offset+o)throw new Error(`Read chunk ${t.offset}:${t.n} spans across a page-boundary`);const h=s.id+"|"+r;let l=L.get(h);if(l instanceof Promise&&(l=yield l),"number"==typeof l){v.cache(`cache hit (multi-page segment) for ${t.url}:${r}`);const e=BigInt(l)*n;l=L.get(s.id+"|"+l),l instanceof Promise&&(l=yield l),l instanceof Uint8Array?a=e:l=void 0}if(void 0===l){v.cache(`cache miss for ${t.url}:${r}`);let e=s.pageSize,n=r>0&&L.get(s.id+"|"+(Number(r)-1));n&&(n instanceof Promise&&(n=yield n),"number"==typeof n&&(n=L.get(s.id+"|"+n)),n instanceof Promise&&(n=yield n),n instanceof Uint8Array&&(e=2*n.byteLength,v.cache(`downloading super page of size ${e}`)));const o=e/s.pageSize,c=Object.assign({},b.fetchOptions);c.method||(c.method="GET"),c.headers=Object.assign({},null!==(i=c.headers)&&void 0!==i?i:{}),c.headers.Range=`bytes=${a}-${a+BigInt(e-1)}`;const d=fetch(t.url,c).then((t=>t.arrayBuffer())).then((t=>new Uint8Array(t)));L.set(h,d);for(let t=Number(r)+1;t<Number(r)+o;t++)L.set(s.id+"|"+t,d.then((()=>Number(r))));if(l=yield d,!(l instanceof Uint8Array)||0===l.length)throw new Error(`Invalid HTTP response received: ${JSON.stringify(d)}`);L.set(h,l);for(let t=Number(r)+1;t<Number(r)+o;t++)L.set(s.id+"|"+t,Number(r))}else v.cache(`cache hit for ${t.url}:${r}`);const c=Number(t.offset-a);return e.buffer.set(l.subarray(c,c+t.n)),0}))},xFilesize:function(t,e){return z(this,void 0,void 0,(function*(){const i=x.get(t.url);if(!i)throw new Error(`File ${t.fid} not open`);return new BigInt64Array(e.shm,0,1)[0]=i.size,0}))}};function k({data:t}){return z(this,void 0,void 0,(function*(){let e;v.threads("Received new work message",this,t);try{e=yield _[t.msg](t,this),v.threads("operation successful",this,e),Atomics.store(this.lock,0,e)}catch(t){console.error(t),Atomics.store(this.lock,0,1)}Atomics.notify(this.lock,0)}))}if(globalThis.onmessage=({data:t})=>{switch(v.threads("Received new control message",t),t.msg){case"handshake":{const e=new SharedArrayBuffer(b.maxPageSize+Int32Array.BYTES_PER_ELEMENT),i=new Int32Array(e,b.maxPageSize),s=new Uint8Array(e,0,b.maxPageSize);i[0]=65535,A[t.id]={id:t.id,port:t.port,shm:e,lock:i,buffer:s},postMessage({msg:"ack",id:t.id,shm:e,lock:i}),t.port.onmessage=k.bind(A[t.id])}break;case"init":b=t.options,L=new m({maxSize:1024*b.cacheSize,sizeCalculation:t=>{var e;return null!==(e=t.byteLength)&&void 0!==e?e:4}});break;case"close":postMessage({msg:"ack"}),close();break;default:throw new Error(`Invalid message received by backend: ${t}`)}},"undefined"==typeof SharedArrayBuffer)throw new Error('SharedArrayBuffer is not available. If your browser supports it, the webserver must send "Cross-Origin-Opener-Policy: same-origin "and "Cross-Origin-Embedder-Policy: require-corp" headers.')})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,